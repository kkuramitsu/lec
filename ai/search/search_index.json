{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u30fbAI\u5165\u9580 # \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u30fbAI\u306f\u3001\u3053\u308c\u304b\u3089\u306e\u5927\u5b66\u751f\u3084\u9ad8\u6821\u751f\u304c\u5b66\u90e8\u3084\u5c02\u9580\u3092\u554f\u308f\u305a\u3001 \u5b66\u3076\u3079\u304d\u5185\u5bb9\u3068\u3057\u3066\u6ce8\u76ee\u3092\u96c6\u3081\u3066\u307f\u308b\u5185\u5bb9\u3067\u3059\u3002 \u672c\u8b1b\u7fa9\u30ce\u30fc\u30c8\u306f\u3001\u65e5\u672c\u5973\u5b50\u5927\u5b66\u306e\u8b1b\u7fa9\u30fb\u6f14\u7fd2\u5411\u3051\u306b\u307e\u3068\u3081\u305f\u30ce\u30fc\u30c8\u3067\u3059\u3002 \u6570\u7269\u60c5\u5831\u79d1\u5b66\u79d1\uff08\uff13\u5e74\u751f\u524d\u671f\uff09 AI\u5165\u9580\uff08\u5168\u5b66\u90e8\u5168\u5b66\u79d1\uff09 \u6700\u8fd1\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u4eba\u5de5\u77e5\u80fd\u3092\u5b66\u3093\u3067\u307f\u305f\u3044\u3068\u3044\u3046\u5b66\u751f\u3001 \u3082\u3057\u304f\u306f\u3001\uff08\u3053\u308c\u3082\u4e0d\u601d\u8b70\u306a\u8a71\u3067\u3059\u304c\uff09\u5b66\u3070\u305b\u3066\u6b32\u3057\u3044\u3068\u3044\u3046\u5148\u751f\u304c\u5897\u3048\u3066\u3001 \u57fa\u790e\u304b\u3089\u7a4d\u307f\u4e0a\u3052\u3066\u307f\u305f\u3044\u306a\u524d\u63d0\u304c\u6210\u308a\u7acb\u305f\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u672c\u8b1b\u7fa9\u30ce\u30fc\u30c8\u306f\u3001\u6570\u5b66\u304c\u9ad8\u6821\u30ec\u30d9\u30eb\u306e\u7406\u89e3\u3067\u3042\u3063\u3066\u3082\u3001\u4eee\u306bPython\u304c\u307b\u307c\u672a\u7fd2\u8005\u3067\u3042\u3063\u3066\u3082\u3001 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u3092\u4f53\u9a13\u7684\u306b\u5165\u9580\u3067\u304d\u308b\u3088\u3046\u306b\u914d\u616e\u3057\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002 \u3082\u3046\u5c11\u3057\u3057\u3063\u304b\u308a\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u305f\u3044\u3068\u601d\u3063\u305f\u3089\u3001 \u305c\u3072\u57fa\u790e\u306b\u7acb\u3061\u8fd4\u3063\u3066\u632f\u308a\u8fd4\u3063\u3066\u3082\u3089\u3048\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u4e00\u5fdc\u3001\u81ea\u7fd2\u3067\u4f7f\u3046\u8aad\u8005\u306e\u305f\u3081\u306b\u3001\u96e3\u6613\u5ea6\u3092\u793a\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u2b50\ufe0f: \u5c11\u3005\u3001\u30a2\u30c9\u30d0\u30f3\u30b9\u306a\u5185\u5bb9 \u2b50\ufe0f\u2b50\ufe0f: Python \u672a\u7fd2\u8005\u306f\u98db\u3070\u3059\u3079\u304d\u5185\u5bb9 \u8b1b\u7fa9\u30ce\u30fc\u30c8\u306f\u3001\u81ea\u5206\u306e\u5099\u5fd8\u9332\u4ee3\u308f\u308a\u306b\u8272\u3005\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002 \u5b9f\u969b\u306e\u8b1b\u7fa9\u3084\u6f14\u7fd2\u3067\u306f\u3001\u5c65\u4fee\u8005\u306e\u7406\u89e3\u3068\u9032\u6357\u306b\u3042\u308f\u305b\u3066\u3001 \u88dc\u8db3\u8aac\u660e\u3057\u305f\u308a\u3001\u30b9\u30ad\u30c3\u30d7\u3057\u305f\u308a\u3057\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u307e\u3059\u3002 \u305d\u3082\u305d\u3082\u5165\u9580\u3059\u308b\u524d\u306b # \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u3092\u5b66\u3076\u3068\u3044\u3046\u3053\u3068\u306f\u3069\u3046\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\uff1f \u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u5be9\u67fb\u59d4\u54e1 \u65e5\u306e\u51fa\u753a\u3067\u306f\u3001\u611b\u72ac\u30b3\u30f3\u30c6\u30b9\u30c8\u304c\u958b\u50ac\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8907\u6570\u306e\u5be9\u67fb\u54e1\u304c\u305d\u308c\u305e\u308c10\u70b9\u6e80\u70b9\u3067\u63a1\u70b9\u3057\u3066\u3001\u305d\u306e\u5e73\u5747\u70b9\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3001 \u512a\u52dd\u306e\u30ef\u30f3\u3061\u3083\u3093\u3092\u6c7a\u3081\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u7686\u3055\u3093\u306f\u3001\u5c0f\u5b66\u6821\u304b\u3089\u7b97\u6570\u3092\u5b66\u3093\u3067\u304d\u307e\u3057\u305f\u3002 \u3060\u304b\u3089\u3001\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u96c6\u8a08\u4fc2\u3092\u4efb\u3055\u308c\u3066\u3082\u554f\u984c\u306a\u304f\u3001\u696d\u52d9\u3092\u9042\u884c\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002 \u4f8b\u3048\u3070\u3001\uff15\u4eba\u306e\u5be9\u67fb\u54e1\u304c\u3001\uff18\u70b9\u3001\uff18\u70b9\u3001\uff19\u70b9\u3001\uff17\u70b9\u3001\uff15\u70b9\u3068\u63a1\u70b9\u3057\u305f\u3068\u304d\u3001 \u5e73\u5747\u5024\u306f\u6b21\u306e\u3088\u3046\u306b\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \\frac{8+8+9+7+5}{5} = 7.4 \u305f\u3060\u3057\u3001\u96c6\u8a08\u3059\u308b\u30c7\u30fc\u30bf\u304c\u5897\u3048\u308b\u3068\u3001\u4f5c\u696d\u91cf\u3082\u5897\u3048\u3066\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u4eba\u9593\u306b\u3088\u308b\u624b\u4f5c\u696d\u306f\u3001\u4eee\u306b\u96fb\u5353\u3092\u4f7f\u3063\u305f\u3068\u3057\u3066\u3082\u3001\u9593\u9055\u3044\u304c\u591a\u304f\u306a\u308a\u307e\u3059\u3002 \u65e5\u672c\u306f\u3001\u30c7\u30b8\u30bf\u30eb\u5316\u304c\u9045\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u8a71\u3092\u3088\u304f\u805e\u304f\u304b\u3068\u601d\u3044\u307e\u3059\u3002 \u53e4\u304d\u826f\u304d\u65e5\u672c\u793e\u4f1a\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u305f\u3002 \u8a08\u7b97\u9593\u9055\u3044\u3057\u306a\u3044\u3088\u3046\u306b\u9811\u5f35\u308a\u307e\u3057\u3087\u3046\u3002 \u30c0\u30d6\u30eb\u30c1\u30a7\u30c3\u30af\u3001\u5927\u5207\uff01 \u624b\u4f5c\u696d\u3067\u51e6\u7406\u3067\u304d\u306a\u3044\u3053\u3068\u306f \u8ae6\u3081\u307e\u3057\u3087\u3046 \u3002 \u3082\u3046\u5909\u306a\u3068\u3053\u308d\u3067\u8ae6\u3081\u3061\u3083\u3063\u3066\u3044\u305f\u304b\u3089\u3001\u30c7\u30b8\u30bf\u30eb\u5316\u306e\u9032\u3093\u3060\u56fd\u306b\u5dee\u3092\u5e83\u3052\u3089\u308c\u305f\u8a33\u3067\u3059\u306d\u3002 \u3053\u3053\u3067\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u3092\u5b66\u3076\u3068\u3069\u3046\u304b\u308f\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f \u8a08\u7b97\u306f\u3001\u3082\u3046\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u51e6\u7406\u3057\u307e\u3057\u3087\u3046 \u9593\u9055\u3048\u305f\u304f\u306a\u3051\u308c\u3070\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u51e6\u7406\u3057\u307e\u3057\u3087\u3046 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u51e6\u7406\u3057\u3066\u3001 \u65b0\u3057\u3044\u53ef\u80fd\u6027\u306b\u6311\u6226\u3057\u307e\u3057\u3087\u3046 \u6700\u5f8c\u304c\u3001\u4e00\u756a\u5927\u5207\u3067\u3059\u3002 \u8ae6\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u65b0\u3057\u3044\u53ef\u80fd\u6027\u306b\u6311\u6226\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u4f7f\u3044\u3053\u3068\u306a\u3059\u3053\u3068\u304c\u524d\u63d0\u306e\u5b66\u554f\u3067\u3059\u3002 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u4f7f\u3044\u3053\u306a\u305b\u3066\u3053\u305d\u3001\u7d71\u8a08\u306e\u77e5\u8b58\u3082\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u77e5\u8b58\u3082\u6d3b\u304d\u3066\u304d\u307e\u3059\u3002 \u3060\u304b\u3089\u3001 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u81ea\u7531\u81ea\u5728\u306b\u4f7f\u3044\u3053\u306a\u3059\u3053\u3068 \u304c\u5927\u5207\u3067\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u3064\u3044\u3066 # \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u81ea\u7531\u81ea\u5728\u306b\u4f7f\u3044\u3053\u306a\u3059\u30b9\u30ad\u30eb\u3068\u3068\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3042\u308a\u307e\u3059\u3002 \u672c\u8b1b\u7fa9\u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u3057\u3066Python\u8a00\u8a9e\u3092\u4f7f\u3044\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u306b\u53d6\u308a\u7d44\u3080\u305f\u3081\u306b\u306f\u3001 \u3069\u306e\u7a0b\u5ea6\u3001Python \u3092\u30de\u30b9\u30bf\u30fc\u3057\u3066\u304a\u304f\u3079\u304d\u304b\u3001\u5c11\u3057\u5fc3\u914d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u307e\u305a\u3001\u5148\u307b\u3069\u306e\u5be9\u67fb\u59d4\u54e1\u306b\u4f8b\u306b\u623b\u3063\u3066\u5e73\u5747\u5024\u3092\u6c42\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \uff15\u4eba\u306e\u5be9\u67fb\u54e1\u304c\u3001\uff18\u70b9\u3001\uff18\u70b9\u3001\uff19\u70b9\u3001\uff17\u70b9\u3001\uff15\u70b9\u3068\u63a1\u70b9\u3057\u305f\u3068\u304d\u3001 \\frac{8+8+9+7+5}{5} = 7.4 Python\u3067\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b mean = (8 + 8 + 9 + 7 + 5) / 5 print(mean) 7.4 Python\u3092\u306f\u3058\u3081\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f\u3001\u6570\u5f0f\u3084\u7c21\u5358\u306a\u82f1\u8a9e\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u3088\u3046\u306b \u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5c11\u3057\u30b3\u30c4\u3092\u3064\u304b\u3081\u3070\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b\u306e\u306b\u9ad8\u3044\u58c1\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u73fe\u5728\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u3001\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u6574\u5099\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u306e\u5206\u91ce\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6b63\u3057\u304f\u4f7f\u3046\u3060\u3051\u3067\u3001 \u6570\u5f0f\u3092\u7406\u89e3\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3057\u306a\u304f\u3066\u3082\u3001\u76ee\u7684\u306e\u51e6\u7406\u304c\u3067\u304d\u307e\u3059\u3002 \u5e73\u5747\u5024\u3092\u6c42\u3081\u308b import numpy as np a = np.array([8, 8, 9, 7, 5]) print(a.mean()) 7.4 \u82f1\u8a9e\u306f\u5927\u5207 Python \u306f\u6d77\u5916\u3067\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u82f1\u8a9e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u7d50\u69cb\u3001\u82f1\u8a9e\u306e\u8a9e\u5f59\u529b\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u7406\u89e3\u3059\u308b\u3068\u304d\u306e\u30d2\u30f3\u30c8\u306b\u306a\u308a\u307e\u3059\u3002 \u3061\u306a\u307f\u306b\u3001\u7b97\u8853\u5e73\u5747\u306favarage\u3067\u306f\u306a\u304f\u3001mean\u306b\u306a\u308a\u307e\u3059\u3002 \u3082\u3046\u5c11\u3057\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5a01\u529b\u3092\u898b\u307e\u3057\u3087\u3046\u3002 \u6a19\u6e96\u504f\u5dee \\sigma \u3092\u6c42\u3081\u308b\u5834\u5408\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6a19\u6e96\u504f\u5dee \u6570\u5b66\u8a18\u53f7\u306e\u8aac\u660e \\mu = \\frac{\\Sigma^{N}_{i=1} a_i}{N} \\sigma = \\sqrt{\\frac{\\Sigma^N_{i=1}(a_i - \\mu)^2}{N}} \\mu (\u30df\u30e5\u30fc)\u306f\u3001\u30ae\u30ea\u30b7\u30a2\u6587\u5b57\u306e\u3072\u3068\u3064\u3067\u3001\u82f1\u5b57\u306b m \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\u5e73\u5747\u306f\u3001mean \u306a\u306e\u3067\u305d\u306e\u982d\u6587\u5b57\u304b\u3089\u304d\u3066\u3044\u307e\u3059\u3002 \\Sigma (\u30b7\u30b0\u30de)\u306f\u3001\u30ae\u30ea\u30b7\u30a2\u6587\u5b57\u306e\u3072\u3068\u3064\u3067\u3001\u82f1\u5b57\u306e S \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\u7dcf\u548c\u306f\u3001summantion\u306a\u306e\u3067\u3001\u305d\u306e\u982d\u6587\u5b57\u304b\u3089 \\Sigma \u3092\u4f7f\u3044\u307e\u3059\u3002 \u3055\u3066\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3068\u3001\u6a19\u6e96\u504f\u5dee\u306f\u6b21\u306e\u3088\u3046\u306b\u7c21\u5358\u306b\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u5e73\u5747\u5024\u3092\u6c42\u3081\u308b import numpy as np a = np.array([8, 8, 9, 7, 5]) print(a.std()) 1.3564659966250536 \u6570\u5f0f\u306f\u3001\u82e6\u624b\u3060\u3068\u3044\u3046\u4eba\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u307e\u305a\u3001\u300c\u6a19\u6e96\u504f\u5dee\u300d\u306e\u610f\u5473\u3092\u7406\u89e3\u3057\u3088\u3046\u3068\u3001\u6570\u5f0f\u3092\u8aad\u3093\u3067\u306f\u3044\u3051\u307e\u305b\u3093\u3002 \u6d77\u5916\u306e\u6570\u5b66\u8005\u304c\u3001 \\sigma \u306e\u5f0f\u3067\u8a08\u7b97\u3067\u304d\u308b\u5024\u3092 standard deviation \u3068\u547c\u3093\u3067\u3001 \u65e5\u672c\u4eba\u306e\u3069\u306a\u305f\u304b\u304c\u6a19\u6e96\u504f\u5dee\u3068\u8a33\u3057\u305f\u3060\u3051\u3067\u3059\u3002 \u8a08\u7b97\u306f\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304c\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u8a08\u7b97\u65b9\u6cd5\u3092\u793a\u3059\u5b9a\u7fa9\u3068\u3057\u3066\u7528\u3044\u307e\u3059\u3002 Python\u3092\u4f7f\u3046\u304b\u304e\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u6e08\u307f\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001 Python \u306a\u3089\u3001\u6570\u5217a \u306e\u6a19\u6e96\u504f\u5dee\u306f\u3001 a.std() \u3068\u66f8\u3051\u3070\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002 std()\u306e\u7531\u6765 \u308f\u304b\u308c\u3070\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u5f97\u610f\u306b\u306a\u308c\u308b\u3067\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u5206\u6790\u3092\u3057\u306a\u304c\u3089\u7d4c\u9a13\u3092\u7a4d\u3080\u3068\u3001\u5e73\u5747\u5024\u3092\u4e2d\u5fc3\u306b\u00b1\u6a19\u6e96\u504f\u5dee\u306e\u4e2d\u306b\u3001 \u307b\u3068\u3093\u3069\u306e\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u304d\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u7406\u89e3\u306f\u3001\u6570\u5f0f\u3092\u898b\u305f\u3060\u3051\u3067\u7406\u89e3\u3067\u304d\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u529b\u3092\u3057\u3063\u304b\u308a\u9ad8\u3081\u3088\u3046 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u3092\u3057\u3063\u304b\u308a\u5b66\u3076\u3068\u3001 \u3088\u308a\u67d4\u8edf\u306b\u5fdc\u7528\u7684\u306a\u8ab2\u984c\u306b\u3082\u53d6\u308a\u7d44\u3081\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u305f\u3060\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u529b\u306f\u3059\u3050\u306b\u8eab\u306b\u4ed8\u304f\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001 \u672c\u8b1b\u7fa9\u306e\u7df4\u7fd2\u554f\u984c\u3092\u9811\u5f35\u3063\u3066\u89e3\u304d\u306a\u304c\u3089\u3001\u5c11\u3057\u3065\u3064\u9ad8\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 Python \u30b5\u30d0\u30a4\u30d0\u30eb\u8853 # \uff08\u5f8c\u671f\u307e\u3067\u306b\u7528\u610f\u3059\u308b\u4e88\u5b9a\uff09 \u5b66\u7fd2\u3068\u6a5f\u68b0\u5b66\u7fd2 # \u30cb\u30e5\u30fc\u30c8\u30f3\u306f\u3001\u30ea\u30f3\u30b4\u304c\u843d\u3061\u308b\u306e\u3092\u898b\u3066\u3001\u4e07\u6709\u5f15\u529b\u306e\u6cd5\u5247\u3092\u767a\u898b\u3057\u307e\u3057\u305f\u3002 \u3082\u3046\u5c11\u3057\u6b63\u78ba\u306b\u66f8\u304f\u3068\u3001\u3044\u308d\u3093\u306a\u73fe\u8c61\u306e\u89b3\u5bdf\u7d50\u679c\u3068\u5fae\u7a4d\u5206\u3092\u4f7f\u3063\u3066\u3001\u300c F \u223c Mm/r^2 \u3068\u3057\u304b\u601d\u3048\u306a\u3044\u300d\u3068\u3044\u3046\u7406\u7531\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002 \u767a\u898b\u3055\u308c\u305f\u4e07\u6709\u5f15\u529b\u306e\u6cd5\u5247\u306f\u3001\u6570\u7406\u30e2\u30c7\u30eb\u3068\u3057\u3066\u8a18\u8ff0\u3055\u308c\u3066\u3001\u3053\u308c\u304b\u3089\u767a\u751f\u3059\u308b\u4e8b\u8c61\uff08\u672a\u6765\uff09\u3092\u4e88\u60f3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6570\u7406\u30e2\u30c7\u30eb F \u223c Mm/r^2 \u30cb\u30e5\u30fc\u30c8\u30f3\u304c\u4e07\u6709\u5f15\u529b\u306e\u6cd5\u5247\u3092\u767a\u898b\u306b\u81f3\u3063\u305f\u30d7\u30ed\u30bb\u30b9\u306f\u8208\u5473\u6df1\u3044\u3082\u306e\u3067\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5316\u3057\u3066\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304c\u6cd5\u5247\u3092\u767a\u898b\u3057\u3001\u30e2\u30c7\u30eb\u5316\u3059\u308b\u624b\u6cd5\u304c\u6a5f\u68b0\u5b66\u7fd2\u3067\u3059\u3002 \u7a2e\u985e : \u6559\u5e2b\u306a\u3057\u5b66\u7fd2 (K-means\u6cd5, PCA\u306a\u3069) \u6559\u5e2b\u3042\u308a\u5b66\u7fd2 (\u7dda\u5f62\u56de\u5e30, \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3001\u6c7a\u5b9a\u6728\u3001\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3) \u5f37\u5316\u5b66\u7fd2 (Q-Learning) \u5b9f\u306f\u3001\u524d\u56de\u307e\u3067\u306b\u5b66\u3093\u3060K-means\u6cd5\u306f\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u3001\u7dda\u5f62\u56de\u5e30\u306f\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u3068\u5206\u985e\u3055\u308c\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u7a2e\u3067\u3057\u305f\u3002\u4eba\u5de5\u77e5\u80fd\u306e\u57fa\u790e\u3068\u306a\u308b\u6a5f\u68b0\u5b66\u7fd2\u3068\u3044\u3063\u3066\u3082\u3001\u8eab\u69cb\u3048\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u307b\u3069\u96e3\u3057\u3044\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u6559\u5e2b\u3042\u308a\u5b66\u7fd2 # \u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306f\u3001\u554f\u984c\u3068\u7b54\u3048\u3092\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306b\u4e0e\u3048\u308b\u3053\u3068\u3067\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3055\u305b\u308b\u65b9\u6cd5\u3067\u3059\u3002 \u4e8b\u524d\u306b\u3001\u300c\u7279\u5fb4\u3092\u8868\u3059\u30c7\u30fc\u30bf\u300d\u3068\u7b54\u3048\u3067\u3042\u308b\u300c\u76ee\u7684\u30c7\u30fc\u30bf\u300d\u304c\u5fc5\u8981\u3067\u3059\u3002 \u8aac\u660e\u306e\u305f\u3081\u3001\u3053\u308c\u307e\u3067\u306b\u4f5c\u6210\u3057\u3066\u304d\u305f\u8eab\u9577\u4f53\u91cd\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u8aac\u660e\u5909\u6570 : \u7279\u5fb4\u3092\u8868\u3059\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u300c\u8eab\u9577\u300d\u3068\u300c\u4f53\u91cd\u300d\u304c\u4e0e\u3048\u3089\u308c\u308b \u76ee\u7684\u5909\u6570 : \u76ee\u7684\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u300c\u8077\u696d\u300d\u304c\u4e0e\u3048\u3089\u308c\u308b \u5b66\u7fd2 \u6a5f\u68b0\u5b66\u7fd2\u3068\u306f\u3001\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306e\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4e0e\u3048\u3001\u305d\u3053\u304b\u3089\u76ee\u7684\u5909\u6570\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u4e88\u6e2c \u0016 \u4e88\u6e2c\u30e2\u30c7\u30eb\u306b\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u3068\u3001\u76ee\u7684\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 \u76ee\u7684\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u3001\u56de\u5e30\u554f\u984c\u3068\u5206\u985e\u554f\u984c\u306b\u5206\u3051\u3089\u308c\u308b\u3002 Note \u56de\u5e30\u3068\u5206\u985e \u56de\u5e30\u554f\u984c : \u6570\u5024\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068 \u30af\u30e9\u30b9\u5206\u985e\u554f\u984c : \u8077\u696d\u306a\u3069\u306e\u30ab\u30c6\u30b4\u30ea\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068 \u30af\u30e9\u30b9\u5206\u985e # \u30af\u30e9\u30b9\u5206\u985e\u306f\u3001\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30ab\u30c6\u30b4\u30ea\u306e\u6570\u304c\uff12\u3064\u306a\u3089\uff12\u30af\u30e9\u30b9\u5206\u985e\u3001\u305d\u308c\u4ee5\u4e0a\u306a\u3089\u591a\u30af\u30e9\u30b9\u5206\u985e\u3068\u547c\u3070\u308c\u307e\u3059\u3002 \u30af\u30e9\u30b9\u5206\u985e\u304c\u91cd\u8981\u306a\u306e\u306f\u3001\u753b\u50cf\u8a8d\u8b58\u306a\u3069\u8208\u5473\u6df1\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u308b\u70b9\u306b\u3042\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u753b\u50cf\u3092\u591a\u6b21\u5143\u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aac\u660e\u5909\u6570\u3001\u305d\u306e\u30e9\u30d9\u30eb\u3092\u76ee\u7684\u5909\u6570\u3068\u3057\u3066\u5b66\u7fd2\u3055\u305b\u308b\u3068\u3001 \u753b\u50cf\u8a8d\u8b58\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\u5f8c\u534a\u3067\u306f\u3001\u7c21\u5358\u306a\u753b\u50cf\u8a8d\u8b58\u3092\u5c11\u3057\u3060\u3051\u5b66\u3073\u307e\u3059\u3002","title":"\u306f\u3058\u3081\u306b"},{"location":"#ai","text":"\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u30fbAI\u306f\u3001\u3053\u308c\u304b\u3089\u306e\u5927\u5b66\u751f\u3084\u9ad8\u6821\u751f\u304c\u5b66\u90e8\u3084\u5c02\u9580\u3092\u554f\u308f\u305a\u3001 \u5b66\u3076\u3079\u304d\u5185\u5bb9\u3068\u3057\u3066\u6ce8\u76ee\u3092\u96c6\u3081\u3066\u307f\u308b\u5185\u5bb9\u3067\u3059\u3002 \u672c\u8b1b\u7fa9\u30ce\u30fc\u30c8\u306f\u3001\u65e5\u672c\u5973\u5b50\u5927\u5b66\u306e\u8b1b\u7fa9\u30fb\u6f14\u7fd2\u5411\u3051\u306b\u307e\u3068\u3081\u305f\u30ce\u30fc\u30c8\u3067\u3059\u3002 \u6570\u7269\u60c5\u5831\u79d1\u5b66\u79d1\uff08\uff13\u5e74\u751f\u524d\u671f\uff09 AI\u5165\u9580\uff08\u5168\u5b66\u90e8\u5168\u5b66\u79d1\uff09 \u6700\u8fd1\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u4eba\u5de5\u77e5\u80fd\u3092\u5b66\u3093\u3067\u307f\u305f\u3044\u3068\u3044\u3046\u5b66\u751f\u3001 \u3082\u3057\u304f\u306f\u3001\uff08\u3053\u308c\u3082\u4e0d\u601d\u8b70\u306a\u8a71\u3067\u3059\u304c\uff09\u5b66\u3070\u305b\u3066\u6b32\u3057\u3044\u3068\u3044\u3046\u5148\u751f\u304c\u5897\u3048\u3066\u3001 \u57fa\u790e\u304b\u3089\u7a4d\u307f\u4e0a\u3052\u3066\u307f\u305f\u3044\u306a\u524d\u63d0\u304c\u6210\u308a\u7acb\u305f\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u672c\u8b1b\u7fa9\u30ce\u30fc\u30c8\u306f\u3001\u6570\u5b66\u304c\u9ad8\u6821\u30ec\u30d9\u30eb\u306e\u7406\u89e3\u3067\u3042\u3063\u3066\u3082\u3001\u4eee\u306bPython\u304c\u307b\u307c\u672a\u7fd2\u8005\u3067\u3042\u3063\u3066\u3082\u3001 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u3092\u4f53\u9a13\u7684\u306b\u5165\u9580\u3067\u304d\u308b\u3088\u3046\u306b\u914d\u616e\u3057\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002 \u3082\u3046\u5c11\u3057\u3057\u3063\u304b\u308a\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u305f\u3044\u3068\u601d\u3063\u305f\u3089\u3001 \u305c\u3072\u57fa\u790e\u306b\u7acb\u3061\u8fd4\u3063\u3066\u632f\u308a\u8fd4\u3063\u3066\u3082\u3089\u3048\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u4e00\u5fdc\u3001\u81ea\u7fd2\u3067\u4f7f\u3046\u8aad\u8005\u306e\u305f\u3081\u306b\u3001\u96e3\u6613\u5ea6\u3092\u793a\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u2b50\ufe0f: \u5c11\u3005\u3001\u30a2\u30c9\u30d0\u30f3\u30b9\u306a\u5185\u5bb9 \u2b50\ufe0f\u2b50\ufe0f: Python \u672a\u7fd2\u8005\u306f\u98db\u3070\u3059\u3079\u304d\u5185\u5bb9 \u8b1b\u7fa9\u30ce\u30fc\u30c8\u306f\u3001\u81ea\u5206\u306e\u5099\u5fd8\u9332\u4ee3\u308f\u308a\u306b\u8272\u3005\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002 \u5b9f\u969b\u306e\u8b1b\u7fa9\u3084\u6f14\u7fd2\u3067\u306f\u3001\u5c65\u4fee\u8005\u306e\u7406\u89e3\u3068\u9032\u6357\u306b\u3042\u308f\u305b\u3066\u3001 \u88dc\u8db3\u8aac\u660e\u3057\u305f\u308a\u3001\u30b9\u30ad\u30c3\u30d7\u3057\u305f\u308a\u3057\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u307e\u3059\u3002","title":"\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u30fbAI\u5165\u9580"},{"location":"#_1","text":"\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u3092\u5b66\u3076\u3068\u3044\u3046\u3053\u3068\u306f\u3069\u3046\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u304b\uff1f \u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u5be9\u67fb\u59d4\u54e1 \u65e5\u306e\u51fa\u753a\u3067\u306f\u3001\u611b\u72ac\u30b3\u30f3\u30c6\u30b9\u30c8\u304c\u958b\u50ac\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8907\u6570\u306e\u5be9\u67fb\u54e1\u304c\u305d\u308c\u305e\u308c10\u70b9\u6e80\u70b9\u3067\u63a1\u70b9\u3057\u3066\u3001\u305d\u306e\u5e73\u5747\u70b9\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3001 \u512a\u52dd\u306e\u30ef\u30f3\u3061\u3083\u3093\u3092\u6c7a\u3081\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u7686\u3055\u3093\u306f\u3001\u5c0f\u5b66\u6821\u304b\u3089\u7b97\u6570\u3092\u5b66\u3093\u3067\u304d\u307e\u3057\u305f\u3002 \u3060\u304b\u3089\u3001\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u96c6\u8a08\u4fc2\u3092\u4efb\u3055\u308c\u3066\u3082\u554f\u984c\u306a\u304f\u3001\u696d\u52d9\u3092\u9042\u884c\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002 \u4f8b\u3048\u3070\u3001\uff15\u4eba\u306e\u5be9\u67fb\u54e1\u304c\u3001\uff18\u70b9\u3001\uff18\u70b9\u3001\uff19\u70b9\u3001\uff17\u70b9\u3001\uff15\u70b9\u3068\u63a1\u70b9\u3057\u305f\u3068\u304d\u3001 \u5e73\u5747\u5024\u306f\u6b21\u306e\u3088\u3046\u306b\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \\frac{8+8+9+7+5}{5} = 7.4 \u305f\u3060\u3057\u3001\u96c6\u8a08\u3059\u308b\u30c7\u30fc\u30bf\u304c\u5897\u3048\u308b\u3068\u3001\u4f5c\u696d\u91cf\u3082\u5897\u3048\u3066\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u4eba\u9593\u306b\u3088\u308b\u624b\u4f5c\u696d\u306f\u3001\u4eee\u306b\u96fb\u5353\u3092\u4f7f\u3063\u305f\u3068\u3057\u3066\u3082\u3001\u9593\u9055\u3044\u304c\u591a\u304f\u306a\u308a\u307e\u3059\u3002 \u65e5\u672c\u306f\u3001\u30c7\u30b8\u30bf\u30eb\u5316\u304c\u9045\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u8a71\u3092\u3088\u304f\u805e\u304f\u304b\u3068\u601d\u3044\u307e\u3059\u3002 \u53e4\u304d\u826f\u304d\u65e5\u672c\u793e\u4f1a\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u305f\u3002 \u8a08\u7b97\u9593\u9055\u3044\u3057\u306a\u3044\u3088\u3046\u306b\u9811\u5f35\u308a\u307e\u3057\u3087\u3046\u3002 \u30c0\u30d6\u30eb\u30c1\u30a7\u30c3\u30af\u3001\u5927\u5207\uff01 \u624b\u4f5c\u696d\u3067\u51e6\u7406\u3067\u304d\u306a\u3044\u3053\u3068\u306f \u8ae6\u3081\u307e\u3057\u3087\u3046 \u3002 \u3082\u3046\u5909\u306a\u3068\u3053\u308d\u3067\u8ae6\u3081\u3061\u3083\u3063\u3066\u3044\u305f\u304b\u3089\u3001\u30c7\u30b8\u30bf\u30eb\u5316\u306e\u9032\u3093\u3060\u56fd\u306b\u5dee\u3092\u5e83\u3052\u3089\u308c\u305f\u8a33\u3067\u3059\u306d\u3002 \u3053\u3053\u3067\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u3092\u5b66\u3076\u3068\u3069\u3046\u304b\u308f\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f \u8a08\u7b97\u306f\u3001\u3082\u3046\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u51e6\u7406\u3057\u307e\u3057\u3087\u3046 \u9593\u9055\u3048\u305f\u304f\u306a\u3051\u308c\u3070\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u51e6\u7406\u3057\u307e\u3057\u3087\u3046 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u51e6\u7406\u3057\u3066\u3001 \u65b0\u3057\u3044\u53ef\u80fd\u6027\u306b\u6311\u6226\u3057\u307e\u3057\u3087\u3046 \u6700\u5f8c\u304c\u3001\u4e00\u756a\u5927\u5207\u3067\u3059\u3002 \u8ae6\u3081\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u65b0\u3057\u3044\u53ef\u80fd\u6027\u306b\u6311\u6226\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u4f7f\u3044\u3053\u3068\u306a\u3059\u3053\u3068\u304c\u524d\u63d0\u306e\u5b66\u554f\u3067\u3059\u3002 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u4f7f\u3044\u3053\u306a\u305b\u3066\u3053\u305d\u3001\u7d71\u8a08\u306e\u77e5\u8b58\u3082\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u77e5\u8b58\u3082\u6d3b\u304d\u3066\u304d\u307e\u3059\u3002 \u3060\u304b\u3089\u3001 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u81ea\u7531\u81ea\u5728\u306b\u4f7f\u3044\u3053\u306a\u3059\u3053\u3068 \u304c\u5927\u5207\u3067\u3059\u3002","title":"\u305d\u3082\u305d\u3082\u5165\u9580\u3059\u308b\u524d\u306b"},{"location":"#_2","text":"\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3092\u81ea\u7531\u81ea\u5728\u306b\u4f7f\u3044\u3053\u306a\u3059\u30b9\u30ad\u30eb\u3068\u3068\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3042\u308a\u307e\u3059\u3002 \u672c\u8b1b\u7fa9\u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u3057\u3066Python\u8a00\u8a9e\u3092\u4f7f\u3044\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u306b\u53d6\u308a\u7d44\u3080\u305f\u3081\u306b\u306f\u3001 \u3069\u306e\u7a0b\u5ea6\u3001Python \u3092\u30de\u30b9\u30bf\u30fc\u3057\u3066\u304a\u304f\u3079\u304d\u304b\u3001\u5c11\u3057\u5fc3\u914d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u307e\u305a\u3001\u5148\u307b\u3069\u306e\u5be9\u67fb\u59d4\u54e1\u306b\u4f8b\u306b\u623b\u3063\u3066\u5e73\u5747\u5024\u3092\u6c42\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \uff15\u4eba\u306e\u5be9\u67fb\u54e1\u304c\u3001\uff18\u70b9\u3001\uff18\u70b9\u3001\uff19\u70b9\u3001\uff17\u70b9\u3001\uff15\u70b9\u3068\u63a1\u70b9\u3057\u305f\u3068\u304d\u3001 \\frac{8+8+9+7+5}{5} = 7.4 Python\u3067\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b mean = (8 + 8 + 9 + 7 + 5) / 5 print(mean) 7.4 Python\u3092\u306f\u3058\u3081\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f\u3001\u6570\u5f0f\u3084\u7c21\u5358\u306a\u82f1\u8a9e\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u3088\u3046\u306b \u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5c11\u3057\u30b3\u30c4\u3092\u3064\u304b\u3081\u3070\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b\u306e\u306b\u9ad8\u3044\u58c1\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u73fe\u5728\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u3001\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u6574\u5099\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084AI\u306e\u5206\u91ce\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6b63\u3057\u304f\u4f7f\u3046\u3060\u3051\u3067\u3001 \u6570\u5f0f\u3092\u7406\u89e3\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3057\u306a\u304f\u3066\u3082\u3001\u76ee\u7684\u306e\u51e6\u7406\u304c\u3067\u304d\u307e\u3059\u3002 \u5e73\u5747\u5024\u3092\u6c42\u3081\u308b import numpy as np a = np.array([8, 8, 9, 7, 5]) print(a.mean()) 7.4 \u82f1\u8a9e\u306f\u5927\u5207 Python \u306f\u6d77\u5916\u3067\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u82f1\u8a9e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u7d50\u69cb\u3001\u82f1\u8a9e\u306e\u8a9e\u5f59\u529b\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u7406\u89e3\u3059\u308b\u3068\u304d\u306e\u30d2\u30f3\u30c8\u306b\u306a\u308a\u307e\u3059\u3002 \u3061\u306a\u307f\u306b\u3001\u7b97\u8853\u5e73\u5747\u306favarage\u3067\u306f\u306a\u304f\u3001mean\u306b\u306a\u308a\u307e\u3059\u3002 \u3082\u3046\u5c11\u3057\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5a01\u529b\u3092\u898b\u307e\u3057\u3087\u3046\u3002 \u6a19\u6e96\u504f\u5dee \\sigma \u3092\u6c42\u3081\u308b\u5834\u5408\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6a19\u6e96\u504f\u5dee \u6570\u5b66\u8a18\u53f7\u306e\u8aac\u660e \\mu = \\frac{\\Sigma^{N}_{i=1} a_i}{N} \\sigma = \\sqrt{\\frac{\\Sigma^N_{i=1}(a_i - \\mu)^2}{N}} \\mu (\u30df\u30e5\u30fc)\u306f\u3001\u30ae\u30ea\u30b7\u30a2\u6587\u5b57\u306e\u3072\u3068\u3064\u3067\u3001\u82f1\u5b57\u306b m \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\u5e73\u5747\u306f\u3001mean \u306a\u306e\u3067\u305d\u306e\u982d\u6587\u5b57\u304b\u3089\u304d\u3066\u3044\u307e\u3059\u3002 \\Sigma (\u30b7\u30b0\u30de)\u306f\u3001\u30ae\u30ea\u30b7\u30a2\u6587\u5b57\u306e\u3072\u3068\u3064\u3067\u3001\u82f1\u5b57\u306e S \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\u7dcf\u548c\u306f\u3001summantion\u306a\u306e\u3067\u3001\u305d\u306e\u982d\u6587\u5b57\u304b\u3089 \\Sigma \u3092\u4f7f\u3044\u307e\u3059\u3002 \u3055\u3066\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3068\u3001\u6a19\u6e96\u504f\u5dee\u306f\u6b21\u306e\u3088\u3046\u306b\u7c21\u5358\u306b\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u5e73\u5747\u5024\u3092\u6c42\u3081\u308b import numpy as np a = np.array([8, 8, 9, 7, 5]) print(a.std()) 1.3564659966250536 \u6570\u5f0f\u306f\u3001\u82e6\u624b\u3060\u3068\u3044\u3046\u4eba\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u307e\u305a\u3001\u300c\u6a19\u6e96\u504f\u5dee\u300d\u306e\u610f\u5473\u3092\u7406\u89e3\u3057\u3088\u3046\u3068\u3001\u6570\u5f0f\u3092\u8aad\u3093\u3067\u306f\u3044\u3051\u307e\u305b\u3093\u3002 \u6d77\u5916\u306e\u6570\u5b66\u8005\u304c\u3001 \\sigma \u306e\u5f0f\u3067\u8a08\u7b97\u3067\u304d\u308b\u5024\u3092 standard deviation \u3068\u547c\u3093\u3067\u3001 \u65e5\u672c\u4eba\u306e\u3069\u306a\u305f\u304b\u304c\u6a19\u6e96\u504f\u5dee\u3068\u8a33\u3057\u305f\u3060\u3051\u3067\u3059\u3002 \u8a08\u7b97\u306f\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304c\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u8a08\u7b97\u65b9\u6cd5\u3092\u793a\u3059\u5b9a\u7fa9\u3068\u3057\u3066\u7528\u3044\u307e\u3059\u3002 Python\u3092\u4f7f\u3046\u304b\u304e\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u6e08\u307f\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001 Python \u306a\u3089\u3001\u6570\u5217a \u306e\u6a19\u6e96\u504f\u5dee\u306f\u3001 a.std() \u3068\u66f8\u3051\u3070\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002 std()\u306e\u7531\u6765 \u308f\u304b\u308c\u3070\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u5f97\u610f\u306b\u306a\u308c\u308b\u3067\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u5206\u6790\u3092\u3057\u306a\u304c\u3089\u7d4c\u9a13\u3092\u7a4d\u3080\u3068\u3001\u5e73\u5747\u5024\u3092\u4e2d\u5fc3\u306b\u00b1\u6a19\u6e96\u504f\u5dee\u306e\u4e2d\u306b\u3001 \u307b\u3068\u3093\u3069\u306e\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u3063\u3066\u304d\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u7406\u89e3\u306f\u3001\u6570\u5f0f\u3092\u898b\u305f\u3060\u3051\u3067\u7406\u89e3\u3067\u304d\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u529b\u3092\u3057\u3063\u304b\u308a\u9ad8\u3081\u3088\u3046 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u3092\u3057\u3063\u304b\u308a\u5b66\u3076\u3068\u3001 \u3088\u308a\u67d4\u8edf\u306b\u5fdc\u7528\u7684\u306a\u8ab2\u984c\u306b\u3082\u53d6\u308a\u7d44\u3081\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u305f\u3060\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u529b\u306f\u3059\u3050\u306b\u8eab\u306b\u4ed8\u304f\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001 \u672c\u8b1b\u7fa9\u306e\u7df4\u7fd2\u554f\u984c\u3092\u9811\u5f35\u3063\u3066\u89e3\u304d\u306a\u304c\u3089\u3001\u5c11\u3057\u3065\u3064\u9ad8\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u3064\u3044\u3066"},{"location":"#python","text":"\uff08\u5f8c\u671f\u307e\u3067\u306b\u7528\u610f\u3059\u308b\u4e88\u5b9a\uff09","title":"Python \u30b5\u30d0\u30a4\u30d0\u30eb\u8853"},{"location":"#_3","text":"\u30cb\u30e5\u30fc\u30c8\u30f3\u306f\u3001\u30ea\u30f3\u30b4\u304c\u843d\u3061\u308b\u306e\u3092\u898b\u3066\u3001\u4e07\u6709\u5f15\u529b\u306e\u6cd5\u5247\u3092\u767a\u898b\u3057\u307e\u3057\u305f\u3002 \u3082\u3046\u5c11\u3057\u6b63\u78ba\u306b\u66f8\u304f\u3068\u3001\u3044\u308d\u3093\u306a\u73fe\u8c61\u306e\u89b3\u5bdf\u7d50\u679c\u3068\u5fae\u7a4d\u5206\u3092\u4f7f\u3063\u3066\u3001\u300c F \u223c Mm/r^2 \u3068\u3057\u304b\u601d\u3048\u306a\u3044\u300d\u3068\u3044\u3046\u7406\u7531\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002 \u767a\u898b\u3055\u308c\u305f\u4e07\u6709\u5f15\u529b\u306e\u6cd5\u5247\u306f\u3001\u6570\u7406\u30e2\u30c7\u30eb\u3068\u3057\u3066\u8a18\u8ff0\u3055\u308c\u3066\u3001\u3053\u308c\u304b\u3089\u767a\u751f\u3059\u308b\u4e8b\u8c61\uff08\u672a\u6765\uff09\u3092\u4e88\u60f3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u6570\u7406\u30e2\u30c7\u30eb F \u223c Mm/r^2 \u30cb\u30e5\u30fc\u30c8\u30f3\u304c\u4e07\u6709\u5f15\u529b\u306e\u6cd5\u5247\u3092\u767a\u898b\u306b\u81f3\u3063\u305f\u30d7\u30ed\u30bb\u30b9\u306f\u8208\u5473\u6df1\u3044\u3082\u306e\u3067\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u5316\u3057\u3066\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304c\u6cd5\u5247\u3092\u767a\u898b\u3057\u3001\u30e2\u30c7\u30eb\u5316\u3059\u308b\u624b\u6cd5\u304c\u6a5f\u68b0\u5b66\u7fd2\u3067\u3059\u3002 \u7a2e\u985e : \u6559\u5e2b\u306a\u3057\u5b66\u7fd2 (K-means\u6cd5, PCA\u306a\u3069) \u6559\u5e2b\u3042\u308a\u5b66\u7fd2 (\u7dda\u5f62\u56de\u5e30, \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3001\u6c7a\u5b9a\u6728\u3001\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3) \u5f37\u5316\u5b66\u7fd2 (Q-Learning) \u5b9f\u306f\u3001\u524d\u56de\u307e\u3067\u306b\u5b66\u3093\u3060K-means\u6cd5\u306f\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u3001\u7dda\u5f62\u56de\u5e30\u306f\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u3068\u5206\u985e\u3055\u308c\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u7a2e\u3067\u3057\u305f\u3002\u4eba\u5de5\u77e5\u80fd\u306e\u57fa\u790e\u3068\u306a\u308b\u6a5f\u68b0\u5b66\u7fd2\u3068\u3044\u3063\u3066\u3082\u3001\u8eab\u69cb\u3048\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u307b\u3069\u96e3\u3057\u3044\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u5b66\u7fd2\u3068\u6a5f\u68b0\u5b66\u7fd2"},{"location":"#_4","text":"\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306f\u3001\u554f\u984c\u3068\u7b54\u3048\u3092\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306b\u4e0e\u3048\u308b\u3053\u3068\u3067\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3055\u305b\u308b\u65b9\u6cd5\u3067\u3059\u3002 \u4e8b\u524d\u306b\u3001\u300c\u7279\u5fb4\u3092\u8868\u3059\u30c7\u30fc\u30bf\u300d\u3068\u7b54\u3048\u3067\u3042\u308b\u300c\u76ee\u7684\u30c7\u30fc\u30bf\u300d\u304c\u5fc5\u8981\u3067\u3059\u3002 \u8aac\u660e\u306e\u305f\u3081\u3001\u3053\u308c\u307e\u3067\u306b\u4f5c\u6210\u3057\u3066\u304d\u305f\u8eab\u9577\u4f53\u91cd\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u8aac\u660e\u5909\u6570 : \u7279\u5fb4\u3092\u8868\u3059\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u300c\u8eab\u9577\u300d\u3068\u300c\u4f53\u91cd\u300d\u304c\u4e0e\u3048\u3089\u308c\u308b \u76ee\u7684\u5909\u6570 : \u76ee\u7684\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u300c\u8077\u696d\u300d\u304c\u4e0e\u3048\u3089\u308c\u308b \u5b66\u7fd2 \u6a5f\u68b0\u5b66\u7fd2\u3068\u306f\u3001\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306e\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4e0e\u3048\u3001\u305d\u3053\u304b\u3089\u76ee\u7684\u5909\u6570\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u4e88\u6e2c \u0016 \u4e88\u6e2c\u30e2\u30c7\u30eb\u306b\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u3068\u3001\u76ee\u7684\u30c7\u30fc\u30bf\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 \u76ee\u7684\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u3001\u56de\u5e30\u554f\u984c\u3068\u5206\u985e\u554f\u984c\u306b\u5206\u3051\u3089\u308c\u308b\u3002 Note \u56de\u5e30\u3068\u5206\u985e \u56de\u5e30\u554f\u984c : \u6570\u5024\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068 \u30af\u30e9\u30b9\u5206\u985e\u554f\u984c : \u8077\u696d\u306a\u3069\u306e\u30ab\u30c6\u30b4\u30ea\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068","title":"\u6559\u5e2b\u3042\u308a\u5b66\u7fd2"},{"location":"#_5","text":"\u30af\u30e9\u30b9\u5206\u985e\u306f\u3001\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30ab\u30c6\u30b4\u30ea\u306e\u6570\u304c\uff12\u3064\u306a\u3089\uff12\u30af\u30e9\u30b9\u5206\u985e\u3001\u305d\u308c\u4ee5\u4e0a\u306a\u3089\u591a\u30af\u30e9\u30b9\u5206\u985e\u3068\u547c\u3070\u308c\u307e\u3059\u3002 \u30af\u30e9\u30b9\u5206\u985e\u304c\u91cd\u8981\u306a\u306e\u306f\u3001\u753b\u50cf\u8a8d\u8b58\u306a\u3069\u8208\u5473\u6df1\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u4f5c\u308c\u308b\u70b9\u306b\u3042\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u753b\u50cf\u3092\u591a\u6b21\u5143\u30c7\u30fc\u30bf\u3068\u3057\u3066\u8aac\u660e\u5909\u6570\u3001\u305d\u306e\u30e9\u30d9\u30eb\u3092\u76ee\u7684\u5909\u6570\u3068\u3057\u3066\u5b66\u7fd2\u3055\u305b\u308b\u3068\u3001 \u753b\u50cf\u8a8d\u8b58\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\u5f8c\u534a\u3067\u306f\u3001\u7c21\u5358\u306a\u753b\u50cf\u8a8d\u8b58\u3092\u5c11\u3057\u3060\u3051\u5b66\u3073\u307e\u3059\u3002","title":"\u30af\u30e9\u30b9\u5206\u985e"},{"location":"boston/","text":"\u30c7\u30fc\u30bf\u5206\u6790 # Python \u306b\u3088\u308b\u30c7\u30fc\u30bf\u5206\u6790\u306e\u57fa\u790e\u3092\u5b66\u3073\u306a\u304c\u3089\u3001 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3068AI\u306e\u57fa\u790e\u3092\u5b66\u3073\u307e\u3059\u3002 Pandas\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f \u7bb1\u3072\u3052\u56f3\u3068\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 # \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u7c73\u56fd\u56fd\u52e2\u8abf\u67fb\u5c40\u304c\u53ce\u96c6\u3057\u305f\u60c5\u5831\u304b\u3089\u62bd\u51fa\uff06\u52a0\u5de5\u3057\u3066\u4f5c\u6210\u3055\u308c\u305f\u300c1970\u5e74\u4ee3\u5f8c\u534a\u306b\u304a\u3051\u308b\uff08\u7c73\u30de\u30b5\u30c1\u30e5\u30fc\u30bb\u30c3\u30c4\u5dde\uff09\u30dc\u30b9\u30c8\u30f3\u306e\u4f4f\u5b85\u4fa1\u683c\u300d\u306e\u8868\u5f62\u5f0f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002\u5c11\u3057\u53e4\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3001\u73fe\u4ee3\u3067\u306f\u554f\u984c\u306e\u3042\u308b\u30c7\u30fc\u30bf\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u7d71\u8a08\u51e6\u7406\u306e\u7df4\u7fd2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u5e83\u304f\u4f7f\u308f\u308c\u3066\u304d\u307e\u3057\u305f\u3002 \u30c7\u30fc\u30bf\u306e\u5165\u624b # \u4eca\u56de\u3067\u6271\u3046\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306f\u3001CSV\u5f62\u5f0f\u3067\u4ee5\u4e0b\u306eURL\u306b\u304a\u3044\u3066\u3042\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306eURL https://KuramitsuLab.github.io/data/boston.csv Colab\u4e0a\u3067\u306f\u3001\u6b21\u306e\u901a\u308a\u3001 wget \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3048\u3070\u3001 URL\u3067\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u306e\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 ! wget https : // KuramitsuLab . github . io / data / boston . csv wget wget \u306f\u3001URL\u304b\u3089Web\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b UNIX\u30b3\u30de\u30f3\u30c9 \u3067\u3059\u3002 Colab\u4e0a\u3067\u306f\u3001 ! \u30de\u30fc\u30af\u3092\u5148\u982d\u306b\u3064\u3051\u308b\u3053\u3068\u3067\u3001UNIX\u30b3\u30de\u30f3\u30c9\u304c\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u306f\u3001\u6b63\u3057\u304f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u308b\u3068\u3001 'boston.csv' \u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u6b21\u306e head \u30b3\u30de\u30f3\u30c9\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u3092\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u78ba\u8a8d ! head boston . csv CSV\u30d5\u30a1\u30a4\u30eb\u3068\u306f CSV \u30d5\u30a1\u30a4\u30eb\u306f\u3001\u8868\u8a08\u7b97\u30bd\u30d5\u30c8(Excel)\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30c7\u30fc\u30bf\u51e6\u7406\u3057\u3084\u3059\u304f\u306a\u308b\u3088\u3046\u306b\u3001 \u30ab\u30f3\u30de\u533a\u5207\u308a\u5f62\u5f0f\u306e\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u51fa\u529b\u3057\u305f\u3082\u306e\u3067\u3059\u3002 \u5f53\u7136\u3001Excel \u7b49\u306e\u8868\u8a08\u7b97\u30bd\u30d5\u30c8\u3067\u3082\u958b\u3044\u3066\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\u3053\u306e\u3088\u3046\u306aCSV\u30d5\u30a1\u30a4\u30eb\u3092Python\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3046\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002 Pandas # Python\u3092\u4f7f\u3063\u3066\u8868\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3068\u304d\u306f\u3001 pandas \u3068\u547c\u3070\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\uff08\u30e9\u30a4\u30d6\u30e9\u30ea\uff09\u3092\u4f7f\u3044\u307e\u3059\u3002 pandas\u306e\u6e96\u5099\uff08\u3053\u308c\u306f\u6c7a\u307e\u308a\u6587\u53e5\uff09 import pandas as pd \u3053\u308c\u3067\u3001Pandas \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3001 pd \u3068\u3044\u3046\u540d\u524d\u304b\u3089\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 pd \u306f\u6163\u7fd2\u7684\u306b\u4f7f\u308f\u308c\u308b\u77ed\u7e2e\u3055\u308c\u305f\u540d\u524d\u3067\u3059\u3002 pd. \u3068\u3044\u3046\u63a5\u982d\u8f9e\u304c\u3064\u3044\u305f\u95a2\u6570\u306f\u3001\u5168\u3066Pandas \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u3068\u306a\u308a\u307e\u3059\u3002 CSV\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f # \u65e9\u901f\u3001Pandas\u3092\u4f7f\u3063\u3066\u3001\u5148\u7a0b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f 'boston.csv' \u3092\u8aad\u307f\u8fbc\u3093\u3067\u307f\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u3001CSV\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080 df = pd . read_csv ( 'boston.csv' ) \u3053\u3053\u3067\u306f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u306f\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u982d\u6587\u5b57\u306b\u7531\u6765\u3059\u308b df \u3068\u3044\u3046\u5909\u6570\u540d\u306b\u3057\u3066\u3044\u307e\u3059\u3002 \u5909\u6570\u540d\u3092\u3064\u3051\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u5f8c\u304b\u3089\u5909\u6570\u540d\u3092\u901a\u3057\u3066\u30c7\u30fc\u30bf\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 Pandas \u3067\u306f\u3001\u8868\u30c7\u30fc\u30bf\u306e\u3053\u3068\u3092 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0(data frame) \u3068\u547c\u3073\u307e\u3059\u3002 \u3060\u304b\u3089\u3001\u982d\u6587\u5b57\u3092\u3068\u3063\u3066 df \u3068\u5909\u6570\u540d\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 pd.read_csv(filename) filename \u3067\u6307\u5b9a\u3055\u308c\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u8868\u30c7\u30fc\u30bf\uff08\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\uff09\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080 \u30e1\u30bd\u30c3\u30c9\u64cd\u4f5c\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u78ba\u8a8d # \u305d\u308c\u3067\u306f\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 df \u3092\u64cd\u4f5c\u3057\u3066\u3001\u5148\u982d\u306e\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5148\u982d\u3092\u898b\u308b df . head () \u5909\u6570\u540d\u3068\u30c9\u30c3\u30c8 . \u306b\u7d9a\u304f\u3001 head() \u306f\u3001 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 df \u3078\u306e\u64cd\u4f5c\u306e\u7a2e\u985e\u3092\u8868\u3057\u3001\u30e1\u30bd\u30c3\u30c9\u3068\u547c\u3070\u308c\u307e\u3059\u3002 df.head(10) : \u30e1\u30bd\u30c3\u30c9\u64cd\u4f5c\u306b\u304a\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059 df2.head() : \u5225\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 df2 \u3078\u306e\u30e1\u30bd\u30c3\u30c9\u64cd\u4f5c \u7121\u4e8b\u306b\u3001\u8868\u30c7\u30fc\u30bf\u306e\u5148\u982d\u884c\u304c\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3067\u3057\u3087\u3046\u304b\uff1f \u6b21\u306b\u7d39\u4ecb\u3059\u308bhead\u4ee5\u5916\u306e\u30e1\u30bd\u30c3\u30c9\u3082\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u78ba\u8a8d Pandas \u3067\u306f\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\u305d\u306e\u3068\u304d\u3001\u305d\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u6b21\u306e\u30e1\u30bd\u30c3\u30c9\u3082\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u78ba\u8a8d\u306b\u3088\u304f\u7528\u3044\u3089\u308c\u307e\u3059\u3002 \u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30b3\u30fc\u30c9 \u4f8b df.head(10) df \u306e\u5148\u982d\u306e10\u884c\u3092\u5f97\u308b df.tail() df \u306e\u672b\u5c3e\u3092\u5f97\u308b df.sample(10) df \u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b10\u884c\u53d6\u308a\u51fa\u3059 Python \u3068\u30a8\u30e9\u30fc\u5bfe\u5fdc # Python\u306a\u3069\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f\u3001\u81ea\u7136\u8a00\u8a9e\u3068\u306f\u7570\u306a\u308a\u3001\u53b3\u5bc6\u306a\u6587\u6cd5\u3068\u89e3\u91c8\u304c\u6c7a\u307e\u3063\u3066\u3044\u307e\u3059\u3002 \u5c11\u3057\u3067\u3082\u66f8\u304d\u65b9\u306e\u30eb\u30fc\u30eb\u304b\u3089\u5916\u308c\u308b\u3068\u3001\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002 \u3053\u3053\u3067\u306f\u3001Python\u521d\u5fc3\u8005\u304c\u3088\u304f\u3064\u307e\u305a\u304f\u30a8\u30e9\u30fc\u3092\u898b\u306a\u304c\u3089\u3001\u30a8\u30e9\u30fc\u5bfe\u5fdc\u3092\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u30a8\u30e9\u30fc\u306e\u4f8b(\u3069\u3053\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff09 pd , read_csv ( 'boston.csv' ) NameError Traceback (most recent call last) <ipython-input-22-f721058e7565> in <module>() ----> 1 df = pd,read_csv('boston.csv') 2 df.head() NameError: name 'read_csv' is not defined \u539f\u56e0: \u30b3\u30ed\u30f3 . \u3068 \u30ab\u30f3\u30de , \u3092\u6253\u3061\u9593\u9055\u3048\u3066\u3044\u308b\u3002\u30ab\u30f3\u30de , \u306f\u533a\u5207\u308a\u306b\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001 . \u3068\u306f\u9055\u3046\u610f\u5473\u306b\u306a\u308b\u3002 \u30a8\u30e9\u30fc\u306e\u4f8b(\u3069\u3053\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff09 pd . read_csv ( 'boston.csv ' ) FileNotFoundError Traceback (most recent call last) <ipython-input-21-3226a7d916fa> in <module>() ----> 1 df = pd.read_csv('boston.csv ') FileNotFoundError: [Errno 2] No such file or directory: 'boston.csv ' \u539f\u56e0: 'boston.csv ' \u306e\u6700\u5f8c\u306b\u4f59\u5206\u306a\u7a7a\u767d\u304c\u5165\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u9055\u3063\u3066\u3044\u308b\u3002 \u30a8\u30e9\u30fc\u306b\u306f\u3001\u5fc5\u305a\u539f\u56e0\u304c\u3042\u308a\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u529b\u3068\u306f\u3001\u539f\u56e0\u3092\u5206\u6790\u3057\u3066\u3001\u30a8\u30e9\u30fc\u3092\u53d6\u308a\u9664\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u80fd\u529b\u3068\u3082\u3044\u3048\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u6163\u308c\u308b\u306b\u306f \u81ea\u5206\u3067\u30bf\u30a4\u30d4\u30f3\u30b0\u3057\u306a\u304c\u3089\u5165\u529b\u3059\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u69cb\u6587\u3084\u30bb\u30f3\u30b9\u3082\u8eab\u306b\u3064\u3044\u3066\u3044\u304d\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5206\u6790\u306e\u7b2c\u4e00\u6b69 # \u30c7\u30fc\u30bf\u5206\u6790\u306f\u3001 \u5404\u30ab\u30e9\u30e0\uff08\u30c7\u30fc\u30bf\u5217\uff09\u3092\u7406\u89e3\u3059\u308b \u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u307e\u3059\u3002 \u3082\u3046\u4e00\u5ea6\u3001\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u4eca\u5ea6\u306f\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u306b\u7740\u76ee df.head() \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 crim '\u72af\u7f6a' : \u4eba\u53e31\u4eba\u5f53\u305f\u308a\u306e\u72af\u7f6a\u767a\u751f\u6570 zn '\u81ea\u7136' : 25000\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\u4ee5\u4e0a\u306e\u5c45\u4f4f\u533a\u9593\u306e\u5360\u3081\u308b\u5272\u5408 indus '\u5de5\u5834' : \u5c0f\u58f2\u696d\u4ee5\u5916\u306e\u7523\u696d\u304c\u5360\u3081\u308b\u9762\u7a4d\u306e\u5272\u5408 chas '\u5ddd\u8fd1' : \u30c1\u30e3\u30fc\u30eb\u30ba\u5ddd\u306b\u3088\u308b\u30c0\u30df\u30fc\u5909\u6570\uff081\uff1a\u5ddd\u306e\u5468\u8fba\uff0c0\uff1a\u305d\u308c\u4ee5\u5916\uff09 nox '\u5927\u6c17\u6c5a\u67d3' : NOx\u306e\u6fc3\u5ea6 rm '\u90e8\u5c4b\u6570' : \u4f4f\u5c45\u306e\u5e73\u5747\u90e8\u5c4b\u6570 age '\u7bc9\u5e74' : 1940\u5e74\u3088\u308a\u524d\u306b\u5efa\u3066\u3089\u308c\u305f\u7269\u4ef6\u306e\u5272\u5408 dis '\u901a\u52e4' : \u30dc\u30b9\u30c8\u30f3\u306e\u4e3b\u306a\u8077\u5834\u307e\u3067\u306e\u8ddd\u96e2 rad '\u4ea4\u901a' : \u5e79\u7dda\u9053\u8def\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306e\u3057\u3084\u3059\u3055 tax '\u8cc7\u7523\u7a0e' : \uff0410,000\u30c9\u30eb\u3042\u305f\u308a\u306e\u4e0d\u52d5\u7523\u7a0e\u7387\u306e\u7dcf\u8a08 ptratio '\u6559\u54e1\u6bd4' : \u5150\u7ae5\u3068\u6559\u5e2b\u306e\u6bd4\u7387 black '\u9ed2\u4eba' : \u30a2\u30d5\u30ea\u30ab\u7cfb\u30a2\u30e1\u30ea\u30ab\u4eba\u5c45\u4f4f\u8005\u306e\u5272\u5408 lstat '\u4f4e\u6240\u5f97' : \u7d66\u4e0e\u306e\u4f4e\u3044\u8077\u696d\u306b\u5f93\u4e8b\u3059\u308b\u4eba\u53e3\u306e\u5272\u5408 medv '\u4f4f\u5b85\u4fa1\u683c' : \u4f4f\u5b85\u4fa1\u683c (\u6240\u6709\u8005\u304c\u5360\u6709\u3057\u3066\u3044\u308b\u5bb6\u5c4b\u306e\uff041000\u5358\u4f4d\u306e\u4e2d\u592e\u5024) \u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001 crim \u306e\u3088\u3046\u306b\u82f1\u8a9e\u3067\u5217\u540d\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u3088\u308a\u76f4\u611f\u7684\u306b\u30c7\u30fc\u30bf\u5206\u6790\u3057\u3084\u3059\u3044\u3088\u3046\u306b '\u72af\u7f6a' \u306e\u3088\u3046\u306b\u548c\u8a33\u306b\u5909\u3048\u3066\u3042\u308a\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u5c11\u3057\u610f\u8a33\u3057\u3066\u3042\u308b\u306e\u3067\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306a\u30c7\u30fc\u30bf\u306e\u610f\u56f3\u3068\u5c11\u3057\u9055\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u30c7\u30fc\u30bf\u306e\u516c\u5e73\u6027\u3068\u4fee\u6b63 # \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u3082\u3068\u3082\u30681970\u5e74\u4ee3\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002 \u73fe\u5728\u306e\u5e38\u8b58\u304b\u3089\u8003\u3048\u308b\u3068\u76f8\u5fdc\u3057\u304f\u306a\u3044\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001 '\u9ed2\u4eba' \u306a\u3069\u306e\u30c7\u30fc\u30bf\u5217\u306f\u5dee\u5225\u306b\u3064\u306a\u304c\u308b\u305f\u3081\u3001\u76f8\u5fdc\u3057\u3044\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u4eba\u5de5\u77e5\u80fd\u306e\u516c\u5e73\u6027\uff08Fairness) \u4e0d\u516c\u5e73\u306a\u30d0\u30a4\u30a2\u30b9\u306b\u57fa\u3065\u304d\u5b66\u7fd2\u3057\u305f\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u304c\u4e0d\u5f53\u306a\u5dee\u5225\uff08\u4eba\u7a2e\u5dee\u5225\uff0f\u6c11\u65cf\u5dee\u5225\u3084\u3001\u6027\u5225\u5dee\u5225\u3001\u6587\u5316\u5dee\u5225\uff0f\u5730\u57df\u5dee\u5225\u306a\u3069\uff09\u3092\u5f15\u304d\u8d77\u3055\u306a\u3044\u3088\u3046\u306b\u4e0d\u516c\u5e73\u306a\u30d0\u30a4\u30a2\u30b9\u3092\u6392\u9664\u3059\u308b\u3053\u3068 \u3053\u306e\u3088\u3046\u306a\u5dee\u5225\u306b\u3064\u306a\u304c\u308b\u30c7\u30fc\u30bf\u306f\u3001\u524a\u9664\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u6b21\u306e\u3088\u3046\u306b drop \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3067\u304d\u307e\u3059\u3002 `\u9ed2\u4eba`\u306e\u30c7\u30fc\u30bf\u5217\u3092\u524a\u9664\u3059\u308b df.drop('\u9ed2\u4eba', axis=1, inplace=True) df.head() \u3053\u3053\u304b\u3089\u5148\u306f\u300113\u30ab\u30e9\u30e0\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u5bfe\u8c61\u306b\u30c7\u30fc\u30bf\u5206\u6790\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5217\u306e\u62bd\u51fa # Pandas \u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u3092\u5b9f\u969b\u306b\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u306a\u304c\u3089\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 Pandas\u306e\u57fa\u672c\u64cd\u4f5c\u306f\u3001\u300c \u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3059\u64cd\u4f5c \u300d\u306b\u306a\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 df \u304b\u3089\u3001 '\u4f4f\u5b85\u4fa1\u683c' \u5217\u306e\u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044\u3068\u304d\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u66f8\u304d\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5217 '\u4f4f\u5b85\u4fa1\u683c' \u3092\u53d6\u308a\u51fa\u3059 \u30c7\u30fc\u30bf\u5217`'\u4f4f\u5b85\u4fa1\u683c'`\u3092\u3068\u308a\u3060\u3059 df [ '\u4f4f\u5b85\u4fa1\u683c' ] 0 24.0 1 21.6 2 34.7 3 33.4 4 36.2 ... 501 22.4 502 20.6 503 23.9 504 22.0 505 11.9 Name: \u4fa1\u683c, Length: 506, dtype: float64 \u30de\u30c3\u30d4\u30f3\u30b0 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306f\u3001\u5217\u540d\u306b\u5bfe\u3059\u308b\u30de\u30c3\u30d4\u30f3\u30b0\uff08\u8f9e\u66f8\u306e\u3088\u3046\u306a\u3082\u306e)\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 df['\u4f4f\u5b85\u4fa1\u683c'] \u306e '\u4f4f\u5b85\u4fa1\u683c' \u306e\u6587\u5b57\u5217\u3092\u5909\u66f4\u3059\u308b\u3068\u3001\u6307\u5b9a\u3057\u305f\u5225\u306e\u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5217\u3068\u7a2e\u985e\u2605 # Python \u3092\u4f7f\u3044\u3053\u306a\u3059\u305f\u3081\u306b\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u578b\u3067\u5024\u304c\u5f97\u3089\u308c\u3066\u3044\u308b\u304b\u77e5\u308b\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002 \u306a\u305c\u306a\u3089\u3001\u30c7\u30fc\u30bf\u578b\u306b\u3088\u3063\u3066\u3001\u64cd\u4f5c\u3067\u304d\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u7a2e\u985e\u304c\u7570\u306a\u308b\u304b\u3089\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u5217\u306f\u3001 Series \u3068\u547c\u3070\u308c\u308b pandas \u306e\u30c7\u30fc\u30bf\u578b\u3067\u5f97\u3089\u308c\u307e\u3059\u3002 df['\u4f4f\u5b85\u4fa1\u683c']\u306e\u578b\u3092\u8abf\u3079\u308b type ( df [ '\u4f4f\u5b85\u4fa1\u683c' ]) pandas.core.series.Series Series\u306f\u3001\uff08\u7c21\u5358\u306b\u8a00\u3048\u3070\uff09\u5358\u4e00\u5217\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u3059\u3002 \u305f\u3060\u3057\u3001Pandas \u306b\u6163\u308c\u3066\u3044\u306a\u3044\u3046\u3061\u306f\u3001Python\u306e\u30ea\u30b9\u30c8\u3084 NumPy\u306e\u914d\u5217\u306a\u3069\u306e \u4f7f\u3044\u6163\u308c\u305f\u30c7\u30fc\u30bf\u5217 \u3067\u53d6\u308a\u51fa\u305b\u305f\u65b9\u304c\u4fbf\u5229\u3067\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u5217\u306e\u578b\u3092\u5909\u63db\u3057\u3066\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 NumPy\u306e\u914d\u5217\u3068\u3057\u3066\u3001\u30c7\u30fc\u30bf\u5217\u3092\u5f97\u308b df [ '\u4f4f\u5b85\u4fa1\u683c' ] . values array([24. , 21.6, 34.7, 33.4, 36.2, 28.7, 22.9, 27.1, ...]) \u30ea\u30b9\u30c8\u3068\u3057\u3066\u3001\u30c7\u30fc\u30bf\u5217\u3092\u5f97\u308b df [ '\u4f4f\u5b85\u4fa1\u683c' ] . values . tolist () [24.0, 21.6, 34.7, 33.4, 36.2, 28.7, 22.9, 27.1, ... ] \u77e5\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u578b\u3092\u5897\u3084\u305d\u3046 \u81ea\u5206\u306e\u3088\u304f\u77e5\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u578b\u304c\u591a\u304f\u3042\u308b\u3068\u3001 \u5909\u63db\u3057\u3066\u3069\u3093\u3069\u3093\u30d7\u30ed\u30b0\u30e9\u30e0\u51e6\u7406\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u8981\u7d04\u7d71\u8a08\u91cf: \u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u63b4\u3080 # \u6570\u5024\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u306f\u3001 \u7d71\u8a08\u7684\u306a\u30c7\u30fc\u30bf\u306e\u6563\u3089\u3070\u308a \u3067\u8a18\u8ff0\u3055\u308c\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3057\u3066\u773a\u3081\u3066\u3044\u308b\u3060\u3051\u3067\u306f\u3001\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u63b4\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 describe() \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3084\u30c7\u30fc\u30bf\u5217\u306b\u5bfe\u3057\u3066\u3001\u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u308b\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002 \u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u306e\u3053\u3068\u3092 \u8981\u7d04\u7d71\u8a08\u91cf \u3068\u3082\u8a00\u3044\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5217 '\u4f4f\u5b85\u4fa1\u683c' \u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u5f97\u308b df [ '\u4f4f\u5b85\u4fa1\u683c' ] . describe () \u5b9f\u884c\u7d50\u679c count 506.000000 mean 22.532806 std 9.197104 min 5.000000 25% 17.025000 50% 21.200000 75% 25.000000 max 50.000000 \u5404\u9805\u76ee\u306e\u610f\u5473 count : \u30c7\u30fc\u30bf\u6570 mean : \u5e73\u5747\u5024 std : \u6a19\u6e96\u504f\u5dee min : \u4e0b\u4f4d25%\u76ee\u306e\u5024\uff08\u7b2c\u4e00\u56db\u5206\u4f4d\u70b9\uff09 50% : \u4e2d\u592e\u5024 75% : \u4e0a\u4f4d25%\u76ee\u306e\u5024\uff08\u7b2c\u4e09\u56db\u5206\u4f4d\u70b9\uff09 max : \u6700\u5927\u5024 \u7d71\u8a08\u7684\u306b\u30c7\u30fc\u30bf\u5024\u306e\u6563\u3089\u3070\u308a\u3092\u898b\u308b\u3068\u304d\u306f\u3001 \u6b63\u898f\u5206\u5e03 \u304c\u5927\u5207\u306b\u306a\u308a\u307e\u3059\u3002 \uff08\u6b63\u898f\u5206\u5e03\u3092\u4eee\u5b9a\u3059\u308b\u3068\uff09 \u30c7\u30fc\u30bf\u306e\u6563\u3089\u3070\u308a\u306f\u3001\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3067\u5206\u5e03\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30c7\u30fc\u30bf\u5024\u306e90%\u306f\u3001\u5e73\u5747\u5024\u304b\u3089\u6a19\u6e96\u504f\u5dee\u306e\u7bc4\u56f2\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3068\u898b\u306a\u305b\u307e\u3059\u3002 \uff08\u6b63\u898f\u5206\u5e03\u304b\u3089\u5927\u304d\u304f\u5916\u308c\u308b\u3068\uff09 \u5206\u5e03\u306e\u975e\u5bfe\u79f0\u6027\u3084\u5916\u308c\u5024\u304b\u3089\u5f71\u97ff\u3092\u53d7\u3051\u306b\u304f\u3044\u4e2d\u592e\u5024\u3001\u56db\u5206\u4f4d\u70b9\u3001\u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u306a\u3069\u306e\u5024\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 \u6b63\u898f\u5206\u5e03\u304b\u3089\u306e\u305a\u308c\u3092\u77e5\u308b\u305f\u3081\u306b\u306f\u3001\u5c16\u5ea6\u3084\u6b6a\u5ea6\u306a\u3069\u306e\u9ad8\u6b21\u30e2\u30fc\u30e1\u30f3\u30c8\u304b\u3089\u6c42\u3081\u3089\u308c\u308b\u7d71\u8a08\u91cf\u304c\u3042\u308a\u307e\u3059\u3002 \u6b6a\u5ea6(Skewness) \u5206\u5e03\u306e\u975e\u5bfe\u79f0\u6027\u3092\u793a\u3059\u6307\u6a19\u3002\u5024\u304c\u6b63\u3067\u3042\u308b\u3068\u5206\u5e03\u304c\u53f3\u306b\u4f38\u3073\u3066\u3044\u308b\u3002\u9006\u306b\u8ca0\u3067\u3042\u308b\u3068\u5de6\u306b\u4f38\u3073\u3066\u3044\u308b\u3002 \u5c16\u5ea6(Kurtosis) \u6b63\u898f\u5206\u5e03\u3092\u57fa\u6e96\u3068\u3057\u305f\u5206\u5e03\u306e\u92ed\u3055\u306e\u6307\u6a19\u3002\u57fa\u6e96\u3067\u3042\u308b\u6b63\u898f\u5206\u5e03\u306e\u5c16\u5ea6\u3088\u308a\u3082\u5927\u304d\u3051\u308c\u3070\u5206\u5e03\u306f\u5c16\u3063\u3066\u304a\u308a\u3001\u5c0f\u3055\u3051\u308c\u3070\u7de9\u3084\u304b\u306a\u5206\u5e03\u3067\u3042\u308b\u3002 Let's try: \u500b\u3005\u306e\u7d71\u8a08\u91cf\u3092\u5f97\u308b describe() \u30e1\u30bd\u30c3\u30c9\u306f\u3001\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u307e\u3068\u3081\u3066\u51fa\u529b\u3057\u3066\u304f\u308c\u307e\u3057\u305f\u304c\u3001 \u500b\u3005\u306e\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u308b\u30e1\u30bd\u30c3\u30c9\u3082\u3042\u308a\u307e\u3059\u3002\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30e1\u30bd\u30c3\u30c9 \u4f8b df['A'].count() 'A' \u5217\u306e\u30c7\u30fc\u30bf\u4ef6\u6570 df['A'].mean() 'A' \u5217\u306e\u5e73\u5747\u5024 df['A'].std() 'A' \u5217\u306e\u6a19\u6e96\u504f\u5dee df['A'].max() 'A' \u5217\u306e\u6700\u5927\u5024 df['A'].min() 'A' \u5217\u306e\u6700\u5c0f\u5024 df['A'].median() 'A' \u5217\u306e\u4e2d\u592e\u5024 df['A'].mode() 'A' \u5217\u306e\u6700\u983b\u5024 df['A'].skew() 'A' \u5217\u306e\u6b6a\u5ea6 df['A'].kurt() 'A' \u5217\u306e(Fisher\u306e\u5b9a\u7fa9\u306b\u3088\u308b)\u5c16\u5ea6 \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316 # \u30c7\u30fc\u30bf\u5217\u306e\u7279\u5fb4\u306f\u3001\u6570\u5217\u3084\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u898b\u3066\u3044\u3066\u3082\u3001\u76f4\u611f\u7684\u306b\u50be\u5411\u3092\u3064\u304b\u3081\u307e\u305b\u3093\u3002 \u4e00\u65b9\u3001\u6b21\u306e\u56f3\u306f\u3001\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u6b63\u898f\u5206\u5e03\u3092\u4eee\u5b9a\u3057\u305f\u8fd1\u4f3c\u66f2\u7dda\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u305f\u4f8b\u3067\u3059\u3002 \u3053\u306e\u3088\u3046\u306b\u30b0\u30e9\u30d5\u306b\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u30c7\u30fc\u30bf\u306f\u7406\u89e3\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 Python \u3067 \u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\uff08\u30e2\u30b8\u30e5\u30fc\u30eb\uff09\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 matplotlib : \u5b9a\u756a\uff08\u3068\u3044\u3046\u304b\u5fc5\u9808\uff09 seaborn : \u3088\u308a\u7dba\u9e97\u306a\u30b0\u30e9\u30d5\u304c\u66f8\u3051\u308b \u3053\u308c\u3089\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3001\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u524d\u306b\u306f\u5fc5\u305a\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\u3002 matplotlib,seaborn\u306e\u6e96\u5099 import matplotlib.pyplot as plt import seaborn as sns try : import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError : import os os . system ( 'pip3 install japanize_matplotlib' ) import japanize_matplotlib sns . set ( font = \"IPAexGothic\" ) #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a \u65e5\u672c\u8a9e\u306e\u6587\u5b57\u5316\u3051\u3092\u907f\u3051\u308b\u306b\u306f\uff1f Matplotlib\u3084seaborn\u306f\u3001\u6d77\u5916\u3067\u958b\u767a\u3055\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u306e\u3067\u3001\u65e5\u672c\u8a9e\u8868\u793a\u304c\u6587\u5b57\u5316\u3051\u3057\u307e\u3059\u3002 \u30b0\u30e9\u30d5\u4e0a\u306b\u65e5\u672c\u8a9e\u3092\u8868\u793a\u3057\u305f\u3044\u3068\u304d\u306f\u3001 japanize_matplotlib \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u7528\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 \u7bb1\u3072\u3052\u56f3 # \u307e\u305a\u3001\u7bb1\u3072\u3052\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6700\u8fd1\u306f\u5c0f\u5b66\u751f\u306e\u3068\u304d\u306b\u7fd2\u3046\u3089\u3057\u3044\u306e\u3067\u3001\u7686\u3055\u3093\u304a\u306a\u3058\u307f\u3067\u3057\u3087\u3046\u3002 Pandas \u3067\u7bb1\u3072\u3052\u56f3\u3092\u63cf\u753b\u3059\u308b\u3068\u304d\u306f\u3001 plt.boxplot() \u306b\u63cf\u753b\u3057\u305f\u3044\u30c7\u30fc\u30bf\u5217\u3092\u5f15\u6570\u3067\u4e0e\u3048\u307e\u3059\u3002 `'\u4f4f\u5b85\u4fa1\u683c'`\u306e\u7bb1\u3072\u3052\u56f3 plt . boxplot ( df [ '\u4f4f\u5b85\u4fa1\u683c' ]) plt . show () \u30b0\u30e9\u30d5\u306e\u898b\u65b9 \u56db\u89d2\u306e\u90e8\u5206\u306f\u3001\u56db\u5206\u4f4d\u7bc4\u56f2\u3092\u8868\u3057\u3001 \u7bb1 \u3068\u547c\u3070\u308c\u307e\u3059\u3002 \u7bb1\u306e\u4e0a\u7dda\u304c\u4e0a\u4f4d25%\u3001\u7bb1\u306e\u4e0b\u7dda\u304c\u4e0b\u4f4d25%\u3001\u30aa\u30ec\u30f3\u30b8\u306e\u6a2a\u7dda\u304c\u4e2d\u592e\u5024\u3092\u8868\u3057\u307e\u3059\u3002\uff08\u30c7\u30fc\u30bf\u306e\u534a\u5206\u304c\u3053\u306e\u7bc4\u56f2\u306b\u3042\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\uff09 \u56db\u5206\u4f4d\u7bc4\u56f2\u306e1.5\u500d\u4ee5\u4e0a\u3001\u96e2\u308c\u305f\u70b9\u306f \u5916\u308c\u5024 \u3068\u307f\u306a\u3057\u3001\u25cb\u3067\u30d7\u30ed\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u5916\u308c\u5024\u3067\u306a\u3044\u6700\u3082\u5916\u5074\u306e\u70b9\u304c \u3072\u3052 \u3068\u306a\u308a\u307e\u3059\u3002(\u3072\u3052\u306f\u3001\u53b3\u5bc6\u306b\u306f\u6700\u5927\u5024\u3001\u6700\u5c0f\u5024\u3092\u8868\u3059\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002) \u5916\u308c\u5024\u306e\u767a\u751f\u983b\u5ea6\u306f\uff1f \u6b63\u898f\u5206\u5e03\u3067\u3042\u308b\u5834\u5408\u3001\u7bb1\u3072\u3052\u56f3\u306b\u304a\u3051\u308b\u5916\u308c\u5024(1.5\u500d)\u3068\u306f0.8%\u306e\u78ba\u7387\u3067\u3057\u304b\u767a\u751f\u3057\u306a\u3044\u7a00\u306a\u30c7\u30fc\u30bf\u3068\u306a\u308a\u307e\u3059\u3002 plt.boxplot(\u30c7\u30fc\u30bf\u5217) \u30c7\u30fc\u30bf\u5217\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u305d\u306e\u7bb1\u3072\u3052\u56f3\u3092\u63cf\u753b\u3059\u308b \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 # \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u3001\u7e26\u8ef8\u306b\u5ea6\u6570\u3001\u6a2a\u8ef8\u306b\u968e\u7d1a\u3092\u3068\u308a\u3001 \u30c7\u30fc\u30bf\u306e\u5206\u5e03\u72b6\u6cc1\u3092\u8996\u899a\u7684\u306b\u8a8d\u8b58\u3059\u308b\u305f\u3081\u306e\u5b9a\u756a\u30b0\u30e9\u30d5\u3067\u3059\u3002 Pandas \u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3059\u308b\u3068\u304d\u306f\u3001 plt.hist() \u306b\u63cf\u753b\u3057\u305f\u3044\u30c7\u30fc\u30bf\u5217\u3092\u5f15\u6570\u3067\u4e0e\u3048\u307e\u3059\u3002 '\u4f4f\u5b85\u4fa1\u683c'\u5217\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 plt . hist ( df [ '\u4f4f\u5b85\u4fa1\u683c' ]) plt . show () plt.hist(x)\u3067\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u63cf\u753b\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3046\u3002\u30d3\u30f3\uff08\u8868\u793a\u3059\u308b\u68d2\u306e\u6570\u3001\u968e\u7d1a\u6570\uff09\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff08\u4f55\u3082\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306e\u521d\u671f\u5024\uff09\u3067\u306f10\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 bins=20 \u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30d3\u30f3\u3092\u6307\u5b9a plt . hist ( df [ '\u4f4f\u5b85\u4fa1\u683c' ], bins = 20 ) plt . show () \u7dba\u9e97\u306a\u30b0\u30e9\u30d5\u3092\u66f8\u304f\u305f\u3081\u306b\u306f\uff1f Matplotlib\u3084seaborn\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Google \u306a\u3069\u3067\u3001\u30b0\u30e9\u30d5\u306e\u66f8\u304d\u65b9\u3092\u3069\u3093\u3069\u3093\u8abf\u3079\u3066\u3001\u81ea\u5206\u306e\u6c42\u3081\u3066\u3044\u308b\u30b0\u30e9\u30d5\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u53c2\u8003\u8cc7\u6599 * https://pythondatascience.plavox.info/matplotlib/\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 plt.hist(\u30c7\u30fc\u30bf\u5217) \u30c7\u30fc\u30bf\u5217\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3059\u308b \u6f14\u7fd2\u554f\u984c # \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089 '\u4f4f\u5b85\u4fa1\u683c' \u4ee5\u5916\u306e\uff13\u3064\u306e\u30c7\u30fc\u30bf\u5217\u3092\u9078\u3093\u3067\u307f\u3088\u3046\u3002 \u9078\u3093\u3060\u30c7\u30fc\u30bf\u5217\u3092\u6570\u5024\u306e\u30ea\u30b9\u30c8\uff08\u914d\u5217\uff09\u3068\u3057\u3066\u62bd\u51fa\u3057\u3066\u307f\u3088\u3046 \u9078\u3093\u3060\u30c7\u30fc\u30bf\u5217\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u3066\u307f\u308b \u9078\u3093\u3060\u30c7\u30fc\u30bf\u5217\u306e\u7bb1\u30d2\u30b2\u56f3\u3092\u63cf\u753b\u3057\u3066\u307f\u308b \u9078\u3093\u3060\u30c7\u30fc\u30bf\u5217\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3057\u3066\u307f\u308b \u9078\u3093\u3060\u30c7\u30fc\u30bf\u5217\u304c\u6b63\u898f\u90e8\u5206\u306b\u3057\u305f\u304c\u3046\u304b\u5f93\u308f\u306a\u3044\u304b\u8003\u3048\u3066\u307f\u3088\u3046 (\u304a\u307e\u3051\uff09 \u6b63\u898f\u5206\u5e03\u306e\u8fd1\u4f3c\u76f4\u7dda\uff08\u2605\uff09 # \u3055\u3066\u3001\u8208\u5473\u306e\u3042\u308b\u5b66\u751f\u306e\u305f\u3081\u3001 \u53ef\u8996\u5316\u306e\u5192\u982d\u3067\u7d39\u4ecb\u3057\u305f\u6b63\u898f\u5206\u5e03\u306e\u8fd1\u4f3c\u66f2\u7dda\u3068\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u5408\u308f\u305b\u308b\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6b63\u898f\u5206\u5e03\u306e\u8fd1\u4f3c\u66f2\u7dda\u3092\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u306f\u3001 \u78ba\u7387\u5bc6\u5ea6\u95a2\u6570(probability density function)\u3092\u4f7f\u3044\u307e\u3059\u3002 pdf(x) = \\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^2}{2}} \u3053\u306e\u95a2\u6570\u306f\u3001SciPy \u30e2\u30b8\u30e5\u30fc\u30eb\u306e scipy.stats.norm.pdf() \u306b\u3042\u308a\u307e\u3059\u3002 plt.plot(x, y) \u306f\u3001\u7dda\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u95a2\u6570\u3067\u3059\u3002 from scipy.stats import norm x = np . linspace ( - 5 , 5 , 100 ) # \u533a\u9593[-5,5]\u3092100\u7b49\u5206\u3059\u308b y = norm . pdf ( x ) # \u78ba\u7387\u5bc6\u5ea6\u95a2\u6570 plt . plot ( x , y ) plt . show () \u30c7\u30fc\u30bf\u5217 '\u4f4f\u5b85\u4fa1\u683c' \u306e\u6700\u5927\u5024\u3001\u6700\u5c0f\u5024\u3001\u5e73\u5747\u5024\u3001\u6a19\u6e96\u504f\u5dee\u304b\u3089\u30b9\u30b1\u30fc\u30eb\u3092\u8abf\u6574\u3057\u307e\u3059\u3002 \u305d\u3057\u3066\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068: bins = 20 k = ( df [ '\u4f4f\u5b85\u4fa1\u683c' ] . max () - df [ '\u4f4f\u5b85\u4fa1\u683c' ] . min ()) / bins # \u533a\u9593\u5e45 x = np . linspace ( df [ '\u4f4f\u5b85\u4fa1\u683c' ] . min (), df [ '\u4f4f\u5b85\u4fa1\u683c' ] . max (), 100 ) y = norm . pdf ( x , df [ '\u4f4f\u5b85\u4fa1\u683c' ] . mean (), df [ '\u4f4f\u5b85\u4fa1\u683c' ] . std ()) * len ( df [ '\u4f4f\u5b85\u4fa1\u683c' ]) * k plt . hist ( df [ '\u4f4f\u5b85\u4fa1\u683c' ], bins = bins ) # \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 plt . plot ( x , y , linestyle = '--' ) # \u78ba\u7387\u5bc6\u5ea6\u95a2\u6570 plt . show () \uff08\u304a\u307e\u3051\uff12\uff09 \u30b7\u30e3\u30d4\u30ed\u30fb\u30a6\u30a3\u30eb\u30af\u691c\u5b9a(Shapiro-Wilk test) # \u6b63\u898f\u6bcd\u96c6\u56e3\uff08\uff1d\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u6bcd\u96c6\u56e3\uff09\u304b\u3089\u7121\u4f5c\u70ba\u306b\u591a\u6570\u306e\u6a19\u672c\u3092\u62bd\u51fa\u3059\u308b\u3068\u3001\u305d\u306e\u6a19\u672c\u306e\u5206\u5e03\u3082\u307e\u305f\u6b63\u898f\u5206\u5e03\u306b\u306a\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u3088\u3063\u3066\u3001\u6b63\u898f\u6027\u306f\u3001\u5404\u6a19\u672c\uff08\u5404\u7fa4\u306e\u30c7\u30fc\u30bf\u306b\uff09\u306b\u3064\u3044\u3066\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u3001\u305d\u306e\u5f62\u72b6\u304b\u3089\u5224\u65ad\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6a19\u672c\u306f\u3001\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u6bcd\u96c6\u56e3\u304b\u3089\u7121\u4f5c\u70ba\u62bd\u51fa\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u300d\u3092\u5e30\u7121\u4eee\u8aac\u3068\u3057\u3066\u3001\u6b63\u898f\u5206\u5e03\u3092\u5224\u5b9a\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002 \u7279\u306b\u3001\u30c7\u30fc\u30bf\u6570\u304c1000\u4ee5\u4e0b\u306e\u6709\u52b9\u3068\u3055\u308c\u307e\u3059\u3002 Python \u3067\u306f\u3001SciPy\u30e2\u30b8\u30e5\u30fc\u30eb\u306e shapiro \u95a2\u6570\u3067\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 '\u4f4f\u5b85\u4fa1\u683c'\u5217\u306e\u30b7\u30e3\u30d4\u30ed\u30fb\u30a6\u30a3\u30eb\u30af\u691c\u5b9a from scipy.stats import shapiro print ( shapiro ( df [ '\u4f4f\u5b85\u4fa1\u683c' ])) (0.9171748757362366, 4.940195786292171e-16) \u691c\u5b9a\u7d71\u8a08\u91cf\u3068p\u5024\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001p\u5024\u304c\u6709\u610f\u6c34\u6e96(0.05)\u3088\u308a\u5c0f\u3055\u3044\u304b\u3069\u3046\u304b\u898b\u307e\u3059\u3002 `df['\u4f4f\u5b85\u4fa1\u683c'])\u306f\u30010.05\u3088\u308a\u5c0f\u3055\u3044\u306e\u3067\u3001\u300c\u6b63\u898f\u5206\u5e03\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u4eee\u8aac\u304c\u68c4\u5374\u3055\u308c\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u300c\u6b63\u898f\u8868\u73fe\u3068\u8a00\u3048\u306a\u3044\u300d\u6bcd\u96c6\u56e3\u3068\u306a\u308a\u307e\u3059\u3002","title":"\u30c7\u30fc\u30bf\u5206\u6790"},{"location":"boston/#_1","text":"Python \u306b\u3088\u308b\u30c7\u30fc\u30bf\u5206\u6790\u306e\u57fa\u790e\u3092\u5b66\u3073\u306a\u304c\u3089\u3001 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3068AI\u306e\u57fa\u790e\u3092\u5b66\u3073\u307e\u3059\u3002 Pandas\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f \u7bb1\u3072\u3052\u56f3\u3068\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0","title":"\u30c7\u30fc\u30bf\u5206\u6790"},{"location":"boston/#_2","text":"\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u7c73\u56fd\u56fd\u52e2\u8abf\u67fb\u5c40\u304c\u53ce\u96c6\u3057\u305f\u60c5\u5831\u304b\u3089\u62bd\u51fa\uff06\u52a0\u5de5\u3057\u3066\u4f5c\u6210\u3055\u308c\u305f\u300c1970\u5e74\u4ee3\u5f8c\u534a\u306b\u304a\u3051\u308b\uff08\u7c73\u30de\u30b5\u30c1\u30e5\u30fc\u30bb\u30c3\u30c4\u5dde\uff09\u30dc\u30b9\u30c8\u30f3\u306e\u4f4f\u5b85\u4fa1\u683c\u300d\u306e\u8868\u5f62\u5f0f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002\u5c11\u3057\u53e4\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3001\u73fe\u4ee3\u3067\u306f\u554f\u984c\u306e\u3042\u308b\u30c7\u30fc\u30bf\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u7d71\u8a08\u51e6\u7406\u306e\u7df4\u7fd2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u5e83\u304f\u4f7f\u308f\u308c\u3066\u304d\u307e\u3057\u305f\u3002","title":"\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8"},{"location":"boston/#_3","text":"\u4eca\u56de\u3067\u6271\u3046\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306f\u3001CSV\u5f62\u5f0f\u3067\u4ee5\u4e0b\u306eURL\u306b\u304a\u3044\u3066\u3042\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306eURL https://KuramitsuLab.github.io/data/boston.csv Colab\u4e0a\u3067\u306f\u3001\u6b21\u306e\u901a\u308a\u3001 wget \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3048\u3070\u3001 URL\u3067\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u306e\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 ! wget https : // KuramitsuLab . github . io / data / boston . csv wget wget \u306f\u3001URL\u304b\u3089Web\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b UNIX\u30b3\u30de\u30f3\u30c9 \u3067\u3059\u3002 Colab\u4e0a\u3067\u306f\u3001 ! \u30de\u30fc\u30af\u3092\u5148\u982d\u306b\u3064\u3051\u308b\u3053\u3068\u3067\u3001UNIX\u30b3\u30de\u30f3\u30c9\u304c\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u306f\u3001\u6b63\u3057\u304f\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u308b\u3068\u3001 'boston.csv' \u3068\u3044\u3046\u540d\u524d\u3067\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u6b21\u306e head \u30b3\u30de\u30f3\u30c9\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u3092\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u78ba\u8a8d ! head boston . csv CSV\u30d5\u30a1\u30a4\u30eb\u3068\u306f CSV \u30d5\u30a1\u30a4\u30eb\u306f\u3001\u8868\u8a08\u7b97\u30bd\u30d5\u30c8(Excel)\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30c7\u30fc\u30bf\u51e6\u7406\u3057\u3084\u3059\u304f\u306a\u308b\u3088\u3046\u306b\u3001 \u30ab\u30f3\u30de\u533a\u5207\u308a\u5f62\u5f0f\u306e\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u51fa\u529b\u3057\u305f\u3082\u306e\u3067\u3059\u3002 \u5f53\u7136\u3001Excel \u7b49\u306e\u8868\u8a08\u7b97\u30bd\u30d5\u30c8\u3067\u3082\u958b\u3044\u3066\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\u3053\u306e\u3088\u3046\u306aCSV\u30d5\u30a1\u30a4\u30eb\u3092Python\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3046\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002","title":"\u30c7\u30fc\u30bf\u306e\u5165\u624b"},{"location":"boston/#pandas","text":"Python\u3092\u4f7f\u3063\u3066\u8868\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3068\u304d\u306f\u3001 pandas \u3068\u547c\u3070\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\uff08\u30e9\u30a4\u30d6\u30e9\u30ea\uff09\u3092\u4f7f\u3044\u307e\u3059\u3002 pandas\u306e\u6e96\u5099\uff08\u3053\u308c\u306f\u6c7a\u307e\u308a\u6587\u53e5\uff09 import pandas as pd \u3053\u308c\u3067\u3001Pandas \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3001 pd \u3068\u3044\u3046\u540d\u524d\u304b\u3089\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 pd \u306f\u6163\u7fd2\u7684\u306b\u4f7f\u308f\u308c\u308b\u77ed\u7e2e\u3055\u308c\u305f\u540d\u524d\u3067\u3059\u3002 pd. \u3068\u3044\u3046\u63a5\u982d\u8f9e\u304c\u3064\u3044\u305f\u95a2\u6570\u306f\u3001\u5168\u3066Pandas \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u3068\u306a\u308a\u307e\u3059\u3002","title":"Pandas"},{"location":"boston/#csv","text":"\u65e9\u901f\u3001Pandas\u3092\u4f7f\u3063\u3066\u3001\u5148\u7a0b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f 'boston.csv' \u3092\u8aad\u307f\u8fbc\u3093\u3067\u307f\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u3001CSV\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080 df = pd . read_csv ( 'boston.csv' ) \u3053\u3053\u3067\u306f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u306f\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u982d\u6587\u5b57\u306b\u7531\u6765\u3059\u308b df \u3068\u3044\u3046\u5909\u6570\u540d\u306b\u3057\u3066\u3044\u307e\u3059\u3002 \u5909\u6570\u540d\u3092\u3064\u3051\u3066\u304a\u304f\u3053\u3068\u3067\u3001\u5f8c\u304b\u3089\u5909\u6570\u540d\u3092\u901a\u3057\u3066\u30c7\u30fc\u30bf\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 Pandas \u3067\u306f\u3001\u8868\u30c7\u30fc\u30bf\u306e\u3053\u3068\u3092 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0(data frame) \u3068\u547c\u3073\u307e\u3059\u3002 \u3060\u304b\u3089\u3001\u982d\u6587\u5b57\u3092\u3068\u3063\u3066 df \u3068\u5909\u6570\u540d\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 pd.read_csv(filename) filename \u3067\u6307\u5b9a\u3055\u308c\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u8868\u30c7\u30fc\u30bf\uff08\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\uff09\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080","title":"CSV\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f"},{"location":"boston/#_4","text":"\u305d\u308c\u3067\u306f\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 df \u3092\u64cd\u4f5c\u3057\u3066\u3001\u5148\u982d\u306e\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5148\u982d\u3092\u898b\u308b df . head () \u5909\u6570\u540d\u3068\u30c9\u30c3\u30c8 . \u306b\u7d9a\u304f\u3001 head() \u306f\u3001 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 df \u3078\u306e\u64cd\u4f5c\u306e\u7a2e\u985e\u3092\u8868\u3057\u3001\u30e1\u30bd\u30c3\u30c9\u3068\u547c\u3070\u308c\u307e\u3059\u3002 df.head(10) : \u30e1\u30bd\u30c3\u30c9\u64cd\u4f5c\u306b\u304a\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059 df2.head() : \u5225\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 df2 \u3078\u306e\u30e1\u30bd\u30c3\u30c9\u64cd\u4f5c \u7121\u4e8b\u306b\u3001\u8868\u30c7\u30fc\u30bf\u306e\u5148\u982d\u884c\u304c\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3067\u3057\u3087\u3046\u304b\uff1f \u6b21\u306b\u7d39\u4ecb\u3059\u308bhead\u4ee5\u5916\u306e\u30e1\u30bd\u30c3\u30c9\u3082\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u78ba\u8a8d Pandas \u3067\u306f\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\u305d\u306e\u3068\u304d\u3001\u305d\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u6b21\u306e\u30e1\u30bd\u30c3\u30c9\u3082\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u78ba\u8a8d\u306b\u3088\u304f\u7528\u3044\u3089\u308c\u307e\u3059\u3002 \u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30b3\u30fc\u30c9 \u4f8b df.head(10) df \u306e\u5148\u982d\u306e10\u884c\u3092\u5f97\u308b df.tail() df \u306e\u672b\u5c3e\u3092\u5f97\u308b df.sample(10) df \u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b10\u884c\u53d6\u308a\u51fa\u3059","title":"\u30e1\u30bd\u30c3\u30c9\u64cd\u4f5c\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u78ba\u8a8d"},{"location":"boston/#python","text":"Python\u306a\u3069\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f\u3001\u81ea\u7136\u8a00\u8a9e\u3068\u306f\u7570\u306a\u308a\u3001\u53b3\u5bc6\u306a\u6587\u6cd5\u3068\u89e3\u91c8\u304c\u6c7a\u307e\u3063\u3066\u3044\u307e\u3059\u3002 \u5c11\u3057\u3067\u3082\u66f8\u304d\u65b9\u306e\u30eb\u30fc\u30eb\u304b\u3089\u5916\u308c\u308b\u3068\u3001\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002 \u3053\u3053\u3067\u306f\u3001Python\u521d\u5fc3\u8005\u304c\u3088\u304f\u3064\u307e\u305a\u304f\u30a8\u30e9\u30fc\u3092\u898b\u306a\u304c\u3089\u3001\u30a8\u30e9\u30fc\u5bfe\u5fdc\u3092\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u30a8\u30e9\u30fc\u306e\u4f8b(\u3069\u3053\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff09 pd , read_csv ( 'boston.csv' ) NameError Traceback (most recent call last) <ipython-input-22-f721058e7565> in <module>() ----> 1 df = pd,read_csv('boston.csv') 2 df.head() NameError: name 'read_csv' is not defined \u539f\u56e0: \u30b3\u30ed\u30f3 . \u3068 \u30ab\u30f3\u30de , \u3092\u6253\u3061\u9593\u9055\u3048\u3066\u3044\u308b\u3002\u30ab\u30f3\u30de , \u306f\u533a\u5207\u308a\u306b\u4f7f\u308f\u308c\u308b\u306e\u3067\u3001 . \u3068\u306f\u9055\u3046\u610f\u5473\u306b\u306a\u308b\u3002 \u30a8\u30e9\u30fc\u306e\u4f8b(\u3069\u3053\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff09 pd . read_csv ( 'boston.csv ' ) FileNotFoundError Traceback (most recent call last) <ipython-input-21-3226a7d916fa> in <module>() ----> 1 df = pd.read_csv('boston.csv ') FileNotFoundError: [Errno 2] No such file or directory: 'boston.csv ' \u539f\u56e0: 'boston.csv ' \u306e\u6700\u5f8c\u306b\u4f59\u5206\u306a\u7a7a\u767d\u304c\u5165\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u9055\u3063\u3066\u3044\u308b\u3002 \u30a8\u30e9\u30fc\u306b\u306f\u3001\u5fc5\u305a\u539f\u56e0\u304c\u3042\u308a\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u529b\u3068\u306f\u3001\u539f\u56e0\u3092\u5206\u6790\u3057\u3066\u3001\u30a8\u30e9\u30fc\u3092\u53d6\u308a\u9664\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u80fd\u529b\u3068\u3082\u3044\u3048\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u6163\u308c\u308b\u306b\u306f \u81ea\u5206\u3067\u30bf\u30a4\u30d4\u30f3\u30b0\u3057\u306a\u304c\u3089\u5165\u529b\u3059\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u69cb\u6587\u3084\u30bb\u30f3\u30b9\u3082\u8eab\u306b\u3064\u3044\u3066\u3044\u304d\u307e\u3059\u3002","title":"Python \u3068\u30a8\u30e9\u30fc\u5bfe\u5fdc"},{"location":"boston/#_5","text":"\u30c7\u30fc\u30bf\u5206\u6790\u306f\u3001 \u5404\u30ab\u30e9\u30e0\uff08\u30c7\u30fc\u30bf\u5217\uff09\u3092\u7406\u89e3\u3059\u308b \u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u307e\u3059\u3002 \u3082\u3046\u4e00\u5ea6\u3001\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u4eca\u5ea6\u306f\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u306b\u7740\u76ee df.head() \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 crim '\u72af\u7f6a' : \u4eba\u53e31\u4eba\u5f53\u305f\u308a\u306e\u72af\u7f6a\u767a\u751f\u6570 zn '\u81ea\u7136' : 25000\u5e73\u65b9\u30d5\u30a3\u30fc\u30c8\u4ee5\u4e0a\u306e\u5c45\u4f4f\u533a\u9593\u306e\u5360\u3081\u308b\u5272\u5408 indus '\u5de5\u5834' : \u5c0f\u58f2\u696d\u4ee5\u5916\u306e\u7523\u696d\u304c\u5360\u3081\u308b\u9762\u7a4d\u306e\u5272\u5408 chas '\u5ddd\u8fd1' : \u30c1\u30e3\u30fc\u30eb\u30ba\u5ddd\u306b\u3088\u308b\u30c0\u30df\u30fc\u5909\u6570\uff081\uff1a\u5ddd\u306e\u5468\u8fba\uff0c0\uff1a\u305d\u308c\u4ee5\u5916\uff09 nox '\u5927\u6c17\u6c5a\u67d3' : NOx\u306e\u6fc3\u5ea6 rm '\u90e8\u5c4b\u6570' : \u4f4f\u5c45\u306e\u5e73\u5747\u90e8\u5c4b\u6570 age '\u7bc9\u5e74' : 1940\u5e74\u3088\u308a\u524d\u306b\u5efa\u3066\u3089\u308c\u305f\u7269\u4ef6\u306e\u5272\u5408 dis '\u901a\u52e4' : \u30dc\u30b9\u30c8\u30f3\u306e\u4e3b\u306a\u8077\u5834\u307e\u3067\u306e\u8ddd\u96e2 rad '\u4ea4\u901a' : \u5e79\u7dda\u9053\u8def\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306e\u3057\u3084\u3059\u3055 tax '\u8cc7\u7523\u7a0e' : \uff0410,000\u30c9\u30eb\u3042\u305f\u308a\u306e\u4e0d\u52d5\u7523\u7a0e\u7387\u306e\u7dcf\u8a08 ptratio '\u6559\u54e1\u6bd4' : \u5150\u7ae5\u3068\u6559\u5e2b\u306e\u6bd4\u7387 black '\u9ed2\u4eba' : \u30a2\u30d5\u30ea\u30ab\u7cfb\u30a2\u30e1\u30ea\u30ab\u4eba\u5c45\u4f4f\u8005\u306e\u5272\u5408 lstat '\u4f4e\u6240\u5f97' : \u7d66\u4e0e\u306e\u4f4e\u3044\u8077\u696d\u306b\u5f93\u4e8b\u3059\u308b\u4eba\u53e3\u306e\u5272\u5408 medv '\u4f4f\u5b85\u4fa1\u683c' : \u4f4f\u5b85\u4fa1\u683c (\u6240\u6709\u8005\u304c\u5360\u6709\u3057\u3066\u3044\u308b\u5bb6\u5c4b\u306e\uff041000\u5358\u4f4d\u306e\u4e2d\u592e\u5024) \u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001 crim \u306e\u3088\u3046\u306b\u82f1\u8a9e\u3067\u5217\u540d\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u672c\u8b1b\u7fa9\u3067\u306f\u3001\u3088\u308a\u76f4\u611f\u7684\u306b\u30c7\u30fc\u30bf\u5206\u6790\u3057\u3084\u3059\u3044\u3088\u3046\u306b '\u72af\u7f6a' \u306e\u3088\u3046\u306b\u548c\u8a33\u306b\u5909\u3048\u3066\u3042\u308a\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u5c11\u3057\u610f\u8a33\u3057\u3066\u3042\u308b\u306e\u3067\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306a\u30c7\u30fc\u30bf\u306e\u610f\u56f3\u3068\u5c11\u3057\u9055\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","title":"\u30c7\u30fc\u30bf\u5206\u6790\u306e\u7b2c\u4e00\u6b69"},{"location":"boston/#_6","text":"\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u3082\u3068\u3082\u30681970\u5e74\u4ee3\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002 \u73fe\u5728\u306e\u5e38\u8b58\u304b\u3089\u8003\u3048\u308b\u3068\u76f8\u5fdc\u3057\u304f\u306a\u3044\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001 '\u9ed2\u4eba' \u306a\u3069\u306e\u30c7\u30fc\u30bf\u5217\u306f\u5dee\u5225\u306b\u3064\u306a\u304c\u308b\u305f\u3081\u3001\u76f8\u5fdc\u3057\u3044\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u4eba\u5de5\u77e5\u80fd\u306e\u516c\u5e73\u6027\uff08Fairness) \u4e0d\u516c\u5e73\u306a\u30d0\u30a4\u30a2\u30b9\u306b\u57fa\u3065\u304d\u5b66\u7fd2\u3057\u305f\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u304c\u4e0d\u5f53\u306a\u5dee\u5225\uff08\u4eba\u7a2e\u5dee\u5225\uff0f\u6c11\u65cf\u5dee\u5225\u3084\u3001\u6027\u5225\u5dee\u5225\u3001\u6587\u5316\u5dee\u5225\uff0f\u5730\u57df\u5dee\u5225\u306a\u3069\uff09\u3092\u5f15\u304d\u8d77\u3055\u306a\u3044\u3088\u3046\u306b\u4e0d\u516c\u5e73\u306a\u30d0\u30a4\u30a2\u30b9\u3092\u6392\u9664\u3059\u308b\u3053\u3068 \u3053\u306e\u3088\u3046\u306a\u5dee\u5225\u306b\u3064\u306a\u304c\u308b\u30c7\u30fc\u30bf\u306f\u3001\u524a\u9664\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u6b21\u306e\u3088\u3046\u306b drop \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30fc\u30bf\u3092\u524a\u9664\u3067\u304d\u307e\u3059\u3002 `\u9ed2\u4eba`\u306e\u30c7\u30fc\u30bf\u5217\u3092\u524a\u9664\u3059\u308b df.drop('\u9ed2\u4eba', axis=1, inplace=True) df.head() \u3053\u3053\u304b\u3089\u5148\u306f\u300113\u30ab\u30e9\u30e0\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u5bfe\u8c61\u306b\u30c7\u30fc\u30bf\u5206\u6790\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002","title":"\u30c7\u30fc\u30bf\u306e\u516c\u5e73\u6027\u3068\u4fee\u6b63"},{"location":"boston/#_7","text":"Pandas \u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u3092\u5b9f\u969b\u306b\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u306a\u304c\u3089\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 Pandas\u306e\u57fa\u672c\u64cd\u4f5c\u306f\u3001\u300c \u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3059\u64cd\u4f5c \u300d\u306b\u306a\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 df \u304b\u3089\u3001 '\u4f4f\u5b85\u4fa1\u683c' \u5217\u306e\u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044\u3068\u304d\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u66f8\u304d\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5217 '\u4f4f\u5b85\u4fa1\u683c' \u3092\u53d6\u308a\u51fa\u3059 \u30c7\u30fc\u30bf\u5217`'\u4f4f\u5b85\u4fa1\u683c'`\u3092\u3068\u308a\u3060\u3059 df [ '\u4f4f\u5b85\u4fa1\u683c' ] 0 24.0 1 21.6 2 34.7 3 33.4 4 36.2 ... 501 22.4 502 20.6 503 23.9 504 22.0 505 11.9 Name: \u4fa1\u683c, Length: 506, dtype: float64 \u30de\u30c3\u30d4\u30f3\u30b0 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306f\u3001\u5217\u540d\u306b\u5bfe\u3059\u308b\u30de\u30c3\u30d4\u30f3\u30b0\uff08\u8f9e\u66f8\u306e\u3088\u3046\u306a\u3082\u306e)\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 df['\u4f4f\u5b85\u4fa1\u683c'] \u306e '\u4f4f\u5b85\u4fa1\u683c' \u306e\u6587\u5b57\u5217\u3092\u5909\u66f4\u3059\u308b\u3068\u3001\u6307\u5b9a\u3057\u305f\u5225\u306e\u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u30c7\u30fc\u30bf\u5217\u306e\u62bd\u51fa"},{"location":"boston/#_8","text":"Python \u3092\u4f7f\u3044\u3053\u306a\u3059\u305f\u3081\u306b\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u578b\u3067\u5024\u304c\u5f97\u3089\u308c\u3066\u3044\u308b\u304b\u77e5\u308b\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002 \u306a\u305c\u306a\u3089\u3001\u30c7\u30fc\u30bf\u578b\u306b\u3088\u3063\u3066\u3001\u64cd\u4f5c\u3067\u304d\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u7a2e\u985e\u304c\u7570\u306a\u308b\u304b\u3089\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u5217\u306f\u3001 Series \u3068\u547c\u3070\u308c\u308b pandas \u306e\u30c7\u30fc\u30bf\u578b\u3067\u5f97\u3089\u308c\u307e\u3059\u3002 df['\u4f4f\u5b85\u4fa1\u683c']\u306e\u578b\u3092\u8abf\u3079\u308b type ( df [ '\u4f4f\u5b85\u4fa1\u683c' ]) pandas.core.series.Series Series\u306f\u3001\uff08\u7c21\u5358\u306b\u8a00\u3048\u3070\uff09\u5358\u4e00\u5217\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u3059\u3002 \u305f\u3060\u3057\u3001Pandas \u306b\u6163\u308c\u3066\u3044\u306a\u3044\u3046\u3061\u306f\u3001Python\u306e\u30ea\u30b9\u30c8\u3084 NumPy\u306e\u914d\u5217\u306a\u3069\u306e \u4f7f\u3044\u6163\u308c\u305f\u30c7\u30fc\u30bf\u5217 \u3067\u53d6\u308a\u51fa\u305b\u305f\u65b9\u304c\u4fbf\u5229\u3067\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u5217\u306e\u578b\u3092\u5909\u63db\u3057\u3066\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 NumPy\u306e\u914d\u5217\u3068\u3057\u3066\u3001\u30c7\u30fc\u30bf\u5217\u3092\u5f97\u308b df [ '\u4f4f\u5b85\u4fa1\u683c' ] . values array([24. , 21.6, 34.7, 33.4, 36.2, 28.7, 22.9, 27.1, ...]) \u30ea\u30b9\u30c8\u3068\u3057\u3066\u3001\u30c7\u30fc\u30bf\u5217\u3092\u5f97\u308b df [ '\u4f4f\u5b85\u4fa1\u683c' ] . values . tolist () [24.0, 21.6, 34.7, 33.4, 36.2, 28.7, 22.9, 27.1, ... ] \u77e5\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u578b\u3092\u5897\u3084\u305d\u3046 \u81ea\u5206\u306e\u3088\u304f\u77e5\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u578b\u304c\u591a\u304f\u3042\u308b\u3068\u3001 \u5909\u63db\u3057\u3066\u3069\u3093\u3069\u3093\u30d7\u30ed\u30b0\u30e9\u30e0\u51e6\u7406\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u30c7\u30fc\u30bf\u5217\u3068\u7a2e\u985e\u2605"},{"location":"boston/#_9","text":"\u6570\u5024\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u306f\u3001 \u7d71\u8a08\u7684\u306a\u30c7\u30fc\u30bf\u306e\u6563\u3089\u3070\u308a \u3067\u8a18\u8ff0\u3055\u308c\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3057\u3066\u773a\u3081\u3066\u3044\u308b\u3060\u3051\u3067\u306f\u3001\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u63b4\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 describe() \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3084\u30c7\u30fc\u30bf\u5217\u306b\u5bfe\u3057\u3066\u3001\u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u308b\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002 \u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u306e\u3053\u3068\u3092 \u8981\u7d04\u7d71\u8a08\u91cf \u3068\u3082\u8a00\u3044\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5217 '\u4f4f\u5b85\u4fa1\u683c' \u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u5f97\u308b df [ '\u4f4f\u5b85\u4fa1\u683c' ] . describe () \u5b9f\u884c\u7d50\u679c count 506.000000 mean 22.532806 std 9.197104 min 5.000000 25% 17.025000 50% 21.200000 75% 25.000000 max 50.000000 \u5404\u9805\u76ee\u306e\u610f\u5473 count : \u30c7\u30fc\u30bf\u6570 mean : \u5e73\u5747\u5024 std : \u6a19\u6e96\u504f\u5dee min : \u4e0b\u4f4d25%\u76ee\u306e\u5024\uff08\u7b2c\u4e00\u56db\u5206\u4f4d\u70b9\uff09 50% : \u4e2d\u592e\u5024 75% : \u4e0a\u4f4d25%\u76ee\u306e\u5024\uff08\u7b2c\u4e09\u56db\u5206\u4f4d\u70b9\uff09 max : \u6700\u5927\u5024 \u7d71\u8a08\u7684\u306b\u30c7\u30fc\u30bf\u5024\u306e\u6563\u3089\u3070\u308a\u3092\u898b\u308b\u3068\u304d\u306f\u3001 \u6b63\u898f\u5206\u5e03 \u304c\u5927\u5207\u306b\u306a\u308a\u307e\u3059\u3002 \uff08\u6b63\u898f\u5206\u5e03\u3092\u4eee\u5b9a\u3059\u308b\u3068\uff09 \u30c7\u30fc\u30bf\u306e\u6563\u3089\u3070\u308a\u306f\u3001\u5e73\u5747\u3068\u6a19\u6e96\u504f\u5dee\u3067\u5206\u5e03\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30c7\u30fc\u30bf\u5024\u306e90%\u306f\u3001\u5e73\u5747\u5024\u304b\u3089\u6a19\u6e96\u504f\u5dee\u306e\u7bc4\u56f2\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3068\u898b\u306a\u305b\u307e\u3059\u3002 \uff08\u6b63\u898f\u5206\u5e03\u304b\u3089\u5927\u304d\u304f\u5916\u308c\u308b\u3068\uff09 \u5206\u5e03\u306e\u975e\u5bfe\u79f0\u6027\u3084\u5916\u308c\u5024\u304b\u3089\u5f71\u97ff\u3092\u53d7\u3051\u306b\u304f\u3044\u4e2d\u592e\u5024\u3001\u56db\u5206\u4f4d\u70b9\u3001\u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u306a\u3069\u306e\u5024\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002 \u6b63\u898f\u5206\u5e03\u304b\u3089\u306e\u305a\u308c\u3092\u77e5\u308b\u305f\u3081\u306b\u306f\u3001\u5c16\u5ea6\u3084\u6b6a\u5ea6\u306a\u3069\u306e\u9ad8\u6b21\u30e2\u30fc\u30e1\u30f3\u30c8\u304b\u3089\u6c42\u3081\u3089\u308c\u308b\u7d71\u8a08\u91cf\u304c\u3042\u308a\u307e\u3059\u3002 \u6b6a\u5ea6(Skewness) \u5206\u5e03\u306e\u975e\u5bfe\u79f0\u6027\u3092\u793a\u3059\u6307\u6a19\u3002\u5024\u304c\u6b63\u3067\u3042\u308b\u3068\u5206\u5e03\u304c\u53f3\u306b\u4f38\u3073\u3066\u3044\u308b\u3002\u9006\u306b\u8ca0\u3067\u3042\u308b\u3068\u5de6\u306b\u4f38\u3073\u3066\u3044\u308b\u3002 \u5c16\u5ea6(Kurtosis) \u6b63\u898f\u5206\u5e03\u3092\u57fa\u6e96\u3068\u3057\u305f\u5206\u5e03\u306e\u92ed\u3055\u306e\u6307\u6a19\u3002\u57fa\u6e96\u3067\u3042\u308b\u6b63\u898f\u5206\u5e03\u306e\u5c16\u5ea6\u3088\u308a\u3082\u5927\u304d\u3051\u308c\u3070\u5206\u5e03\u306f\u5c16\u3063\u3066\u304a\u308a\u3001\u5c0f\u3055\u3051\u308c\u3070\u7de9\u3084\u304b\u306a\u5206\u5e03\u3067\u3042\u308b\u3002 Let's try: \u500b\u3005\u306e\u7d71\u8a08\u91cf\u3092\u5f97\u308b describe() \u30e1\u30bd\u30c3\u30c9\u306f\u3001\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u307e\u3068\u3081\u3066\u51fa\u529b\u3057\u3066\u304f\u308c\u307e\u3057\u305f\u304c\u3001 \u500b\u3005\u306e\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u308b\u30e1\u30bd\u30c3\u30c9\u3082\u3042\u308a\u307e\u3059\u3002\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30e1\u30bd\u30c3\u30c9 \u4f8b df['A'].count() 'A' \u5217\u306e\u30c7\u30fc\u30bf\u4ef6\u6570 df['A'].mean() 'A' \u5217\u306e\u5e73\u5747\u5024 df['A'].std() 'A' \u5217\u306e\u6a19\u6e96\u504f\u5dee df['A'].max() 'A' \u5217\u306e\u6700\u5927\u5024 df['A'].min() 'A' \u5217\u306e\u6700\u5c0f\u5024 df['A'].median() 'A' \u5217\u306e\u4e2d\u592e\u5024 df['A'].mode() 'A' \u5217\u306e\u6700\u983b\u5024 df['A'].skew() 'A' \u5217\u306e\u6b6a\u5ea6 df['A'].kurt() 'A' \u5217\u306e(Fisher\u306e\u5b9a\u7fa9\u306b\u3088\u308b)\u5c16\u5ea6","title":"\u8981\u7d04\u7d71\u8a08\u91cf: \u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u63b4\u3080"},{"location":"boston/#_10","text":"\u30c7\u30fc\u30bf\u5217\u306e\u7279\u5fb4\u306f\u3001\u6570\u5217\u3084\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u898b\u3066\u3044\u3066\u3082\u3001\u76f4\u611f\u7684\u306b\u50be\u5411\u3092\u3064\u304b\u3081\u307e\u305b\u3093\u3002 \u4e00\u65b9\u3001\u6b21\u306e\u56f3\u306f\u3001\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u6b63\u898f\u5206\u5e03\u3092\u4eee\u5b9a\u3057\u305f\u8fd1\u4f3c\u66f2\u7dda\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u305f\u4f8b\u3067\u3059\u3002 \u3053\u306e\u3088\u3046\u306b\u30b0\u30e9\u30d5\u306b\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u30c7\u30fc\u30bf\u306f\u7406\u89e3\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 Python \u3067 \u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\uff08\u30e2\u30b8\u30e5\u30fc\u30eb\uff09\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 matplotlib : \u5b9a\u756a\uff08\u3068\u3044\u3046\u304b\u5fc5\u9808\uff09 seaborn : \u3088\u308a\u7dba\u9e97\u306a\u30b0\u30e9\u30d5\u304c\u66f8\u3051\u308b \u3053\u308c\u3089\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3001\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u524d\u306b\u306f\u5fc5\u305a\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\u3002 matplotlib,seaborn\u306e\u6e96\u5099 import matplotlib.pyplot as plt import seaborn as sns try : import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError : import os os . system ( 'pip3 install japanize_matplotlib' ) import japanize_matplotlib sns . set ( font = \"IPAexGothic\" ) #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a \u65e5\u672c\u8a9e\u306e\u6587\u5b57\u5316\u3051\u3092\u907f\u3051\u308b\u306b\u306f\uff1f Matplotlib\u3084seaborn\u306f\u3001\u6d77\u5916\u3067\u958b\u767a\u3055\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u306e\u3067\u3001\u65e5\u672c\u8a9e\u8868\u793a\u304c\u6587\u5b57\u5316\u3051\u3057\u307e\u3059\u3002 \u30b0\u30e9\u30d5\u4e0a\u306b\u65e5\u672c\u8a9e\u3092\u8868\u793a\u3057\u305f\u3044\u3068\u304d\u306f\u3001 japanize_matplotlib \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u7528\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316"},{"location":"boston/#_11","text":"\u307e\u305a\u3001\u7bb1\u3072\u3052\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6700\u8fd1\u306f\u5c0f\u5b66\u751f\u306e\u3068\u304d\u306b\u7fd2\u3046\u3089\u3057\u3044\u306e\u3067\u3001\u7686\u3055\u3093\u304a\u306a\u3058\u307f\u3067\u3057\u3087\u3046\u3002 Pandas \u3067\u7bb1\u3072\u3052\u56f3\u3092\u63cf\u753b\u3059\u308b\u3068\u304d\u306f\u3001 plt.boxplot() \u306b\u63cf\u753b\u3057\u305f\u3044\u30c7\u30fc\u30bf\u5217\u3092\u5f15\u6570\u3067\u4e0e\u3048\u307e\u3059\u3002 `'\u4f4f\u5b85\u4fa1\u683c'`\u306e\u7bb1\u3072\u3052\u56f3 plt . boxplot ( df [ '\u4f4f\u5b85\u4fa1\u683c' ]) plt . show () \u30b0\u30e9\u30d5\u306e\u898b\u65b9 \u56db\u89d2\u306e\u90e8\u5206\u306f\u3001\u56db\u5206\u4f4d\u7bc4\u56f2\u3092\u8868\u3057\u3001 \u7bb1 \u3068\u547c\u3070\u308c\u307e\u3059\u3002 \u7bb1\u306e\u4e0a\u7dda\u304c\u4e0a\u4f4d25%\u3001\u7bb1\u306e\u4e0b\u7dda\u304c\u4e0b\u4f4d25%\u3001\u30aa\u30ec\u30f3\u30b8\u306e\u6a2a\u7dda\u304c\u4e2d\u592e\u5024\u3092\u8868\u3057\u307e\u3059\u3002\uff08\u30c7\u30fc\u30bf\u306e\u534a\u5206\u304c\u3053\u306e\u7bc4\u56f2\u306b\u3042\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\uff09 \u56db\u5206\u4f4d\u7bc4\u56f2\u306e1.5\u500d\u4ee5\u4e0a\u3001\u96e2\u308c\u305f\u70b9\u306f \u5916\u308c\u5024 \u3068\u307f\u306a\u3057\u3001\u25cb\u3067\u30d7\u30ed\u30c3\u30c8\u3055\u308c\u307e\u3059\u3002 \u5916\u308c\u5024\u3067\u306a\u3044\u6700\u3082\u5916\u5074\u306e\u70b9\u304c \u3072\u3052 \u3068\u306a\u308a\u307e\u3059\u3002(\u3072\u3052\u306f\u3001\u53b3\u5bc6\u306b\u306f\u6700\u5927\u5024\u3001\u6700\u5c0f\u5024\u3092\u8868\u3059\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002) \u5916\u308c\u5024\u306e\u767a\u751f\u983b\u5ea6\u306f\uff1f \u6b63\u898f\u5206\u5e03\u3067\u3042\u308b\u5834\u5408\u3001\u7bb1\u3072\u3052\u56f3\u306b\u304a\u3051\u308b\u5916\u308c\u5024(1.5\u500d)\u3068\u306f0.8%\u306e\u78ba\u7387\u3067\u3057\u304b\u767a\u751f\u3057\u306a\u3044\u7a00\u306a\u30c7\u30fc\u30bf\u3068\u306a\u308a\u307e\u3059\u3002 plt.boxplot(\u30c7\u30fc\u30bf\u5217) \u30c7\u30fc\u30bf\u5217\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u305d\u306e\u7bb1\u3072\u3052\u56f3\u3092\u63cf\u753b\u3059\u308b","title":"\u7bb1\u3072\u3052\u56f3"},{"location":"boston/#_12","text":"\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u3001\u7e26\u8ef8\u306b\u5ea6\u6570\u3001\u6a2a\u8ef8\u306b\u968e\u7d1a\u3092\u3068\u308a\u3001 \u30c7\u30fc\u30bf\u306e\u5206\u5e03\u72b6\u6cc1\u3092\u8996\u899a\u7684\u306b\u8a8d\u8b58\u3059\u308b\u305f\u3081\u306e\u5b9a\u756a\u30b0\u30e9\u30d5\u3067\u3059\u3002 Pandas \u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3059\u308b\u3068\u304d\u306f\u3001 plt.hist() \u306b\u63cf\u753b\u3057\u305f\u3044\u30c7\u30fc\u30bf\u5217\u3092\u5f15\u6570\u3067\u4e0e\u3048\u307e\u3059\u3002 '\u4f4f\u5b85\u4fa1\u683c'\u5217\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 plt . hist ( df [ '\u4f4f\u5b85\u4fa1\u683c' ]) plt . show () plt.hist(x)\u3067\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u63cf\u753b\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3046\u3002\u30d3\u30f3\uff08\u8868\u793a\u3059\u308b\u68d2\u306e\u6570\u3001\u968e\u7d1a\u6570\uff09\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff08\u4f55\u3082\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306e\u521d\u671f\u5024\uff09\u3067\u306f10\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001 bins=20 \u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30d3\u30f3\u3092\u6307\u5b9a plt . hist ( df [ '\u4f4f\u5b85\u4fa1\u683c' ], bins = 20 ) plt . show () \u7dba\u9e97\u306a\u30b0\u30e9\u30d5\u3092\u66f8\u304f\u305f\u3081\u306b\u306f\uff1f Matplotlib\u3084seaborn\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Google \u306a\u3069\u3067\u3001\u30b0\u30e9\u30d5\u306e\u66f8\u304d\u65b9\u3092\u3069\u3093\u3069\u3093\u8abf\u3079\u3066\u3001\u81ea\u5206\u306e\u6c42\u3081\u3066\u3044\u308b\u30b0\u30e9\u30d5\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u53c2\u8003\u8cc7\u6599 * https://pythondatascience.plavox.info/matplotlib/\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 plt.hist(\u30c7\u30fc\u30bf\u5217) \u30c7\u30fc\u30bf\u5217\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3059\u308b","title":"\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0"},{"location":"boston/#_13","text":"\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089 '\u4f4f\u5b85\u4fa1\u683c' \u4ee5\u5916\u306e\uff13\u3064\u306e\u30c7\u30fc\u30bf\u5217\u3092\u9078\u3093\u3067\u307f\u3088\u3046\u3002 \u9078\u3093\u3060\u30c7\u30fc\u30bf\u5217\u3092\u6570\u5024\u306e\u30ea\u30b9\u30c8\uff08\u914d\u5217\uff09\u3068\u3057\u3066\u62bd\u51fa\u3057\u3066\u307f\u3088\u3046 \u9078\u3093\u3060\u30c7\u30fc\u30bf\u5217\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u3066\u307f\u308b \u9078\u3093\u3060\u30c7\u30fc\u30bf\u5217\u306e\u7bb1\u30d2\u30b2\u56f3\u3092\u63cf\u753b\u3057\u3066\u307f\u308b \u9078\u3093\u3060\u30c7\u30fc\u30bf\u5217\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3057\u3066\u307f\u308b \u9078\u3093\u3060\u30c7\u30fc\u30bf\u5217\u304c\u6b63\u898f\u90e8\u5206\u306b\u3057\u305f\u304c\u3046\u304b\u5f93\u308f\u306a\u3044\u304b\u8003\u3048\u3066\u307f\u3088\u3046","title":"\u6f14\u7fd2\u554f\u984c"},{"location":"boston/#_14","text":"\u3055\u3066\u3001\u8208\u5473\u306e\u3042\u308b\u5b66\u751f\u306e\u305f\u3081\u3001 \u53ef\u8996\u5316\u306e\u5192\u982d\u3067\u7d39\u4ecb\u3057\u305f\u6b63\u898f\u5206\u5e03\u306e\u8fd1\u4f3c\u66f2\u7dda\u3068\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u5408\u308f\u305b\u308b\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6b63\u898f\u5206\u5e03\u306e\u8fd1\u4f3c\u66f2\u7dda\u3092\u63cf\u753b\u3059\u308b\u305f\u3081\u306b\u306f\u3001 \u78ba\u7387\u5bc6\u5ea6\u95a2\u6570(probability density function)\u3092\u4f7f\u3044\u307e\u3059\u3002 pdf(x) = \\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^2}{2}} \u3053\u306e\u95a2\u6570\u306f\u3001SciPy \u30e2\u30b8\u30e5\u30fc\u30eb\u306e scipy.stats.norm.pdf() \u306b\u3042\u308a\u307e\u3059\u3002 plt.plot(x, y) \u306f\u3001\u7dda\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u95a2\u6570\u3067\u3059\u3002 from scipy.stats import norm x = np . linspace ( - 5 , 5 , 100 ) # \u533a\u9593[-5,5]\u3092100\u7b49\u5206\u3059\u308b y = norm . pdf ( x ) # \u78ba\u7387\u5bc6\u5ea6\u95a2\u6570 plt . plot ( x , y ) plt . show () \u30c7\u30fc\u30bf\u5217 '\u4f4f\u5b85\u4fa1\u683c' \u306e\u6700\u5927\u5024\u3001\u6700\u5c0f\u5024\u3001\u5e73\u5747\u5024\u3001\u6a19\u6e96\u504f\u5dee\u304b\u3089\u30b9\u30b1\u30fc\u30eb\u3092\u8abf\u6574\u3057\u307e\u3059\u3002 \u305d\u3057\u3066\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3068: bins = 20 k = ( df [ '\u4f4f\u5b85\u4fa1\u683c' ] . max () - df [ '\u4f4f\u5b85\u4fa1\u683c' ] . min ()) / bins # \u533a\u9593\u5e45 x = np . linspace ( df [ '\u4f4f\u5b85\u4fa1\u683c' ] . min (), df [ '\u4f4f\u5b85\u4fa1\u683c' ] . max (), 100 ) y = norm . pdf ( x , df [ '\u4f4f\u5b85\u4fa1\u683c' ] . mean (), df [ '\u4f4f\u5b85\u4fa1\u683c' ] . std ()) * len ( df [ '\u4f4f\u5b85\u4fa1\u683c' ]) * k plt . hist ( df [ '\u4f4f\u5b85\u4fa1\u683c' ], bins = bins ) # \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 plt . plot ( x , y , linestyle = '--' ) # \u78ba\u7387\u5bc6\u5ea6\u95a2\u6570 plt . show ()","title":"(\u304a\u307e\u3051\uff09 \u6b63\u898f\u5206\u5e03\u306e\u8fd1\u4f3c\u76f4\u7dda\uff08\u2605\uff09"},{"location":"boston/#2-shapiro-wilk-test","text":"\u6b63\u898f\u6bcd\u96c6\u56e3\uff08\uff1d\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u6bcd\u96c6\u56e3\uff09\u304b\u3089\u7121\u4f5c\u70ba\u306b\u591a\u6570\u306e\u6a19\u672c\u3092\u62bd\u51fa\u3059\u308b\u3068\u3001\u305d\u306e\u6a19\u672c\u306e\u5206\u5e03\u3082\u307e\u305f\u6b63\u898f\u5206\u5e03\u306b\u306a\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002 \u3088\u3063\u3066\u3001\u6b63\u898f\u6027\u306f\u3001\u5404\u6a19\u672c\uff08\u5404\u7fa4\u306e\u30c7\u30fc\u30bf\u306b\uff09\u306b\u3064\u3044\u3066\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u3001\u305d\u306e\u5f62\u72b6\u304b\u3089\u5224\u65ad\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6a19\u672c\u306f\u3001\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u6bcd\u96c6\u56e3\u304b\u3089\u7121\u4f5c\u70ba\u62bd\u51fa\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u300d\u3092\u5e30\u7121\u4eee\u8aac\u3068\u3057\u3066\u3001\u6b63\u898f\u5206\u5e03\u3092\u5224\u5b9a\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002 \u7279\u306b\u3001\u30c7\u30fc\u30bf\u6570\u304c1000\u4ee5\u4e0b\u306e\u6709\u52b9\u3068\u3055\u308c\u307e\u3059\u3002 Python \u3067\u306f\u3001SciPy\u30e2\u30b8\u30e5\u30fc\u30eb\u306e shapiro \u95a2\u6570\u3067\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 '\u4f4f\u5b85\u4fa1\u683c'\u5217\u306e\u30b7\u30e3\u30d4\u30ed\u30fb\u30a6\u30a3\u30eb\u30af\u691c\u5b9a from scipy.stats import shapiro print ( shapiro ( df [ '\u4f4f\u5b85\u4fa1\u683c' ])) (0.9171748757362366, 4.940195786292171e-16) \u691c\u5b9a\u7d71\u8a08\u91cf\u3068p\u5024\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001p\u5024\u304c\u6709\u610f\u6c34\u6e96(0.05)\u3088\u308a\u5c0f\u3055\u3044\u304b\u3069\u3046\u304b\u898b\u307e\u3059\u3002 `df['\u4f4f\u5b85\u4fa1\u683c'])\u306f\u30010.05\u3088\u308a\u5c0f\u3055\u3044\u306e\u3067\u3001\u300c\u6b63\u898f\u5206\u5e03\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u4eee\u8aac\u304c\u68c4\u5374\u3055\u308c\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u300c\u6b63\u898f\u8868\u73fe\u3068\u8a00\u3048\u306a\u3044\u300d\u6bcd\u96c6\u56e3\u3068\u306a\u308a\u307e\u3059\u3002","title":"\uff08\u304a\u307e\u3051\uff12\uff09 \u30b7\u30e3\u30d4\u30ed\u30fb\u30a6\u30a3\u30eb\u30af\u691c\u5b9a(Shapiro-Wilk test)"},{"location":"boston2/","text":"\u6563\u5e03\u56f3\u3068\u76f8\u95a2\u4fc2\u6570 # \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001\u5358\u4e00\u306e\u30c7\u30fc\u30bf\u5217\u306e\u6563\u3089\u3070\u308a\u3088\u308a\u3082\u3001 \uff12\u3064\u306e\u30c7\u30fc\u30bf\u5217\u306e\u95a2\u4fc2\u6027 \u304c\u3088\u308a\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \uff12\u3064\u306e\u30c7\u30fc\u30bf\u5217\u306e\u95a2\u4fc2\u6027\u304c\u898b\u3048\u308b\u3068\u3001\u7bc9\u5e74\u3068\u4f4f\u5b85\u4fa1\u683c\u306e\u95a2\u4fc2\u306f\u3069\u3046\u3060\u308d\u3046\uff1f\u306e\u3088\u3046\u306a\u5206\u6790\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\u5c5e\u6027\u9593\u306e\u95a2\u4fc2\u6027\u306b\u3088\u308a\u6ce8\u76ee\u3059\u308b\u305f\u3081\u3001\u6563\u5e03\u56f3\u3068\u76f8\u95a2\u4fc2\u6570\u3092\u5b66\u3073\u307e\u3059\u3002 \u6e96\u5099: \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 # \u4eca\u56de\u3082\u30cf\u30f3\u30ba\u30aa\u30f3\u6f14\u7fd2\u3067\u306f\u3001\u30dd\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u3044\u307e\u3059\u3002 \u30cf\u30f3\u30ba\u30aa\u30f3\u6f14\u7fd2\u3092\u59cb\u3081\u308b\u305f\u3081\u3001Python \u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 ! wget https : // KuramitsuLab . github . io / data / boston . csv \u30c7\u30fc\u30bf\u5206\u6790\u7528\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4e00\u5f0f\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try : import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError : import os os . system ( 'pip3 install japanize_matplotlib' ) import japanize_matplotlib sns . set ( font = \"IPAexGothic\" ) #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7528\u610f\u3059\u308b df = pd . read_csv ( 'boston.csv' ) df . drop ( '\u9ed2\u4eba' , axis = 1 , inplace = True ) # \u9ed2\u4eba\u3092\u9664\u53bb\u3059\u308b df . head () \u3061\u3083\u3093\u3068\u6e96\u5099\u3067\u304d\u307e\u3057\u305f\u304b\uff1f \u6563\u5e03\u56f3 # \u6563\u5e03\u56f3\u306f\u3001\uff12\u3064\u306e\u30c7\u30fc\u30bf\u5217\u3092 xy\u5ea7\u6a19\u4e0a\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u30b0\u30e9\u30d5\u3067\u3059\u3002 \u6563\u5e03\u56f3\u3092\u66f8\u304f\u3068\u3001\u3075\u305f\u3064\u306e\u30c7\u30fc\u30bf\u306e\u95a2\u9023\u6027\u304c\u8996\u899a\u5316\u898b\u3048\u3066\u304d\u307e\u3059\u3002 \u307e\u305a\u306f\u3001\u6563\u5e03\u56f3\u306e\u5a01\u529b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u524d\u56de\u306e\u5fa9\u7fd2\u3092\u517c\u306d\u3066\u3001 '\u90e8\u5c4b\u6570' \u3068 '\u4fa1\u683c' \u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Let's try \u30b3\u30fc\u30c9 \u307e\u305a\u306f\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01 plt . hist ( df [ '\u4f4f\u5b85\u4fa1\u683c' ], bins = 20 ) plt . xlabel ( '\u4f4f\u5b85\u4fa1\u683c' ) plt . show () \u4e8c\u3064\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u898b\u6bd4\u3079\u3066\u3044\u3066\u3082\u3001\u4f55\u3082\u95a2\u4fc2\u6027\u306f\u898b\u3048\u3066\u304d\u307e\u305b\u3093\u3002 \u3053\u3053\u3067\u3001\u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u3001\u95a2\u4fc2\u6027\u304c\u307f\u3048\u3066\u304d\u307e\u3059\u3002 \u6563\u5e03\u56f3\u306e\u63cf\u753b # Pandas \u3067\u306f\u3001 plt.scatter(X, Y) \u3092\u4f7f\u3063\u3066\u3001\u6563\u5e03\u56f3\u3092\u63cf\u753b\u3057\u307e\u3059\u3002 X, Y \u306b\u306f\u3001\u305d\u308c\u305e\u308cx\u8ef8\u3001y\u8ef8\u306b\u7f6e\u304d\u305f\u3044\u30c7\u30fc\u30bf\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u90e8\u5c4b\u6570\u3068\u4f4f\u5b85\u4fa1\u683c\u306e\u6563\u5e03\u56f3 plt.scatter(df['\u90e8\u5c4b\u6570'], df['\u4f4f\u5b85\u4fa1\u683c']) plt.xlabel('\u90e8\u5c4b\u6570') plt.ylabel('\u4f4f\u5b85\u4fa1\u683c') plt.show() \u30a2\u30eb\u30d5\u30a1\u5024\uff08\u900f\u904e\u7387\uff09\u3092\u3064\u3051\u308b\u3068\u3001\u91cd\u306a\u308a\u5177\u5408\u304c\u6fc3\u6de1\u306b\u306a\u3063\u3066\u898b\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 \u90e8\u5c4b\u6570\u3068\u4f4f\u5b85\u4fa1\u683c\u306e\u6563\u5e03\u56f3\uff08\u6fc3\u6de1\uff09 plt.scatter(df['\u90e8\u5c4b\u6570'], df['\u4f4f\u5b85\u4fa1\u683c'], alpha=0.5) plt.xlabel('\u90e8\u5c4b\u6570') plt.ylabel('\u4f4f\u5b85\u4fa1\u683c') plt.show() \u3082\u3046\u3072\u3068\u3064\u9069\u5f53\u306b\u30c7\u30fc\u30bf\u5217\u3092\u9078\u3093\u3067\u3001\u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 '\u7bc9\u5e74' \u3068 '\u4fa1\u683c' \u5217\u306e\u6563\u5e03\u56f3 plt . scatter ( df [ '\u7bc9\u5e74' ], df [ '\u4fa1\u683c' ]) plt . xlabel ( '\u7bc9\u5e74' ) plt . ylabel ( '\u4fa1\u683c' ) plt . show () \u3053\u306e\u3088\u3046\u306b\u6563\u5e03\u56f3\u306f\u30c7\u30fc\u30bf\u306e\u95a2\u4fc2\u6027\u3092\u5206\u6790\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u306b\u306a\u308a\u307e\u3059\u3002 # \u76f8\u95a2\u4fc2\u6570 # \u6563\u5e03\u56f3\u306f\u3001\uff12\u3064\u306e\u30c7\u30fc\u30bf\u5217\u9593\u306e\u95a2\u4fc2\u6027\u3092\u5206\u6790\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u306e\u95a2\u4fc2\u6027\u3092\u6570\u5024\u5316\u3059\u308b\u624b\u6cd5\u304c\u3001 \u76f8\u95a2\u4fc2\u6570 \u3067\u3059\u3002 \u76f8\u95a2\u4fc2\u6570 \\rho \u306f\u30012\u3064\u30c7\u30fc\u30bf\u5217 X , Y \u306e\u95a2\u4fc2\u6027\u306e\u5f37\u5ea6\u3092\u6e2c\u308b\u6307\u6a19\u3067\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\u8a08\u7b97\u3057\u307e\u3059\u3002 {\\displaystyle \\rho ={\\frac {E\\left[\\left(X-E\\left[X\\right]\\right)\\left(Y-E\\left[Y\\right]\\right)\\right]}{{\\sqrt {E\\left[\\left(X-E\\left[X\\right]\\right)^{2}\\right]}}{\\sqrt {E\\left[\\left(Y-E\\left[Y\\right]\\right)^{2}\\right]}}}}} \u4e00\u822c\u7684\u306b\u306f \uff1a 1\u306b\u8fd1\u3044\u307b\u3069\u3001\u6b63\u306e\u76f8\u95a2\u304c\u3042\u308b 0\u7121\u76f8\u95a2 -1\u306b\u8fd1\u3044\u307b\u3069\u3001\u8ca0\u306e\u76f8\u95a2\u304c\u3042\u308b \u76f8\u95a2\u4fc2\u6570\u3068\u56e0\u679c\u95a2\u4fc2 \u76f8\u95a2\u4fc2\u6570\u306f\u3001\u3042\u304f\u307e\u3067\u3082\u30c7\u30fc\u30bf\u5217\u306e\u9593\u306b\u3042\u308b\u7dda\u5f62\u306a\u95a2\u4fc2\u306e\u5c3a\u5ea6\u306b\u904e\u304e\u307e\u305b\u3093\u3002 \u56e0\u679c\u95a2\u4fc2\u3092\u8868\u3059\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u76f8\u95a2\u304c\u3042\u308b\u3068\u3044\u3046\u8868\u73fe\u304c\u3001\u3042\u305f\u304b\u3082\u56e0\u679c\u95a2\u4fc2\u3092\u793a\u3057\u3066\u3044\u308b\u304b\u306e\u3088\u3046\u306b\u8aa4\u89e3\u3055\u308c\u308b\u306e\u3067\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002 Python \u3067\u306f\u3001\u3056\u307e\u3056\u307e\u306a\u65b9\u6cd5\u3092\u7528\u3044\u3066\u76f8\u95a2\u4fc2\u6570\u3092\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 numpy \u3067\u8a08\u7b97\u5f0f\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b scipi \u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u542b\u307e\u308c\u308b pearsonr \u3092\u7528\u3044\u308b df.corr() : \u6570\u5024\u30c7\u30fc\u30bf\u306e\u5168\u3066\u306e\u76f8\u95a2\u3092\u4e00\u5ea6\u306b\u6c42\u3081\u308b\uff08\u2192 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af1 \u3067\u7df4\u7fd2\u3057\u307e\u3059) \u76f8\u95a2\u4fc2\u6570\u3092\u6c42\u3081\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u2605 # Python\u306f\u3001\u69d8\u3005\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u63d0\u4f9b\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u306f\u3001\u63d0\u4f9b\u3055\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u308b\u3068\u3001\u7c21\u5358\u306b\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u539f\u7406\u3092\u7406\u89e3\u3059\u308b\u3068\u304d\u306f\u3001\u5c11\u3057\u6570\u5f0f\u3068\u30b3\u30fc\u30c9\u306b\u7acb\u3061\u623b\u3063\u3066\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u3082\u91cd\u8981\u3067\u3059\u3002 {\\displaystyle \\rho ={\\frac {E\\left[\\left(X-E\\left[X\\right]\\right)\\left(Y-E\\left[Y\\right]\\right)\\right]}{{\\sqrt {E\\left[\\left(X-E\\left[X\\right]\\right)^{2}\\right]}}{\\sqrt {E\\left[\\left(Y-E\\left[Y\\right]\\right)^{2}\\right]}}}}} \u307e\u305a\u3001 numpy \u3092\u7528\u3044\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u65b9\u6cd5\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002 def corr ( x , y ): x = np . array ( x ) y = np . array ( y ) x_diff = x - np . mean ( x ) y_diff = y - np . mean ( y ) return np . dot ( x_diff , y_diff ) / ( np . sqrt ( sum ( x_diff ** 2 )) * np . sqrt ( sum ( y_diff ** 2 ))) \u6ce8\u610f: \u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3001 df['\u4fa1\u683c'] \u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u5217\u3092\u76f4\u63a5\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u3001 \u6700\u521d\u306b x = np.array(x) \u306e\u3088\u3046\u306b\u3001numpy\u914d\u5217\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u3001\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002 \u7bc9\u5e74\u3068\u4f4f\u5b85\u4fa1\u683c\u306e\u76f8\u95a2\u4fc2\u6570 print ( corr ( df [ '\u7bc9\u5e74' ], df [ '\u4f4f\u5b85\u4fa1\u683c' ])) \u5b9f\u884c\u7d50\u679c -0.37695456500459595 \u90e8\u5c4b\u6570\u3068\u4f4f\u5b85\u4fa1\u683c\u306e\u76f8\u95a2\u4fc2\u6570 print ( corr ( df [ '\u90e8\u5c4b\u6570' ], df [ '\u4f4f\u5b85\u4fa1\u683c' ])) \u5b9f\u884c\u7d50\u679c 0.6953599470715389 Warning \u76f8\u95a2\u4fc2\u6570\u306f\u9806\u5e8f\u5c3a\u5ea6\u3067\u3042\u308a\u6bd4\u5c3a\u5ea6\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u4f8b\u3048\u3070\u300c\u76f8\u95a2\u4fc2\u6570\u304c0.2\u30680.4\u3067\u3042\u308b\u3053\u3068\u304b\u3089\u3001\u5f8c\u8005\u306f\u524d\u8005\u3088\u308a2\u500d\u306e\u76f8\u95a2\u304c\u3042\u308b\u300d\u306a\u3069\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u3002 Peasonr # \u5148\u307b\u3069\u306f\u3001Python \u3067\u76f8\u95a2\u4fc2\u6570\u3092\u6c42\u3081\u308b\u95a2\u6570\u3092\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3067\u7528\u3044\u308b\u4e3b\u306a\u95a2\u6570\u306f\u307b\u3068\u3093\u3069\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b9a\u7fa9\u6e08\u307f\u3067\u3001\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306f\u5c11\u306a\u3044\u3067\u3059\u3002Python \u306e\u5927\u304d\u306a\u30e1\u30ea\u30c3\u30c8\u306f\u3001 \u8c4a\u5bcc\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6d3b\u7528\u3067\u304d\u308b \u70b9\u306b\u3042\u308b\u306e\u3067\u3001\u30cd\u30c3\u30c8\u3067\u691c\u7d22\u3057\u3066\u3001\u76ee\u7684\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u306a\u3044\u304b\u63a2\u3057\u3066\u307f\u308b\u3053\u3068\u3082\u5927\u5207\u3067\u3059\u3002 \u3053\u3053\u3067\u306f\u3001SciPy \u306e\u7d71\u8a08\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u63d0\u4f9b\u3055\u308c\u308b pearsonr() \u3092\u4f7f\u3063\u3066\u898b\u307e\u3059\u3002 from\u00b7scipy . stats\u00b7import pearsonr rho , p = pearsonr ( df [ '\u90e8\u5c4b\u6570' ], \u00b7 df [ '\u4fa1\u683c' ]) print ( '\u76f8\u95a2\u4fc2\u6570:' , rho ) print ( 'p\u5024:' , p ) \u5b9f\u884c\u7d50\u679c \u76f8\u95a2\u4fc2\u6570: 0.6953599470715395 p\u5024: 2.4872288710071593e-74 pearsonr() \u95a2\u6570\u306f\u3001\u76f8\u95a2\u4fc2\u6570\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u5e30\u7121\u4eee\u8aac(\u7121\u76f8\u95a2)\u3068\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u306ep\u5024\u3082\u8a08\u7b97\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u8a08\u7b97\u7d50\u679c\u306f\u3001\u30bf\u30d7\u30eb\u3067\u8fd4\u3055\u308c\u3001\u3072\u3068\u3064\u76ee\u306e\u5024\u304c\u76f8\u95a2\u4fc2\u6570(rho)\u3001\u3075\u305f\u3064\u76ee\u306e\u5024\u304cp\u5024\u306b\u306a\u308a\u307e\u3059\u3002 p\u5024(\u6709\u610f\u78ba\u7387) p\u5024\u306f\u30010 \u306b\u8fd1\u3044\u307b\u3069\u30c7\u30fc\u30bf\u304c\u5076\u7136\u306b\u305d\u3046\u306a\u3063\u305f\u53ef\u80fd\u6027\u304c\u4f4e\u3044\u3053\u3068\u306b\u306a\u308b\u3002 \u4e00\u822c\u306b\u3001p \u5024\u306f 0.05 (5%) \u672a\u6e80\u306e\u3068\u304d\u3001\u5076\u7136\u3067\u306f\u306a\u3044\u3068\u3044\u3048\u308b\u3002 Warning \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3067\u7528\u3044\u308b\u4e3b\u306a\u95a2\u6570\u306f\u3001\u307b\u3068\u3093\u3069\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b9a\u7fa9\u6e08\u307f\u3067\u3001\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306f\u5c11\u306a\u3044\u3067\u3059\u3002Python \u306e\u5927\u304d\u306a\u30e1\u30ea\u30c3\u30c8\u306f\u3001 \u8c4a\u5bcc\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6d3b\u7528\u3067\u304d\u308b \u70b9\u306b\u3042\u308b\u306e\u3067\u3001\u30cd\u30c3\u30c8\u3067\u691c\u7d22\u3057\u3066\u3001\u76ee\u7684\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u306a\u3044\u304b\u63a2\u3057\u3066\u307f\u308b\u3053\u3068\u3082\u5927\u5207\u3067\u3059\u3002 \u307e\u3068\u3081\u3066\u8abf\u3079\u3066\u307f\u308b # \u6700\u3082\u4f4f\u5b85\u4fa1\u683c\u3068\u306e\u76f8\u95a2\u304c\u9ad8\u305d\u3046\u306a\u30c7\u30fc\u30bf\u5217\u3092\u63a2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u3082\u3061\u308d\u3093\u3001\u3072\u3068\u3064\u305a\u3064\u624b\u4f5c\u696d\u3067\u8abf\u3079\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001 Python\u3092\u4f7f\u3063\u3066\u81ea\u52d5\u51e6\u7406\u3057\u307e\u3057\u3087\u3046\u3002 df.columns \u3067\u5168\u3066\u306e\u30c7\u30fc\u30bf\u5217\u306e\u540d\u524d\u304c\u5f97\u3089\u308c\u307e\u3059\u306e\u3067\u3001\u305d\u308c\u3092for\u6587\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3057\u307e\u3059\u3002 \u5168\u3066\u306e\u30c7\u30fc\u30bf\u5217\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u8abf\u3079\u308b for column in df . columns : rho = corr ( df [ column ], df [ '\u4f4f\u5b85\u4fa1\u683c' ]) print ( f ' { column } -\u4fa1\u683c: \u03c1= { rho } ' ) \u5b9f\u884c\u7d50\u679c \u72af\u7f6a-\u4fa1\u683c: \u03c1=-0.38830460858681154 \u81ea\u7136-\u4fa1\u683c: \u03c1=0.3604453424505447 \u5de5\u5834-\u4fa1\u683c: \u03c1=-0.4837251600283734 \u5ddd\u8fd1-\u4fa1\u683c: \u03c1=0.17526017719029738 \u5927\u6c17\u6c5a\u67d3-\u4fa1\u683c: \u03c1=-0.4273207723732816 \u90e8\u5c4b\u6570-\u4fa1\u683c: \u03c1=0.6953599470715389 \u7bc9\u5e74-\u4fa1\u683c: \u03c1=-0.37695456500459595 \u901a\u52e4-\u4fa1\u683c: \u03c1=0.2499287340859038 \u4ea4\u901a-\u4fa1\u683c: \u03c1=-0.3816262306397775 \u8cc7\u7523\u7a0e-\u4fa1\u683c: \u03c1=-0.4685359335677663 \u6559\u54e1-\u4fa1\u683c: \u03c1=-0.5077866855375609 \u4f4e\u6240\u5f97-\u4fa1\u683c: \u03c1=-0.7376627261740146 \u4fa1\u683c-\u4fa1\u683c: \u03c1=0.9999999999999991 \u6ce8\u610f: \u4fa1\u683c-\u4fa1\u683c\u306f\u3001\u540c\u3058\u30c7\u30fc\u30bf\u5217\u306e\u76f8\u95a2\u4fc2\u6570\u306a\u306e\u3067\u3001\u9650\u308a\u306a\u304f 1.0 \u306b\u8fd1\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001Python\u4e0a\u306e\u8a08\u7b97\u306f\u3001\u306a\u304b\u306a\u304b\u30d4\u30c3\u30bf\u30ea 1.0 \u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 \u8eca\u8f2a\u3092\u518d\u767a\u660e\u3057\u306a\u3044 \u3082\u3061\u308d\u3093\u3001\u3061\u3083\u3093\u3068\u63a2\u305b\u3070\u3001\u4e00\u5ea6\u306b\u5168\u3066\u306e\u6570\u5024\u30c7\u30fc\u30bf\u306e\u76f8\u95a2\u3092\u8abf\u3079\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u3042\u308a\u307e\u3059\u3002 \u8a73\u3057\u304f\u306f\u3001 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af1 \u306e\u30d2\u30f3\u30c8\u3092\u898b\u3066\u304f\u3060\u3055\u3044 (\u4e88\u7fd2) \u8fd1\u4f3c\u76f4\u7dda\u3068\u6700\u5c0f\u4e8c\u4e57\u6cd5 # \u3055\u3066\u3001\u4eca\u56de\u306f\u3001\u6563\u5e03\u56f3\u3068\u76f8\u95a2\u3092\u4e2d\u5fc3\u306b\u898b\u3066\u304d\u307e\u3057\u305f\u3002 \u3082\u3057\u4f4f\u5b85\u4fa1\u683c\u3068\u90e8\u5c4b\u6570\u306e\u3088\u3046\u306b\u5f37\u3044\u76f8\u95a2\u95a2\u4fc2\u304c\u3042\u308b\u5834\u5408\u306f\u5834\u5408\u306f\u3001 \u30d4\u30c3\u3068\u76f4\u7dda\u3092\u66f8\u3044\u3066\u307f\u305f\u304f\u306a\u308a\u307e\u305b\u3093\u304b\uff1f \u6b21\u56de\u306e\u4e88\u7fd2\u3068\u3057\u3066\u3001 \u6642\u9593\u304c\u3042\u308c\u3070\u3053\u306e\u3088\u3046\u306a\u8fd1\u4f3c\u76f4\u7dda\u3092\u5f15\u304f\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u2605 # \u307e\u305a\u3001\u8fd1\u4f3c\u76f4\u7dda\u3092\u6c42\u3081\u308b\u305f\u3081\u306e\u539f\u7406\u3092\u898b\u3066\u304a\u304d\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001\u7c21\u5358\u306a\u4f8b\u984c\u3092\u8003\u3048\u307e\u3059\u3002 \u4f8b\u984c\uff08\u6700\u5c0f\u4e8c\u4e57\u6cd5\uff09 (1,1),(2,3),(4,3),(6,5),(7,4) \u3068\u3044\u3046\u30c7\u30fc\u30bf\u306e\u7d44\u306b\u5bfe\u3057\u3066\u3001 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u3092\u7528\u3044\u3066\u3001\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda y = ax + b \u3092\u6c42\u3081\u3088\u3046\u3002 \u307e\u305a\u3001\u30c7\u30fc\u30bf\u3092\u30b0\u30e9\u30d5\u3067\u898b\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 x = [ 1 , 2 , 2 , 4 , 6 , 7 ] y = [ 1 , 3 , 2 , 3 , 5 , 4 ] plt . scatter ( x , y ) plt . show () \u6700\u5c0f\u4e8c\u4e57\u6cd5\u306f\u3001\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda\u3092\u8fd1\u4f3c\u3059\u308b\u65b9\u6cd5\u3092\u6c42\u3081\u308b\u624b\u6cd5\u3067\u3059\u3002 \u76f4\u7dda\u306e\u8fd1\u4f3c\u5f0f\u3092 y = a x + b \u3068\u304a\u304d\u307e\u3059\u3002 \u3059\u308b\u3068\u3001\u305d\u306e\u76f4\u7dda\u3068\u70b9 (x_i, y_i) \u3068\u306ey\u65b9\u5411\u306e\u8aa4\u5dee\u306f\u3001 |a x_i + b - y_i| \u3068\u306a\u308a\u307e\u3059\u3002 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u306f\u3001 \u3053\u306e\u3088\u3046\u306a\u8aa4\u5dee\u306e\u4e8c\u4e57\u548c\u304c\u6700\u5c0f\u306b\u306a\u308b a , b \u304c\u3001\u6700\u3082\u3089\u3057\u3044\u76f4\u7dda\u3067\u3042\u308b \u3068\u3057\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u6b21\u306e\u3088\u3046\u306a E \u304c\u6700\u5c0f\u306b\u306a\u308b a , b \u3092\u6c42\u3081\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 E = \\sum ^n _ {i = 1}(ax_i +b - y)^2 E \u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u305f\u3081\u3001 a,b \u306e\u95a2\u6570\u3068\u307f\u306a\u3057\u3001\u504f\u5fae\u5206\u3057\u307e\u3059\u3002 \\frac{\\partial E}{\\partial a} = \\sum ^n_{i= 1} 2x_i (ax _i+ b - y_i) = 0 \\\\ \\frac{\\partial E}{\\partial b} = \\sum ^n_{i= 1}(ax _i+ b - y_i) = 0 \u5b9f\u969b\u306e\u5f0f\u306e\u5909\u5f62\u306f\u3001 \u6570\u5b66\u304c\u304a\u597d\u304d\u306a\u5b50 \u306b\u304a\u4efb\u305b\u3057\u307e\u3059\u3002 \u7d50\u8ad6\u306b\u98db\u3093\u3067\u3001a,b\u306b\u3064\u3044\u3066\u6574\u7406\u3059\u308b\u3068\uff1a a = {\\sum ^n _ {i = 1}x_i y_i - {1 \\over n}\\sum^n_{i = 1}x_i \\sum^n_{i = 1}y_i \\over \\sum^n_{i = 1}x_i^2 - {1 \\over n}(\\sum^n_{i = 1}x_i)^2} \\\\ b ={ 1\\over n}\\sum^n_{i= 1}(y_i - ax_i)\u3000 \u3042\u3068\u306f\u3001NumPy\u3092\u4f7f\u3063\u3066\u3001\u6700\u3082\u3089\u3057\u3044a,b\u3092\u6c42\u3081\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u306b\u3088\u308b\u76f4\u7dda\u306e\u8fd1\u4f3c def reg1dim ( x , y ): x = np . array ( x ) y = np . array ( y ) n = len ( x ) a = (( np . dot ( x , y ) - y . sum () * x . sum () / n ) / (( x ** 2 ) . sum () - x . sum () ** 2 / n )) b = ( y . sum () - a * x . sum ()) / n return a , b x = [ 1 , 2 , 2 , 4 , 6 , 7 ] y = [ 1 , 3 , 2 , 3 , 5 , 4 ] a , b = reg1dim ( x , y ) print ( \"a =\" , a , \"b =\" , b ) \u3088\u3063\u3066\u3001NumPy\u306b\u3088\u3063\u3066\u6c42\u3081\u3089\u308c\u305f\u5f0f\u306f\u3001 y = 0.51 x + 1.12 \u3068\u306a\u308a\u307e\u3059\u3002 x = [ 1 , 2 , 2 , 4 , 6 , 7 ] y = [ 1 , 3 , 2 , 3 , 5 , 4 ] plt . scatter ( x , y ) a , b = reg1dim ( x , y ) x = np . linspace ( 0 , 8. 10 ) y = a * x + b plt . plot ( x , y , color = \"black\" ) plt . show () plt.hist(\u30c7\u30fc\u30bf\u5217) \u30c7\u30fc\u30bf\u5217\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3059\u308b \u7dda\u5f62\u56de\u5e30 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u306f\u3001\u7dda\u5f62\u56de\u5e30(LinearRegression)\u3068\u3057\u3066\u3001sklearn\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u5229\u7528\u3067\u304d\u307e\u3059\u3002 x = [ 1 , 2 , 2 , 4 , 6 , 7 ] y = [ 1 , 3 , 2 , 3 , 5 , 4 ] from sklearn.linear_model import LinearRegression model = LinearRegression () x = x . reshape ( - 1 , 1 ) # sklearn \u7528\u306b\u5909\u5f62 model . fit ( x , y ) \u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb y=ax+b \u306e\u4fc2\u6570 a \u3068\u5207\u7247 b \u306f\u3001 \u305d\u308c\u305e\u308c model.coef_ \u3068 model.intercept_ \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 print ( model . coef_ , model . intercept_ ) \u7df4\u7fd2\u554f\u984c # plt . scatter ( df [ '\u90e8\u5c4b\u6570' ], df [ '\u4fa1\u683c' ], color = \"k\" , alpha = 0.5 ) a , b = reg1dim ( df [ '\u90e8\u5c4b\u6570' ], df [ '\u4fa1\u683c' ]) x = np . linspace ( df [ '\u90e8\u5c4b\u6570' ] . min (), df [ '\u90e8\u5c4b\u6570' ] . max (), 100 ) y = a * x + b plt . plot ( x , y , color = \"red\" ) plt . show () print ( \"a =\" , a , \"b =\" , b )","title":"\u6563\u5e03\u56f3\u3068\u76f8\u95a2\u4fc2\u6570"},{"location":"boston2/#_1","text":"\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001\u5358\u4e00\u306e\u30c7\u30fc\u30bf\u5217\u306e\u6563\u3089\u3070\u308a\u3088\u308a\u3082\u3001 \uff12\u3064\u306e\u30c7\u30fc\u30bf\u5217\u306e\u95a2\u4fc2\u6027 \u304c\u3088\u308a\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \uff12\u3064\u306e\u30c7\u30fc\u30bf\u5217\u306e\u95a2\u4fc2\u6027\u304c\u898b\u3048\u308b\u3068\u3001\u7bc9\u5e74\u3068\u4f4f\u5b85\u4fa1\u683c\u306e\u95a2\u4fc2\u306f\u3069\u3046\u3060\u308d\u3046\uff1f\u306e\u3088\u3046\u306a\u5206\u6790\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\u5c5e\u6027\u9593\u306e\u95a2\u4fc2\u6027\u306b\u3088\u308a\u6ce8\u76ee\u3059\u308b\u305f\u3081\u3001\u6563\u5e03\u56f3\u3068\u76f8\u95a2\u4fc2\u6570\u3092\u5b66\u3073\u307e\u3059\u3002","title":"\u6563\u5e03\u56f3\u3068\u76f8\u95a2\u4fc2\u6570"},{"location":"boston2/#_2","text":"\u4eca\u56de\u3082\u30cf\u30f3\u30ba\u30aa\u30f3\u6f14\u7fd2\u3067\u306f\u3001\u30dd\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u3044\u307e\u3059\u3002 \u30cf\u30f3\u30ba\u30aa\u30f3\u6f14\u7fd2\u3092\u59cb\u3081\u308b\u305f\u3081\u3001Python \u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 ! wget https : // KuramitsuLab . github . io / data / boston . csv \u30c7\u30fc\u30bf\u5206\u6790\u7528\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4e00\u5f0f\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try : import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError : import os os . system ( 'pip3 install japanize_matplotlib' ) import japanize_matplotlib sns . set ( font = \"IPAexGothic\" ) #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7528\u610f\u3059\u308b df = pd . read_csv ( 'boston.csv' ) df . drop ( '\u9ed2\u4eba' , axis = 1 , inplace = True ) # \u9ed2\u4eba\u3092\u9664\u53bb\u3059\u308b df . head () \u3061\u3083\u3093\u3068\u6e96\u5099\u3067\u304d\u307e\u3057\u305f\u304b\uff1f","title":"\u6e96\u5099: \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8"},{"location":"boston2/#_3","text":"\u6563\u5e03\u56f3\u306f\u3001\uff12\u3064\u306e\u30c7\u30fc\u30bf\u5217\u3092 xy\u5ea7\u6a19\u4e0a\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u30b0\u30e9\u30d5\u3067\u3059\u3002 \u6563\u5e03\u56f3\u3092\u66f8\u304f\u3068\u3001\u3075\u305f\u3064\u306e\u30c7\u30fc\u30bf\u306e\u95a2\u9023\u6027\u304c\u8996\u899a\u5316\u898b\u3048\u3066\u304d\u307e\u3059\u3002 \u307e\u305a\u306f\u3001\u6563\u5e03\u56f3\u306e\u5a01\u529b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u524d\u56de\u306e\u5fa9\u7fd2\u3092\u517c\u306d\u3066\u3001 '\u90e8\u5c4b\u6570' \u3068 '\u4fa1\u683c' \u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Let's try \u30b3\u30fc\u30c9 \u307e\u305a\u306f\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01 plt . hist ( df [ '\u4f4f\u5b85\u4fa1\u683c' ], bins = 20 ) plt . xlabel ( '\u4f4f\u5b85\u4fa1\u683c' ) plt . show () \u4e8c\u3064\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u898b\u6bd4\u3079\u3066\u3044\u3066\u3082\u3001\u4f55\u3082\u95a2\u4fc2\u6027\u306f\u898b\u3048\u3066\u304d\u307e\u305b\u3093\u3002 \u3053\u3053\u3067\u3001\u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u308b\u3068\u3001\u95a2\u4fc2\u6027\u304c\u307f\u3048\u3066\u304d\u307e\u3059\u3002","title":"\u6563\u5e03\u56f3"},{"location":"boston2/#_4","text":"Pandas \u3067\u306f\u3001 plt.scatter(X, Y) \u3092\u4f7f\u3063\u3066\u3001\u6563\u5e03\u56f3\u3092\u63cf\u753b\u3057\u307e\u3059\u3002 X, Y \u306b\u306f\u3001\u305d\u308c\u305e\u308cx\u8ef8\u3001y\u8ef8\u306b\u7f6e\u304d\u305f\u3044\u30c7\u30fc\u30bf\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u90e8\u5c4b\u6570\u3068\u4f4f\u5b85\u4fa1\u683c\u306e\u6563\u5e03\u56f3 plt.scatter(df['\u90e8\u5c4b\u6570'], df['\u4f4f\u5b85\u4fa1\u683c']) plt.xlabel('\u90e8\u5c4b\u6570') plt.ylabel('\u4f4f\u5b85\u4fa1\u683c') plt.show() \u30a2\u30eb\u30d5\u30a1\u5024\uff08\u900f\u904e\u7387\uff09\u3092\u3064\u3051\u308b\u3068\u3001\u91cd\u306a\u308a\u5177\u5408\u304c\u6fc3\u6de1\u306b\u306a\u3063\u3066\u898b\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 \u90e8\u5c4b\u6570\u3068\u4f4f\u5b85\u4fa1\u683c\u306e\u6563\u5e03\u56f3\uff08\u6fc3\u6de1\uff09 plt.scatter(df['\u90e8\u5c4b\u6570'], df['\u4f4f\u5b85\u4fa1\u683c'], alpha=0.5) plt.xlabel('\u90e8\u5c4b\u6570') plt.ylabel('\u4f4f\u5b85\u4fa1\u683c') plt.show() \u3082\u3046\u3072\u3068\u3064\u9069\u5f53\u306b\u30c7\u30fc\u30bf\u5217\u3092\u9078\u3093\u3067\u3001\u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 '\u7bc9\u5e74' \u3068 '\u4fa1\u683c' \u5217\u306e\u6563\u5e03\u56f3 plt . scatter ( df [ '\u7bc9\u5e74' ], df [ '\u4fa1\u683c' ]) plt . xlabel ( '\u7bc9\u5e74' ) plt . ylabel ( '\u4fa1\u683c' ) plt . show () \u3053\u306e\u3088\u3046\u306b\u6563\u5e03\u56f3\u306f\u30c7\u30fc\u30bf\u306e\u95a2\u4fc2\u6027\u3092\u5206\u6790\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u6563\u5e03\u56f3\u306e\u63cf\u753b"},{"location":"boston2/#_5","text":"","title":""},{"location":"boston2/#_6","text":"\u6563\u5e03\u56f3\u306f\u3001\uff12\u3064\u306e\u30c7\u30fc\u30bf\u5217\u9593\u306e\u95a2\u4fc2\u6027\u3092\u5206\u6790\u3059\u308b\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u306e\u95a2\u4fc2\u6027\u3092\u6570\u5024\u5316\u3059\u308b\u624b\u6cd5\u304c\u3001 \u76f8\u95a2\u4fc2\u6570 \u3067\u3059\u3002 \u76f8\u95a2\u4fc2\u6570 \\rho \u306f\u30012\u3064\u30c7\u30fc\u30bf\u5217 X , Y \u306e\u95a2\u4fc2\u6027\u306e\u5f37\u5ea6\u3092\u6e2c\u308b\u6307\u6a19\u3067\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\u8a08\u7b97\u3057\u307e\u3059\u3002 {\\displaystyle \\rho ={\\frac {E\\left[\\left(X-E\\left[X\\right]\\right)\\left(Y-E\\left[Y\\right]\\right)\\right]}{{\\sqrt {E\\left[\\left(X-E\\left[X\\right]\\right)^{2}\\right]}}{\\sqrt {E\\left[\\left(Y-E\\left[Y\\right]\\right)^{2}\\right]}}}}} \u4e00\u822c\u7684\u306b\u306f \uff1a 1\u306b\u8fd1\u3044\u307b\u3069\u3001\u6b63\u306e\u76f8\u95a2\u304c\u3042\u308b 0\u7121\u76f8\u95a2 -1\u306b\u8fd1\u3044\u307b\u3069\u3001\u8ca0\u306e\u76f8\u95a2\u304c\u3042\u308b \u76f8\u95a2\u4fc2\u6570\u3068\u56e0\u679c\u95a2\u4fc2 \u76f8\u95a2\u4fc2\u6570\u306f\u3001\u3042\u304f\u307e\u3067\u3082\u30c7\u30fc\u30bf\u5217\u306e\u9593\u306b\u3042\u308b\u7dda\u5f62\u306a\u95a2\u4fc2\u306e\u5c3a\u5ea6\u306b\u904e\u304e\u307e\u305b\u3093\u3002 \u56e0\u679c\u95a2\u4fc2\u3092\u8868\u3059\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u76f8\u95a2\u304c\u3042\u308b\u3068\u3044\u3046\u8868\u73fe\u304c\u3001\u3042\u305f\u304b\u3082\u56e0\u679c\u95a2\u4fc2\u3092\u793a\u3057\u3066\u3044\u308b\u304b\u306e\u3088\u3046\u306b\u8aa4\u89e3\u3055\u308c\u308b\u306e\u3067\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002 Python \u3067\u306f\u3001\u3056\u307e\u3056\u307e\u306a\u65b9\u6cd5\u3092\u7528\u3044\u3066\u76f8\u95a2\u4fc2\u6570\u3092\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 numpy \u3067\u8a08\u7b97\u5f0f\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b scipi \u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u542b\u307e\u308c\u308b pearsonr \u3092\u7528\u3044\u308b df.corr() : \u6570\u5024\u30c7\u30fc\u30bf\u306e\u5168\u3066\u306e\u76f8\u95a2\u3092\u4e00\u5ea6\u306b\u6c42\u3081\u308b\uff08\u2192 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af1 \u3067\u7df4\u7fd2\u3057\u307e\u3059)","title":"\u76f8\u95a2\u4fc2\u6570"},{"location":"boston2/#_7","text":"Python\u306f\u3001\u69d8\u3005\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u63d0\u4f9b\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u306f\u3001\u63d0\u4f9b\u3055\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u308b\u3068\u3001\u7c21\u5358\u306b\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u539f\u7406\u3092\u7406\u89e3\u3059\u308b\u3068\u304d\u306f\u3001\u5c11\u3057\u6570\u5f0f\u3068\u30b3\u30fc\u30c9\u306b\u7acb\u3061\u623b\u3063\u3066\u8a66\u3057\u3066\u307f\u308b\u3053\u3068\u3082\u91cd\u8981\u3067\u3059\u3002 {\\displaystyle \\rho ={\\frac {E\\left[\\left(X-E\\left[X\\right]\\right)\\left(Y-E\\left[Y\\right]\\right)\\right]}{{\\sqrt {E\\left[\\left(X-E\\left[X\\right]\\right)^{2}\\right]}}{\\sqrt {E\\left[\\left(Y-E\\left[Y\\right]\\right)^{2}\\right]}}}}} \u307e\u305a\u3001 numpy \u3092\u7528\u3044\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u65b9\u6cd5\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002 def corr ( x , y ): x = np . array ( x ) y = np . array ( y ) x_diff = x - np . mean ( x ) y_diff = y - np . mean ( y ) return np . dot ( x_diff , y_diff ) / ( np . sqrt ( sum ( x_diff ** 2 )) * np . sqrt ( sum ( y_diff ** 2 ))) \u6ce8\u610f: \u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3001 df['\u4fa1\u683c'] \u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u5217\u3092\u76f4\u63a5\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u3001 \u6700\u521d\u306b x = np.array(x) \u306e\u3088\u3046\u306b\u3001numpy\u914d\u5217\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u3001\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002 \u7bc9\u5e74\u3068\u4f4f\u5b85\u4fa1\u683c\u306e\u76f8\u95a2\u4fc2\u6570 print ( corr ( df [ '\u7bc9\u5e74' ], df [ '\u4f4f\u5b85\u4fa1\u683c' ])) \u5b9f\u884c\u7d50\u679c -0.37695456500459595 \u90e8\u5c4b\u6570\u3068\u4f4f\u5b85\u4fa1\u683c\u306e\u76f8\u95a2\u4fc2\u6570 print ( corr ( df [ '\u90e8\u5c4b\u6570' ], df [ '\u4f4f\u5b85\u4fa1\u683c' ])) \u5b9f\u884c\u7d50\u679c 0.6953599470715389 Warning \u76f8\u95a2\u4fc2\u6570\u306f\u9806\u5e8f\u5c3a\u5ea6\u3067\u3042\u308a\u6bd4\u5c3a\u5ea6\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u4f8b\u3048\u3070\u300c\u76f8\u95a2\u4fc2\u6570\u304c0.2\u30680.4\u3067\u3042\u308b\u3053\u3068\u304b\u3089\u3001\u5f8c\u8005\u306f\u524d\u8005\u3088\u308a2\u500d\u306e\u76f8\u95a2\u304c\u3042\u308b\u300d\u306a\u3069\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\u3002","title":"\u76f8\u95a2\u4fc2\u6570\u3092\u6c42\u3081\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u2605"},{"location":"boston2/#peasonr","text":"\u5148\u307b\u3069\u306f\u3001Python \u3067\u76f8\u95a2\u4fc2\u6570\u3092\u6c42\u3081\u308b\u95a2\u6570\u3092\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3067\u7528\u3044\u308b\u4e3b\u306a\u95a2\u6570\u306f\u307b\u3068\u3093\u3069\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b9a\u7fa9\u6e08\u307f\u3067\u3001\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306f\u5c11\u306a\u3044\u3067\u3059\u3002Python \u306e\u5927\u304d\u306a\u30e1\u30ea\u30c3\u30c8\u306f\u3001 \u8c4a\u5bcc\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6d3b\u7528\u3067\u304d\u308b \u70b9\u306b\u3042\u308b\u306e\u3067\u3001\u30cd\u30c3\u30c8\u3067\u691c\u7d22\u3057\u3066\u3001\u76ee\u7684\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u306a\u3044\u304b\u63a2\u3057\u3066\u307f\u308b\u3053\u3068\u3082\u5927\u5207\u3067\u3059\u3002 \u3053\u3053\u3067\u306f\u3001SciPy \u306e\u7d71\u8a08\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u63d0\u4f9b\u3055\u308c\u308b pearsonr() \u3092\u4f7f\u3063\u3066\u898b\u307e\u3059\u3002 from\u00b7scipy . stats\u00b7import pearsonr rho , p = pearsonr ( df [ '\u90e8\u5c4b\u6570' ], \u00b7 df [ '\u4fa1\u683c' ]) print ( '\u76f8\u95a2\u4fc2\u6570:' , rho ) print ( 'p\u5024:' , p ) \u5b9f\u884c\u7d50\u679c \u76f8\u95a2\u4fc2\u6570: 0.6953599470715395 p\u5024: 2.4872288710071593e-74 pearsonr() \u95a2\u6570\u306f\u3001\u76f8\u95a2\u4fc2\u6570\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u5e30\u7121\u4eee\u8aac(\u7121\u76f8\u95a2)\u3068\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u306ep\u5024\u3082\u8a08\u7b97\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u8a08\u7b97\u7d50\u679c\u306f\u3001\u30bf\u30d7\u30eb\u3067\u8fd4\u3055\u308c\u3001\u3072\u3068\u3064\u76ee\u306e\u5024\u304c\u76f8\u95a2\u4fc2\u6570(rho)\u3001\u3075\u305f\u3064\u76ee\u306e\u5024\u304cp\u5024\u306b\u306a\u308a\u307e\u3059\u3002 p\u5024(\u6709\u610f\u78ba\u7387) p\u5024\u306f\u30010 \u306b\u8fd1\u3044\u307b\u3069\u30c7\u30fc\u30bf\u304c\u5076\u7136\u306b\u305d\u3046\u306a\u3063\u305f\u53ef\u80fd\u6027\u304c\u4f4e\u3044\u3053\u3068\u306b\u306a\u308b\u3002 \u4e00\u822c\u306b\u3001p \u5024\u306f 0.05 (5%) \u672a\u6e80\u306e\u3068\u304d\u3001\u5076\u7136\u3067\u306f\u306a\u3044\u3068\u3044\u3048\u308b\u3002 Warning \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3067\u7528\u3044\u308b\u4e3b\u306a\u95a2\u6570\u306f\u3001\u307b\u3068\u3093\u3069\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b9a\u7fa9\u6e08\u307f\u3067\u3001\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306f\u5c11\u306a\u3044\u3067\u3059\u3002Python \u306e\u5927\u304d\u306a\u30e1\u30ea\u30c3\u30c8\u306f\u3001 \u8c4a\u5bcc\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6d3b\u7528\u3067\u304d\u308b \u70b9\u306b\u3042\u308b\u306e\u3067\u3001\u30cd\u30c3\u30c8\u3067\u691c\u7d22\u3057\u3066\u3001\u76ee\u7684\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u306a\u3044\u304b\u63a2\u3057\u3066\u307f\u308b\u3053\u3068\u3082\u5927\u5207\u3067\u3059\u3002","title":"Peasonr"},{"location":"boston2/#_8","text":"\u6700\u3082\u4f4f\u5b85\u4fa1\u683c\u3068\u306e\u76f8\u95a2\u304c\u9ad8\u305d\u3046\u306a\u30c7\u30fc\u30bf\u5217\u3092\u63a2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u3082\u3061\u308d\u3093\u3001\u3072\u3068\u3064\u305a\u3064\u624b\u4f5c\u696d\u3067\u8abf\u3079\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001 Python\u3092\u4f7f\u3063\u3066\u81ea\u52d5\u51e6\u7406\u3057\u307e\u3057\u3087\u3046\u3002 df.columns \u3067\u5168\u3066\u306e\u30c7\u30fc\u30bf\u5217\u306e\u540d\u524d\u304c\u5f97\u3089\u308c\u307e\u3059\u306e\u3067\u3001\u305d\u308c\u3092for\u6587\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3057\u307e\u3059\u3002 \u5168\u3066\u306e\u30c7\u30fc\u30bf\u5217\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u8abf\u3079\u308b for column in df . columns : rho = corr ( df [ column ], df [ '\u4f4f\u5b85\u4fa1\u683c' ]) print ( f ' { column } -\u4fa1\u683c: \u03c1= { rho } ' ) \u5b9f\u884c\u7d50\u679c \u72af\u7f6a-\u4fa1\u683c: \u03c1=-0.38830460858681154 \u81ea\u7136-\u4fa1\u683c: \u03c1=0.3604453424505447 \u5de5\u5834-\u4fa1\u683c: \u03c1=-0.4837251600283734 \u5ddd\u8fd1-\u4fa1\u683c: \u03c1=0.17526017719029738 \u5927\u6c17\u6c5a\u67d3-\u4fa1\u683c: \u03c1=-0.4273207723732816 \u90e8\u5c4b\u6570-\u4fa1\u683c: \u03c1=0.6953599470715389 \u7bc9\u5e74-\u4fa1\u683c: \u03c1=-0.37695456500459595 \u901a\u52e4-\u4fa1\u683c: \u03c1=0.2499287340859038 \u4ea4\u901a-\u4fa1\u683c: \u03c1=-0.3816262306397775 \u8cc7\u7523\u7a0e-\u4fa1\u683c: \u03c1=-0.4685359335677663 \u6559\u54e1-\u4fa1\u683c: \u03c1=-0.5077866855375609 \u4f4e\u6240\u5f97-\u4fa1\u683c: \u03c1=-0.7376627261740146 \u4fa1\u683c-\u4fa1\u683c: \u03c1=0.9999999999999991 \u6ce8\u610f: \u4fa1\u683c-\u4fa1\u683c\u306f\u3001\u540c\u3058\u30c7\u30fc\u30bf\u5217\u306e\u76f8\u95a2\u4fc2\u6570\u306a\u306e\u3067\u3001\u9650\u308a\u306a\u304f 1.0 \u306b\u8fd1\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001Python\u4e0a\u306e\u8a08\u7b97\u306f\u3001\u306a\u304b\u306a\u304b\u30d4\u30c3\u30bf\u30ea 1.0 \u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 \u8eca\u8f2a\u3092\u518d\u767a\u660e\u3057\u306a\u3044 \u3082\u3061\u308d\u3093\u3001\u3061\u3083\u3093\u3068\u63a2\u305b\u3070\u3001\u4e00\u5ea6\u306b\u5168\u3066\u306e\u6570\u5024\u30c7\u30fc\u30bf\u306e\u76f8\u95a2\u3092\u8abf\u3079\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u3042\u308a\u307e\u3059\u3002 \u8a73\u3057\u304f\u306f\u3001 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af1 \u306e\u30d2\u30f3\u30c8\u3092\u898b\u3066\u304f\u3060\u3055\u3044","title":"\u307e\u3068\u3081\u3066\u8abf\u3079\u3066\u307f\u308b"},{"location":"boston2/#_9","text":"\u3055\u3066\u3001\u4eca\u56de\u306f\u3001\u6563\u5e03\u56f3\u3068\u76f8\u95a2\u3092\u4e2d\u5fc3\u306b\u898b\u3066\u304d\u307e\u3057\u305f\u3002 \u3082\u3057\u4f4f\u5b85\u4fa1\u683c\u3068\u90e8\u5c4b\u6570\u306e\u3088\u3046\u306b\u5f37\u3044\u76f8\u95a2\u95a2\u4fc2\u304c\u3042\u308b\u5834\u5408\u306f\u5834\u5408\u306f\u3001 \u30d4\u30c3\u3068\u76f4\u7dda\u3092\u66f8\u3044\u3066\u307f\u305f\u304f\u306a\u308a\u307e\u305b\u3093\u304b\uff1f \u6b21\u56de\u306e\u4e88\u7fd2\u3068\u3057\u3066\u3001 \u6642\u9593\u304c\u3042\u308c\u3070\u3053\u306e\u3088\u3046\u306a\u8fd1\u4f3c\u76f4\u7dda\u3092\u5f15\u304f\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"(\u4e88\u7fd2) \u8fd1\u4f3c\u76f4\u7dda\u3068\u6700\u5c0f\u4e8c\u4e57\u6cd5"},{"location":"boston2/#_10","text":"\u307e\u305a\u3001\u8fd1\u4f3c\u76f4\u7dda\u3092\u6c42\u3081\u308b\u305f\u3081\u306e\u539f\u7406\u3092\u898b\u3066\u304a\u304d\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001\u7c21\u5358\u306a\u4f8b\u984c\u3092\u8003\u3048\u307e\u3059\u3002 \u4f8b\u984c\uff08\u6700\u5c0f\u4e8c\u4e57\u6cd5\uff09 (1,1),(2,3),(4,3),(6,5),(7,4) \u3068\u3044\u3046\u30c7\u30fc\u30bf\u306e\u7d44\u306b\u5bfe\u3057\u3066\u3001 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u3092\u7528\u3044\u3066\u3001\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda y = ax + b \u3092\u6c42\u3081\u3088\u3046\u3002 \u307e\u305a\u3001\u30c7\u30fc\u30bf\u3092\u30b0\u30e9\u30d5\u3067\u898b\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 x = [ 1 , 2 , 2 , 4 , 6 , 7 ] y = [ 1 , 3 , 2 , 3 , 5 , 4 ] plt . scatter ( x , y ) plt . show () \u6700\u5c0f\u4e8c\u4e57\u6cd5\u306f\u3001\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda\u3092\u8fd1\u4f3c\u3059\u308b\u65b9\u6cd5\u3092\u6c42\u3081\u308b\u624b\u6cd5\u3067\u3059\u3002 \u76f4\u7dda\u306e\u8fd1\u4f3c\u5f0f\u3092 y = a x + b \u3068\u304a\u304d\u307e\u3059\u3002 \u3059\u308b\u3068\u3001\u305d\u306e\u76f4\u7dda\u3068\u70b9 (x_i, y_i) \u3068\u306ey\u65b9\u5411\u306e\u8aa4\u5dee\u306f\u3001 |a x_i + b - y_i| \u3068\u306a\u308a\u307e\u3059\u3002 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u306f\u3001 \u3053\u306e\u3088\u3046\u306a\u8aa4\u5dee\u306e\u4e8c\u4e57\u548c\u304c\u6700\u5c0f\u306b\u306a\u308b a , b \u304c\u3001\u6700\u3082\u3089\u3057\u3044\u76f4\u7dda\u3067\u3042\u308b \u3068\u3057\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u6b21\u306e\u3088\u3046\u306a E \u304c\u6700\u5c0f\u306b\u306a\u308b a , b \u3092\u6c42\u3081\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 E = \\sum ^n _ {i = 1}(ax_i +b - y)^2 E \u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u305f\u3081\u3001 a,b \u306e\u95a2\u6570\u3068\u307f\u306a\u3057\u3001\u504f\u5fae\u5206\u3057\u307e\u3059\u3002 \\frac{\\partial E}{\\partial a} = \\sum ^n_{i= 1} 2x_i (ax _i+ b - y_i) = 0 \\\\ \\frac{\\partial E}{\\partial b} = \\sum ^n_{i= 1}(ax _i+ b - y_i) = 0 \u5b9f\u969b\u306e\u5f0f\u306e\u5909\u5f62\u306f\u3001 \u6570\u5b66\u304c\u304a\u597d\u304d\u306a\u5b50 \u306b\u304a\u4efb\u305b\u3057\u307e\u3059\u3002 \u7d50\u8ad6\u306b\u98db\u3093\u3067\u3001a,b\u306b\u3064\u3044\u3066\u6574\u7406\u3059\u308b\u3068\uff1a a = {\\sum ^n _ {i = 1}x_i y_i - {1 \\over n}\\sum^n_{i = 1}x_i \\sum^n_{i = 1}y_i \\over \\sum^n_{i = 1}x_i^2 - {1 \\over n}(\\sum^n_{i = 1}x_i)^2} \\\\ b ={ 1\\over n}\\sum^n_{i= 1}(y_i - ax_i)\u3000 \u3042\u3068\u306f\u3001NumPy\u3092\u4f7f\u3063\u3066\u3001\u6700\u3082\u3089\u3057\u3044a,b\u3092\u6c42\u3081\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u306b\u3088\u308b\u76f4\u7dda\u306e\u8fd1\u4f3c def reg1dim ( x , y ): x = np . array ( x ) y = np . array ( y ) n = len ( x ) a = (( np . dot ( x , y ) - y . sum () * x . sum () / n ) / (( x ** 2 ) . sum () - x . sum () ** 2 / n )) b = ( y . sum () - a * x . sum ()) / n return a , b x = [ 1 , 2 , 2 , 4 , 6 , 7 ] y = [ 1 , 3 , 2 , 3 , 5 , 4 ] a , b = reg1dim ( x , y ) print ( \"a =\" , a , \"b =\" , b ) \u3088\u3063\u3066\u3001NumPy\u306b\u3088\u3063\u3066\u6c42\u3081\u3089\u308c\u305f\u5f0f\u306f\u3001 y = 0.51 x + 1.12 \u3068\u306a\u308a\u307e\u3059\u3002 x = [ 1 , 2 , 2 , 4 , 6 , 7 ] y = [ 1 , 3 , 2 , 3 , 5 , 4 ] plt . scatter ( x , y ) a , b = reg1dim ( x , y ) x = np . linspace ( 0 , 8. 10 ) y = a * x + b plt . plot ( x , y , color = \"black\" ) plt . show () plt.hist(\u30c7\u30fc\u30bf\u5217) \u30c7\u30fc\u30bf\u5217\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3059\u308b \u7dda\u5f62\u56de\u5e30 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u306f\u3001\u7dda\u5f62\u56de\u5e30(LinearRegression)\u3068\u3057\u3066\u3001sklearn\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u5229\u7528\u3067\u304d\u307e\u3059\u3002 x = [ 1 , 2 , 2 , 4 , 6 , 7 ] y = [ 1 , 3 , 2 , 3 , 5 , 4 ] from sklearn.linear_model import LinearRegression model = LinearRegression () x = x . reshape ( - 1 , 1 ) # sklearn \u7528\u306b\u5909\u5f62 model . fit ( x , y ) \u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb y=ax+b \u306e\u4fc2\u6570 a \u3068\u5207\u7247 b \u306f\u3001 \u305d\u308c\u305e\u308c model.coef_ \u3068 model.intercept_ \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 print ( model . coef_ , model . intercept_ )","title":"\u6700\u5c0f\u4e8c\u4e57\u6cd5\u2605"},{"location":"boston2/#_11","text":"plt . scatter ( df [ '\u90e8\u5c4b\u6570' ], df [ '\u4fa1\u683c' ], color = \"k\" , alpha = 0.5 ) a , b = reg1dim ( df [ '\u90e8\u5c4b\u6570' ], df [ '\u4fa1\u683c' ]) x = np . linspace ( df [ '\u90e8\u5c4b\u6570' ] . min (), df [ '\u90e8\u5c4b\u6570' ] . max (), 100 ) y = a * x + b plt . plot ( x , y , color = \"red\" ) plt . show () print ( \"a =\" , a , \"b =\" , b )","title":"\u7df4\u7fd2\u554f\u984c"},{"location":"boston3/","text":"\u56de\u5e30\u5206\u6790 # \u4eca\u56de\u306f\u3001\u56de\u5e30\u5206\u6790\u306b\u53d6\u308a\u7d44\u307f\u3001\u672c\u683c\u7684\u306a\u7d71\u8a08\u5b66\u624b\u306e\u624b\u6cd5\u3092\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\u3002 \u30cf\u30f3\u30ba\u30aa\u30f3\u6f14\u7fd2\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u524d\u56de\u307e\u3067\u306e\u540c\u3058\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 \u6e96\u5099 # \u307e\u305a\u3001\u524d\u56de\u306e\u6f14\u7fd2\u5185\u5bb9\u3092\u601d\u3044\u51fa\u3057\u3066\u3001\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092 df \u306b\u8aad\u307f\u8fbc\u3093\u3067\u304f\u3060\u3055\u3044\u3002 \u56de\u5e30\u5206\u6790 # \u524d\u56de\u3001\u6563\u5e03\u56f3\u3068\u76f8\u95a2\u4fc2\u6570\u306e\u6c42\u3081\u65b9\u3092\u5b66\u3073\u307e\u3057\u305f\u3002 \u6700\u5f8c\u306b\u3001\u5f37\u3044\u76f8\u95a2\u304c\u3042\u308b\u6563\u5e03\u56f3\u306b\u30d4\u30c3\u3068\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda( y = ax + b )\u3092\u5f15\u304f\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u306e\u539f\u7406\u306f\u3055\u3066\u304a\u304d\u3001 \u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda\u306b\u8fd1\u4f3c\u3059\u308b \u3068\u3053\u308d\u307e\u3067\u306f\u3001\u305d\u3046\u3044\u3046\u3082\u306e\u304b\u306a\u3068\u7406\u89e3\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002 \u5b9f\u306f\u3001\u3053\u306e\u3088\u3046\u306b y = ax + b \u306b\u8fd1\u4f3c\u3059\u308b\u306e\u306f\u3001 \u7dda\u5f62\u56de\u5e30(Linear Regression) \u3068\u547c\u3070\u308c\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570 # \u56de\u5e30\u5206\u6790\u3084\u3053\u308c\u4ee5\u964d\u306e\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001 y = ax + b \u306e\u3088\u3046\u306b\u95a2\u4fc2\u3092\u8868\u3059\u5f0f\u3092 \u30e2\u30c7\u30eb \u3001 x \u3092\u8aac\u660e\u5909\u6570\u3001 y \u3092\u76ee\u7684\u5909\u6570\u3068\u547c\u3073\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570 : \u30e2\u30c7\u30eb\u306e\u7279\u5fb4\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306e\u5909\u6570 \u76ee\u7684\u5909\u6570 : \u30e2\u30c7\u30eb\u306e\u5bfe\u8c61\u3068\u306a\u308b\u5909\u6570 \u30c7\u30fc\u30bf\u5217\u306e\u4e2d\u304b\u3089\u3072\u3068\u3064\u306e\u8aac\u660e\u5909\u6570\u3092\u9078\u3093\u3067\u3001\u56de\u5fcc\u5206\u6790\u3092\u884c\u3046\u3053\u3068\u3092 \u5358\u56de\u5e30\u5206\u6790 \u3068\u547c\u3073\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u3092\u62bd\u51fa X = df[['\u90e8\u5c4b\u6570']] # \u3072\u3068\u3064\u9078\u3076 y = df['\u4f4f\u5b85\u4fa1\u683c'] \u8aac\u660e\u5909\u6570\u306f\u3001\uff12\u3064\u4ee5\u4e0a\u9078\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \uff12\u3064\u4ee5\u4e0a\u306e\u56de\u5e30\u5206\u6790\u306f\u3001 \u91cd\u56de\u5e30\u5206\u6790 \u3068\u547c\u3070\u308c\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u3092\u4e8c\u3064\u62bd\u51fa\u3059\u308b X = df[['\u90e8\u5c4b\u6570', '\u7bc9\u5e74']] y = df['\u4f4f\u5b85\u4fa1\u683c'] \u8aac\u660e\u5909\u6570\u306f\u30e2\u30c7\u30eb\u306e\u7279\u5fb4\u3092\u3046\u307e\u304f\u8868\u3059\u5909\u6570\u306b\u306a\u308a\u307e\u3059\u3002 \u3082\u3061\u308d\u3093\u3001\uff13\u3064\u3084\u305d\u308c\u4ee5\u4e0a\u306e\u8aac\u660e\u5909\u6570\u3092\u9078\u3093\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u3002 \u9078\u3093\u3060\u8aac\u660e\u5909\u6570\u306e\u6570\u3092 \u6b21\u5143(dimension) \u3068\u547c\u3073\u307e\u3059\u3002 \uff12\u6b21\u5143\u4ee5\u4e0a\u306e\u8aac\u660e\u5909\u6570\u306f\u3001\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u306e\u6b21\u5143\u3092\u78ba\u8a8d X = df[['\u90e8\u5c4b\u6570', '\u7bc9\u5e74', '\u72af\u7f6a\u7387']] print(X.shape) (512, 3) \u56de\u5e30\u5206\u6790\u3092\u884c\u3046 # \u56de\u5e30\u5206\u6790\u306f\u3001 sklearn\u30e2\u30b8\u30e5\u30fc\u30eb\u306e sklearn.linear_model.LinearRegression \u3092\u7528\u3044\u307e\u3059\u3002 from sklearn.linear_model import LinearRegression model = LinearRegression () model \u306b\u5bfe\u3057\u3066\u3001 fit() \u30e1\u30bd\u30c3\u30c9\u3067\u3001 \u8aac\u660e\u5909\u6570 X \u3068\u76ee\u7684\u5909\u6570 y \u3092\u4e0e\u3048\u308b\u3068\u3001 \u5185\u90e8\u3067\u306f\u6700\u5c0f\u4e8c\u4e57\u6cd5\u3092\u7528\u3044\u3066\u3001\u30e2\u30c7\u30eb\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002 \u307e\u305a\u306f\u3001\u5358\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 '\u5358\u56de\u5e30\u30e2\u30c7\u30eb X = df [[ '\u90e8\u5c4b\u6570' ]] y = df [ '\u4f4f\u5b85\u4fa1\u683c' ] model = LinearRegression () model . fit ( X , y ) \u6a5f\u68b0\u5b66\u7fd2\u3068\u306f \u6a5f\u68b0\u5b66\u7fd2\u3068\u306f\u3001\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u30c7\u30fc\u30bf\u306b\u9069\u5408\u3057\u305f\u30e2\u30c7\u30eb\u3092\u5f97\u308b\u3053\u3068\u3067\u3059\u3002 \u9069\u5408\u3055\u308c\u305f\u56de\u5e30\u30e2\u30c7\u30eb\u304b\u3089\u4fc2\u6570(a)\u3068\u5207\u7247(b)\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u56de\u5e30\u30e2\u30c7\u30eb(\u4fc2\u6570\u3068\u5207\u7247\uff09\u306e\u78ba\u8a8d print ( 'a=' , model . coef_ , ', b=' , model . intercept_ ) a= [9.10210898] , b= -34.67062077643857 \u3064\u307e\u308a\u3001\u6570\u5f0f\u3067\u8868\u3059\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u76f4\u7dda\u306b\u306a\u308a\u307e\u3059\u3002 y_{\\mbox{\u4f4f\u5b85\u4fa1\u683c}} = 9.1 \\times x_{\\mbox{\u90e8\u5c4b\u6570}} - 34.67 \u30e2\u30c7\u30eb\u3068\u4e88\u6e2c # \u56de\u5e30\u5206\u6790\u306f\u3001\u4e00\u65e6\u3001\u30e2\u30c7\u30eb\u304c\u69cb\u7bc9\u3055\u308c\u308b\u3068\u3001\u4fa1\u683c\u304c\u4e88\u60f3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u90e8\u5c4b\u65704\u306e\u4fa1\u683c\u306f\uff1f model . predict ([( 4.00 ,)]) array([19.94203311]) \u6b21\u306e\u3088\u3046\u306b\u3001 y_pred \u3092\u6c42\u3081\u308b\u3068\u3001 \u5168\u3066\u306e\u8aac\u660e\u5909\u6570 X \u304b\u3089 \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u304b\u3089\u4e88\u6e2c\u3055\u308c\u305f\u4f4f\u5b85\u4fa1\u683c\u3092\u30c7\u30fc\u30bf\u5217\u3067 \u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u56de\u5e30\u30e2\u30c7\u30eb\u304b\u3089\u306e\u4e88\u6e2c\u5024 \u4e88\u6e2c\u5024 y_pred = model . predict ( X ) print ( y_pred ) print(y_pred) \u306e\u5b9f\u884c\u7d50\u679c(\u629c\u7c8b) [25.17574577 23.77402099 30.72803225 29.02593787 30.38215211 ...] \u6563\u5e03\u56f3\u3068\u4e88\u6e2c\u3055\u308c\u305f\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u63cf\u753b plt . scatter ( df [ '\u90e8\u5c4b\u6570' ], df [ '\u4fa1\u683c' ], alpha = 0.5 ) plt . plot ( df [ '\u90e8\u5c4b\u6570' ], y_pred , color = 'black' ) plt . xlabel ( '\u90e8\u5c4b\u6570' ) plt . ylabel ( '\u4fa1\u683c' ) plt . show () \u7dda\u5f62\u56de\u5e30\u306f\u4e88\u6e2c\u30e2\u30c7\u30eb \u5b9f\u306f\u3001\u56de\u5e30\u5206\u6790\u3067\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda\u3092\u8fd1\u4f3c\u3059\u308b\u3053\u3068\u306f\u3001 \u8aac\u660e\u5909\u6570\u304b\u3089\u76ee\u7684\u5909\u6570\u3092\u4e88\u6e2c\u53ef\u80fd\u306b\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u3084AI\u3067\u6b63\u306b\u76ee\u6307\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002 \u56de\u5e30\u30e2\u30c7\u30eb\u306f\u3069\u306e\u7a0b\u5ea6\u6b63\u78ba\u306a\u306e\u304b\uff1f # \u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306b\u3088\u308b\u4e88\u6e2c\u306f\u3001\u3069\u306e\u7a0b\u5ea6\u3001\u6b63\u78ba\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f \u5b66\u7fd2\u3055\u308c\u305f\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3001\u4fa1\u683c\u3092\u4e88\u6e2c\u3057\u3066\u3001\u5b9f\u969b\u306e\u4f4f\u5b85\u4fa1\u683c\uff08\u6b63\u89e3\uff09\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 y_pred = model . predict ( X ) pd . DataFrame ({ '\u5b9f\u6e2c' : df [ '\u4f4f\u5b85\u4fa1\u683c' ], '\u4e88\u6e2c' : y_pred }) . head () \u3084\u306f\u308a\u3001\u30c7\u30fc\u30bf\u5217\u3092\u6bd4\u8f03\u3059\u308b\u3060\u3051\u3067\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u6563\u5e03\u56f3\u3067\u8996\u899a\u5316\u3057\u3066\u307f\u307e\u3059\u3002 plt . scatter ( y , y_pred , color = 'cyan' , alpha = 0.3 ) plt . xlabel ( '\u5b9f\u6e2c' ) plt . ylabel ( '\u4e88\u6e2c' ) plt . ylim ( 0 , 50 ) \u306a\u3093\u304b\u9ad8\u4fa1\u683c\u5e2f( >30 )\u304c\u3046\u307e\u304f\u4e88\u6e2c\u3067\u304d\u3066\u3044\u306a\u3044\u6c17\u304c\u3057\u307e\u3059\u3002 \u6b8b\u5dee \u6b8b\u5dee\u3068\u306f\u3001\u5b9f\u6e2c\u5024\u3068\u4e88\u6e2c\u5024\u306e\u5dee\u3067\u3059\u3002 \u56de\u5e30\u30e2\u30c7\u30eb\u306f\u3001\u6b8b\u5dee\u304c\u6b63\u898f\u5206\u5e03\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u671b\u307e\u3057\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u6b8b\u5dee\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 plt . hist ( y - y_pred , bins = 50 ) plt . show () \u5b9a\u91cf\u7684\u306a\u8a55\u4fa1\u5c3a\u5ea6 # \u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306e\u6b63\u78ba\u3055\u306f\u3001\u5b9f\u6e2c\u5024\u3068\u4e88\u6e2c\u5024\u306e\u6563\u5e03\u56f3\u3084\u6b8b\u5dee\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u8996\u899a\u7684\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u6b63\u78ba\u3055\u3092\u5b9a\u91cf\u7684\u306b\u6e2c\u308c\u305f\u65b9\u304c\u4fbf\u5229\u3067\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u5b9a\u91cf\u7684\u306b\u8a55\u4fa1\u3059\u308b\u5c3a\u5ea6\u3068\u3057\u3066\u3001 MSE \u3068 \u6c7a\u5b9a\u4fc2\u6570 \u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 MSE \u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee (Mean Squared Error) \u3068\u306f\u3001\u5b9f\u969b\u306e\u5024\u3068\u4e88\u6e2c\u5024\u306e\u7d76\u5bfe\u5024\u306e2\u4e57\u3092\u5e73\u5747\u3057\u305f\u3082\u306e\u3067\u3059\u3002 \u5024\u304c\u5927\u304d\u3044\u307b\u3069\u8aa4\u5dee\u306e\u591a\u3044\u30e2\u30c7\u30eb\u3068\u8a00\u3048\u307e\u3059\u3002\u8a08\u7b97\u5f0f\u306f\u4ee5\u4e0b\u3068\u306a\u308a\u307e\u3059\u3002 MSE(y, \\hat{y}) = \\frac{1}{n} \\sum_{i=0}^{n} (y_i - \\hat{y}_i)^2 \u3053\u306e\u5f0f\u306f\u3001\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306b\u7528\u3044\u305f\u8aa4\u5dee\u3092\u5e73\u5747\u5316\u3057\u305f\u3082\u306e\u3067\u3059\u3002 \u5c0f\u3055\u3044\u307b\u3069\u3001\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda\u3068\u3044\u3046\u306e\u306f\u76f4\u611f\u306b\u53cd\u3057\u307e\u305b\u3093\u3002 \u305f\u3060\u3057\u3001\u76ee\u7684\u5909\u6570\u306e\u5206\u6563\u304c\u5927\u304d\u3044\u5834\u5408\u306f\u3001MSE\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 sklearn \u30e2\u30b8\u30e5\u30fc\u30eb\u306e sklearn.metrics.mean_squared_error \u306f\u3001MSE\u3092\u6c42\u3081\u308b\u95a2\u6570\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002 from sklearn.metrics import mean_squared_error mse = mean_squared_error ( y , y_pred ) print ( 'MSE:' , mse ) \u5b9f\u884c\u7d50\u679c MSE: 43.60055177116956 \u6c7a\u5b9a\u4fc2\u6570 \u6c7a\u5b9a\u4fc2\u6570 (R2, R-squared, coefficient of determination) \u306f\u3001MSE\u3092\u4f7f\u3063\u3066\u3001\u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u5f53\u3066\u306f\u307e\u308a\u306e\u826f\u3055\u3092\u793a\u3059\u6307\u6a19\u3067\u3059\u3002\u5bc4\u4e0e\u7387\u3068\u3082\u547c\u3070\u308c\u307e\u3059\u3002 R^2(y,\\hat{y}) = 1 - \\frac{\\sum_{i=1}^n (y_i-\\hat{y_i})^2 }{\\sum_{i=1}^n (y_i-\\bar{y})^2},\u3000\\\\ \\mbox{\u305f\u3060\u3057\u3001} \\bar{y} = \\frac{1}{n} \\sum_{i=1}^n y_i \u6700\u3082\u5f53\u3066\u306f\u307e\u308a\u306e\u826f\u3044\u5834\u5408\u3001\u3064\u307e\u308a\u8aa4\u5dee\u306e\u306a\u3044\u5834\u5408\u30011.0 \u3068\u306a\u308a\u307e\u3059\u3002 (\u5f53\u3066\u306f\u307e\u308a\u306e\u60aa\u3044\u5834\u5408\u3001\u30de\u30a4\u30ca\u30b9\u3068\u306a\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059)\u3002MSE\u3068\u7570\u306a\u308a\u3001\u76ee\u7684\u5909\u6570\u306e\u5206\u6563\u306b\u4f9d\u5b58\u3057\u306a\u3044\u305f\u3081\u3001\u76ee\u7684\u5909\u6570\u306e\u30b9\u30b1\u30fc\u30eb\u304c\u7570\u306a\u3063\u3066\u3082\u4e00\u822c\u7684\u306a\u6307\u6a19\u3068\u306a\u308a\u307e\u3059\u3002 from sklearn.metrics import r2_score r2 = r2_score ( y , y_pred ) print ( '\u6c7a\u5b9a\u4fc2\u6570(R2):' , r2 ) \u5b9f\u884c\u7d50\u679c \u6c7a\u5b9a\u4fc2\u6570(R2): 0.48352545599133423 \u91cd\u56de\u5e30 # \u91cd\u56de\u5e30\u5206\u6790\u306f\u3001\u4e8c\u3064\u4ee5\u4e0a\u306e\u8aac\u660e\u5909\u6570\u3092\u9078\u3073\u307e\u3059\u3002 Let's try \u4f4f\u5b85\u4fa1\u683c\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u305d\u3046\u306a\u30c7\u30fc\u30bf\u5217\uff08\u8aac\u660e\u5909\u6570\uff09\u3092\u3075\u305f\u3064\u9078\u3093\u3067\u307f\u3088\u3046\u3002 \u4e0d\u52d5\u7523\u306e\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304b\u3089\u3001\u4f55\u304c\u5f71\u97ff\u3059\u308b\u304b\u3001\u308f\u304b\u308a\u307e\u305b\u3093\u3002 \u3068\u308a\u3042\u3048\u305a\u3001\u50d5\u306e\u7d4c\u9a13\u304b\u3089 '\u901a\u52e4' \u3068 '\u6559\u54e1' \u8fba\u308a\u304c\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u7768\u3093\u3067\u3001 \u8aac\u660e\u5909\u6570\u306b\u9078\u3093\u3067\u307f\u307e\u3057\u305f\u3002 \u307f\u306a\u3055\u3093\u304c\u3001\u9078\u3093\u3060\u8aac\u660e\u5909\u6570\u306b\u5909\u3048\u3066\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 X = df [[ '\u901a\u52e4' , '\u6559\u54e1' ]] # \u8aac\u660e\u5909\u6570 y = df [ '\u4f4f\u5b85\u4fa1\u683c' ] # \u76ee\u7684\u5909\u6570 pd . concat ([ X , y ], axis = 1 ) . head () #\u6700\u521d\u306e5\u4ef6\u306e\u307f\u307f\u3066\u307f\u308b \u4eee\u8aac\u3068\u691c\u8a3c # \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u76ee\u7684\u306e\u3072\u3068\u3064\u306f\u3001\u4eee\u8aac\u691c\u8a3c\u306b\u3088\u308b\u3088\u308a\u7cbe\u5ea6\u306e\u9ad8\u3044\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001\u90e8\u5c4b\u6570\u3084\u72af\u7f6a\u7387\u306a\u3069\u8272\u3005\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u508d\u89b3\u3059\u308b\u3068\u304d\u306f\u3001\u8272\u3005\u306a\u4eee\u8aac\u3092\u7acb\u3066\u306a\u304c\u3089\u307f\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u4f8b \u90e8\u5c4b\u6570\u304c\u5897\u3048\u308b\u3068\u4fa1\u683c\u4e0a\u304c\u308a\u305d\u3046\u3060\u306a.. \u72af\u7f6a\u7387\u304c\u9ad8\u3044\u3068\u4f4f\u5b85\u4fa1\u683c\u306f\u4e0b\u304c\u308a\u305d\u3046\u3060\u306a.. \u74b0\u5883\u6c5a\u67d3\u306f\u4f4f\u6c11\u306b\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u4f4f\u5b85\u4fa1\u683c\u306b\u5f71\u97ff\u3057\u306a\u3044\u3060\u308d\u3046\u306a\u3069 \u3053\u306e\u3088\u3046\u306a\u4eee\u8aac\u3092\u7acb\u3066\u3066\u3001\u4eee\u8aac\u691c\u8a3c\u3092\u3059\u308b\u306e\u306f\u30c7\u30fc\u30bf\u5206\u6790\u306e\u918d\u9190\u5473\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u5206\u6790\u3068\u53ef\u8996\u5316\u3092\u99c6\u4f7f\u3057\u3066\u3001\u4f4f\u5b85\u4fa1\u683c\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u8aac\u660e\u5909\u6570\u3092\u5206\u6790\u3057\u3066\u3044\u304d\u307e\u3059\u3002 \u30d2\u30f3\u30c8\u306f\u76f8\u95a2 # \u8aac\u660e\u5909\u6570\u306e\u5019\u88dc\u3092\u8abf\u3079\u308b\u3068\u304d\u306b\u30d2\u30f3\u30c8\u3068\u306a\u308b\u306e\u304c\u3001\u76ee\u7684\u5909\u6570\u3068\u306e\u76f8\u95a2\u3067\u3059\u3002 \u4eee\u8aac:\u300c\u72af\u7f6a\u7387\u304c\u9ad8\u3051\u308c\u3070\u4f4f\u5b85\u4fa1\u683c\u304c\u4f4e\u304f\u306a\u308a\u305d\u3046\u3060\u306a\u300d sns . jointplot ( x = \"\u72af\u7f6a\u7387\" , y = \"\u4f4f\u5b85\u4fa1\u683c\" , data = df ) plt . show () \u4eee\u8aac(2): \u90e8\u5c4b\u6570\u304c\u591a\u3044\u307b\u3069\u4fa1\u683c\u304c\u9ad8\u304f\u306a\u308a\u305d\u3046\u3060\u306a sns . jointplot ( x = '\u90e8\u5c4b\u6570' , y = '\u4f4f\u5b85\u4fa1\u683c' , data = df ) corr = pearsonr ( df [ '\u90e8\u5c4b\u6570' ], df [ '\u4f4f\u5b85\u4fa1\u683c' ]) print ( '\u30d4\u30a2\u30bd\u30f3\u76f8\u95a2\u4fc2\u6570:' , corr [ 0 ]) print ( 'p\u5024:' , corr [ 1 ]) \u4eee\u8aac(3) NOx \u306f\u4f4f\u5b85\u4fa1\u683c\u306b\u5f71\u97ff\u306a\u3044 (\u30ab\u30fc\u30cd\u30eb\u56f3) sns . kdeplot ( data = df , x = \"\u5de5\u5834\" , y = \"\u4f4f\u5b85\u4fa1\u683c\" , shade = True , thresh = 0.05 ) corr = pearsonr ( df [ '\u5de5\u5834' ], df [ '\u4f4f\u5b85\u4fa1\u683c' ]) print ( '\u30d4\u30a2\u30bd\u30f3\u76f8\u95a2\u4fc2\u6570:' , corr [ 0 ]) print ( 'p\u5024:' , corr [ 1 ]) \u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u3001\u5168\u90e8\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff01 cor = df . corr () plt . figure ( figsize = ( 20 , 10 )) sns . heatmap ( cor [( cor >= 0.4 ) | ( cor <= - 0.4 )], annot = True , cmap = 'Blues' ) fig , ax = plt . subplots ( round ( len ( df . columns ) / 3 ), 3 , figsize = ( 18 , 18 )) fig . subplots_adjust ( hspace = 0.5 ) # \u9593\u9694\u3092\u8abf\u6574 for i , ax in enumerate ( fig . axes ): if i < len ( df . columns ) - 1 : sns . regplot ( x = df . columns [ i ], y = '\u4f4f\u5b85\u4fa1\u683c' , data = df [ df . columns ], ax = ax ) \u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u3092\u898b\u308b # \u307e\u305a\u306f\u3001\u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u3092\u898b\u308b\u306e\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002 sns . distplot ( df [ '\u4f4f\u5b85\u4fa1\u683c' ], color = 'green' , bins = 100 , hist_kws = { 'alpha' : 0.4 }) df . hist ( figsize = ( 16 , 20 ), xlabelsize = 12 , ylabelsize = 12 ) \u76ee\u7684\u5909\u6570\u304c\u6b63\u898f\u5206\u5e03\u3067\u306a\u3044!! \u7d71\u8a08\u5b66\u3092\u3057\u3063\u304b\u308a\u5b66\u3093\u3067\u3044\u306a\u3044\u3068\u3001\u56f0\u3063\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 https://toukeier.hatenablog.com/entry/2019/09/08/224346 \u5168\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570 # \u91cd\u56de\u5e30\u5206\u6790\u306f\u3001\u8907\u6570\u306e\u8aac\u660e\u5909\u6570\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u4fa1\u683c\u4ee5\u5916\u306e\u5168\u3066\u306e\u30c7\u30fc\u30bf\u5217\u3092\u8aac\u660e\u5909\u6570\u306b\u3057\u3066\u3001\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 y = df [ '\u4fa1\u683c' ] print ( df . columns [: - 1 ]) X = df [ df . columns [: - 1 ]] # \u4fa1\u683c\u4ee5\u5916\u306e\u5168\u3066 model = LinearRegression () model . fit ( X , y ) y_pred = model . predict ( X ) plt . scatter ( y , y_pred , c = 'red' , alpha = 0.3 ) print ( \"MSE: \" , mean_squared_error ( y , y_pred ) ) print ( 'R2' , r2_score ( y , y_pred )) \u6f14\u7fd2\u554f\u984c # '\u4f4f\u5b85\u4fa1\u683c' \u3092\u76ee\u7684\u5909\u6570\u3068\u3057\u3066\u3001\u56de\u5e30\u5206\u6790\u3057\u3066\u307f\u3088\u3046\u3002 \u5358\u56de\u5e30\u5206\u6790\u3067\u3001\u6c7a\u5b9a\u4fc2\u6570(R2)\u304c\u6700\u5927\u306b\u306a\u308b\u8aac\u660e\u5909\u6570\u3092\u63a2\u3057\u3066\u307f\u3088\u3046\u3002 \u91cd\u56de\u5e30\u5206\u6790\u3067\u3001\u6c7a\u5b9a\u4fc2\u6570(R2)\u304c\u6700\u5927\u306b\u306a\u308b\u8aac\u660e\u5909\u6570\u3092\uff12\u3064\u63a2\u3057\u3066\u307f\u3088\u3046\u3002 \u81ea\u5206\u306a\u308a\u306b\u4eee\u8aac\u3092\u7acb\u3066\u3066\uff13\u3064\u306e\u8aac\u660e\u5909\u6570\u3092\u9078\u3073\u3001 \u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u6c7a\u5b9a\u4fc2\u6570(R2)\u304b\u3089\u9078\u3093\u3060\u8aac\u660e\u5909\u6570\u304c\u4f4f\u5b85\u4fa1\u683c\u306e\u7279\u5fb4\u3092\u3088\u304f\u8aac\u660e\u3057\u3066\u3044\u308b\u304b\u8003\u5bdf\u3057\u3066\u307f\u3088\u3046\u3002 \u8003\u5bdf\u3092\u3059\u308b\u3068\u304d\u306f\u3001\u76f8\u95a2\u4fc2\u6570\u3092\u610f\u8b58\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002 \u7279\u306b\u3001\u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u306f\u3001\u8aac\u660e\u5909\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u3088\u3063\u3066\u306f\u3001 \u591a\u91cd\u5171\u7dda\u6027(multi-colinearlity\u3001\u548c\u88fd\u82f1\u8a9e: \u30de\u30eb\u30c1\u30b3) \u304c\u751f\u3058\u308b\u3053\u3068\u304c\u3042\u308a\u3001\u8aac\u660e\u529b\u304c\u4f4e\u4e0b\u3057\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u5358\u7d14\u306b\u76f8\u95a2\u304c\u9ad8\u3044\u8aac\u660e\u5909\u6570\u3092\u9078\u3076\u3060\u3051\u3067\u306f\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u30de\u30eb\u30c1\u30b3\u306b\u306f\u3054\u6ce8\u610f \u30de\u30eb\u30c1\u30b3\u3078\u306e\u5bfe\u5fdc\u306f\u5206\u91ce\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002 * \u7d71\u8a08\u5b66\u7684\u306b\u306f\u3001\u653e\u7f6e\u3057\u3066\u306f\u3044\u3051\u306a\u3044 * \u6a5f\u68b0\u5b66\u7fd2\u7684\u306b\u306f\u3001\u30e2\u30c7\u30eb\u306e\u8aac\u660e\u529b\u3092\u4f4e\u4e0b\u3055\u305b\u308b\u3082\u306e\u306e\u3001\u4e88\u6e2c\u7cbe\u5ea6\u306b\u3042\u307e\u308a\u5f71\u97ff\u3092\u4e0e\u3048\u306a\u3044 \u307e\u305f\u3001\u8aac\u660e\u5909\u6570\u3092\u5168\u3066\u5165\u308c\u308b\u3068\u3001\u4e00\u898b\u3001\u6700\u3082\u3088\u3044\u56de\u5e30\u30e2\u30c7\u30eb\u304c\u4f5c\u308c\u305d\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002 \u6b21\u56de\u306e\u4e88\u7fd2\u3068\u3057\u3066\u3001\u5168\u8aac\u660e\u5909\u6570\u306e\u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u3082\u4f5c\u3063\u3066\u3001\u8003\u5bdf\u306b\u52a0\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u7dda\u5f62\u56de\u5e30"},{"location":"boston3/#_1","text":"\u4eca\u56de\u306f\u3001\u56de\u5e30\u5206\u6790\u306b\u53d6\u308a\u7d44\u307f\u3001\u672c\u683c\u7684\u306a\u7d71\u8a08\u5b66\u624b\u306e\u624b\u6cd5\u3092\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\u3002 \u30cf\u30f3\u30ba\u30aa\u30f3\u6f14\u7fd2\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u524d\u56de\u307e\u3067\u306e\u540c\u3058\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002","title":"\u56de\u5e30\u5206\u6790"},{"location":"boston3/#_2","text":"\u307e\u305a\u3001\u524d\u56de\u306e\u6f14\u7fd2\u5185\u5bb9\u3092\u601d\u3044\u51fa\u3057\u3066\u3001\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092 df \u306b\u8aad\u307f\u8fbc\u3093\u3067\u304f\u3060\u3055\u3044\u3002","title":"\u6e96\u5099"},{"location":"boston3/#_3","text":"\u524d\u56de\u3001\u6563\u5e03\u56f3\u3068\u76f8\u95a2\u4fc2\u6570\u306e\u6c42\u3081\u65b9\u3092\u5b66\u3073\u307e\u3057\u305f\u3002 \u6700\u5f8c\u306b\u3001\u5f37\u3044\u76f8\u95a2\u304c\u3042\u308b\u6563\u5e03\u56f3\u306b\u30d4\u30c3\u3068\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda( y = ax + b )\u3092\u5f15\u304f\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002 \u6700\u5c0f\u4e8c\u4e57\u6cd5\u306e\u539f\u7406\u306f\u3055\u3066\u304a\u304d\u3001 \u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda\u306b\u8fd1\u4f3c\u3059\u308b \u3068\u3053\u308d\u307e\u3067\u306f\u3001\u305d\u3046\u3044\u3046\u3082\u306e\u304b\u306a\u3068\u7406\u89e3\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002 \u5b9f\u306f\u3001\u3053\u306e\u3088\u3046\u306b y = ax + b \u306b\u8fd1\u4f3c\u3059\u308b\u306e\u306f\u3001 \u7dda\u5f62\u56de\u5e30(Linear Regression) \u3068\u547c\u3070\u308c\u307e\u3059\u3002","title":"\u56de\u5e30\u5206\u6790"},{"location":"boston3/#_4","text":"\u56de\u5e30\u5206\u6790\u3084\u3053\u308c\u4ee5\u964d\u306e\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001 y = ax + b \u306e\u3088\u3046\u306b\u95a2\u4fc2\u3092\u8868\u3059\u5f0f\u3092 \u30e2\u30c7\u30eb \u3001 x \u3092\u8aac\u660e\u5909\u6570\u3001 y \u3092\u76ee\u7684\u5909\u6570\u3068\u547c\u3073\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570 : \u30e2\u30c7\u30eb\u306e\u7279\u5fb4\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306e\u5909\u6570 \u76ee\u7684\u5909\u6570 : \u30e2\u30c7\u30eb\u306e\u5bfe\u8c61\u3068\u306a\u308b\u5909\u6570 \u30c7\u30fc\u30bf\u5217\u306e\u4e2d\u304b\u3089\u3072\u3068\u3064\u306e\u8aac\u660e\u5909\u6570\u3092\u9078\u3093\u3067\u3001\u56de\u5fcc\u5206\u6790\u3092\u884c\u3046\u3053\u3068\u3092 \u5358\u56de\u5e30\u5206\u6790 \u3068\u547c\u3073\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u3092\u62bd\u51fa X = df[['\u90e8\u5c4b\u6570']] # \u3072\u3068\u3064\u9078\u3076 y = df['\u4f4f\u5b85\u4fa1\u683c'] \u8aac\u660e\u5909\u6570\u306f\u3001\uff12\u3064\u4ee5\u4e0a\u9078\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \uff12\u3064\u4ee5\u4e0a\u306e\u56de\u5e30\u5206\u6790\u306f\u3001 \u91cd\u56de\u5e30\u5206\u6790 \u3068\u547c\u3070\u308c\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u3092\u4e8c\u3064\u62bd\u51fa\u3059\u308b X = df[['\u90e8\u5c4b\u6570', '\u7bc9\u5e74']] y = df['\u4f4f\u5b85\u4fa1\u683c'] \u8aac\u660e\u5909\u6570\u306f\u30e2\u30c7\u30eb\u306e\u7279\u5fb4\u3092\u3046\u307e\u304f\u8868\u3059\u5909\u6570\u306b\u306a\u308a\u307e\u3059\u3002 \u3082\u3061\u308d\u3093\u3001\uff13\u3064\u3084\u305d\u308c\u4ee5\u4e0a\u306e\u8aac\u660e\u5909\u6570\u3092\u9078\u3093\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u3002 \u9078\u3093\u3060\u8aac\u660e\u5909\u6570\u306e\u6570\u3092 \u6b21\u5143(dimension) \u3068\u547c\u3073\u307e\u3059\u3002 \uff12\u6b21\u5143\u4ee5\u4e0a\u306e\u8aac\u660e\u5909\u6570\u306f\u3001\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u306e\u6b21\u5143\u3092\u78ba\u8a8d X = df[['\u90e8\u5c4b\u6570', '\u7bc9\u5e74', '\u72af\u7f6a\u7387']] print(X.shape) (512, 3)","title":"\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570"},{"location":"boston3/#_5","text":"\u56de\u5e30\u5206\u6790\u306f\u3001 sklearn\u30e2\u30b8\u30e5\u30fc\u30eb\u306e sklearn.linear_model.LinearRegression \u3092\u7528\u3044\u307e\u3059\u3002 from sklearn.linear_model import LinearRegression model = LinearRegression () model \u306b\u5bfe\u3057\u3066\u3001 fit() \u30e1\u30bd\u30c3\u30c9\u3067\u3001 \u8aac\u660e\u5909\u6570 X \u3068\u76ee\u7684\u5909\u6570 y \u3092\u4e0e\u3048\u308b\u3068\u3001 \u5185\u90e8\u3067\u306f\u6700\u5c0f\u4e8c\u4e57\u6cd5\u3092\u7528\u3044\u3066\u3001\u30e2\u30c7\u30eb\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002 \u307e\u305a\u306f\u3001\u5358\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 '\u5358\u56de\u5e30\u30e2\u30c7\u30eb X = df [[ '\u90e8\u5c4b\u6570' ]] y = df [ '\u4f4f\u5b85\u4fa1\u683c' ] model = LinearRegression () model . fit ( X , y ) \u6a5f\u68b0\u5b66\u7fd2\u3068\u306f \u6a5f\u68b0\u5b66\u7fd2\u3068\u306f\u3001\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u30c7\u30fc\u30bf\u306b\u9069\u5408\u3057\u305f\u30e2\u30c7\u30eb\u3092\u5f97\u308b\u3053\u3068\u3067\u3059\u3002 \u9069\u5408\u3055\u308c\u305f\u56de\u5e30\u30e2\u30c7\u30eb\u304b\u3089\u4fc2\u6570(a)\u3068\u5207\u7247(b)\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u56de\u5e30\u30e2\u30c7\u30eb(\u4fc2\u6570\u3068\u5207\u7247\uff09\u306e\u78ba\u8a8d print ( 'a=' , model . coef_ , ', b=' , model . intercept_ ) a= [9.10210898] , b= -34.67062077643857 \u3064\u307e\u308a\u3001\u6570\u5f0f\u3067\u8868\u3059\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u76f4\u7dda\u306b\u306a\u308a\u307e\u3059\u3002 y_{\\mbox{\u4f4f\u5b85\u4fa1\u683c}} = 9.1 \\times x_{\\mbox{\u90e8\u5c4b\u6570}} - 34.67","title":"\u56de\u5e30\u5206\u6790\u3092\u884c\u3046"},{"location":"boston3/#_6","text":"\u56de\u5e30\u5206\u6790\u306f\u3001\u4e00\u65e6\u3001\u30e2\u30c7\u30eb\u304c\u69cb\u7bc9\u3055\u308c\u308b\u3068\u3001\u4fa1\u683c\u304c\u4e88\u60f3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u90e8\u5c4b\u65704\u306e\u4fa1\u683c\u306f\uff1f model . predict ([( 4.00 ,)]) array([19.94203311]) \u6b21\u306e\u3088\u3046\u306b\u3001 y_pred \u3092\u6c42\u3081\u308b\u3068\u3001 \u5168\u3066\u306e\u8aac\u660e\u5909\u6570 X \u304b\u3089 \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u304b\u3089\u4e88\u6e2c\u3055\u308c\u305f\u4f4f\u5b85\u4fa1\u683c\u3092\u30c7\u30fc\u30bf\u5217\u3067 \u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u56de\u5e30\u30e2\u30c7\u30eb\u304b\u3089\u306e\u4e88\u6e2c\u5024 \u4e88\u6e2c\u5024 y_pred = model . predict ( X ) print ( y_pred ) print(y_pred) \u306e\u5b9f\u884c\u7d50\u679c(\u629c\u7c8b) [25.17574577 23.77402099 30.72803225 29.02593787 30.38215211 ...] \u6563\u5e03\u56f3\u3068\u4e88\u6e2c\u3055\u308c\u305f\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u63cf\u753b plt . scatter ( df [ '\u90e8\u5c4b\u6570' ], df [ '\u4fa1\u683c' ], alpha = 0.5 ) plt . plot ( df [ '\u90e8\u5c4b\u6570' ], y_pred , color = 'black' ) plt . xlabel ( '\u90e8\u5c4b\u6570' ) plt . ylabel ( '\u4fa1\u683c' ) plt . show () \u7dda\u5f62\u56de\u5e30\u306f\u4e88\u6e2c\u30e2\u30c7\u30eb \u5b9f\u306f\u3001\u56de\u5e30\u5206\u6790\u3067\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda\u3092\u8fd1\u4f3c\u3059\u308b\u3053\u3068\u306f\u3001 \u8aac\u660e\u5909\u6570\u304b\u3089\u76ee\u7684\u5909\u6570\u3092\u4e88\u6e2c\u53ef\u80fd\u306b\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u3084AI\u3067\u6b63\u306b\u76ee\u6307\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002","title":"\u30e2\u30c7\u30eb\u3068\u4e88\u6e2c"},{"location":"boston3/#_7","text":"\u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306b\u3088\u308b\u4e88\u6e2c\u306f\u3001\u3069\u306e\u7a0b\u5ea6\u3001\u6b63\u78ba\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f \u5b66\u7fd2\u3055\u308c\u305f\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u3001\u4fa1\u683c\u3092\u4e88\u6e2c\u3057\u3066\u3001\u5b9f\u969b\u306e\u4f4f\u5b85\u4fa1\u683c\uff08\u6b63\u89e3\uff09\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 y_pred = model . predict ( X ) pd . DataFrame ({ '\u5b9f\u6e2c' : df [ '\u4f4f\u5b85\u4fa1\u683c' ], '\u4e88\u6e2c' : y_pred }) . head () \u3084\u306f\u308a\u3001\u30c7\u30fc\u30bf\u5217\u3092\u6bd4\u8f03\u3059\u308b\u3060\u3051\u3067\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u6563\u5e03\u56f3\u3067\u8996\u899a\u5316\u3057\u3066\u307f\u307e\u3059\u3002 plt . scatter ( y , y_pred , color = 'cyan' , alpha = 0.3 ) plt . xlabel ( '\u5b9f\u6e2c' ) plt . ylabel ( '\u4e88\u6e2c' ) plt . ylim ( 0 , 50 ) \u306a\u3093\u304b\u9ad8\u4fa1\u683c\u5e2f( >30 )\u304c\u3046\u307e\u304f\u4e88\u6e2c\u3067\u304d\u3066\u3044\u306a\u3044\u6c17\u304c\u3057\u307e\u3059\u3002 \u6b8b\u5dee \u6b8b\u5dee\u3068\u306f\u3001\u5b9f\u6e2c\u5024\u3068\u4e88\u6e2c\u5024\u306e\u5dee\u3067\u3059\u3002 \u56de\u5e30\u30e2\u30c7\u30eb\u306f\u3001\u6b8b\u5dee\u304c\u6b63\u898f\u5206\u5e03\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u671b\u307e\u3057\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u6b8b\u5dee\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 plt . hist ( y - y_pred , bins = 50 ) plt . show ()","title":"\u56de\u5e30\u30e2\u30c7\u30eb\u306f\u3069\u306e\u7a0b\u5ea6\u6b63\u78ba\u306a\u306e\u304b\uff1f"},{"location":"boston3/#_8","text":"\u5b66\u7fd2\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306e\u6b63\u78ba\u3055\u306f\u3001\u5b9f\u6e2c\u5024\u3068\u4e88\u6e2c\u5024\u306e\u6563\u5e03\u56f3\u3084\u6b8b\u5dee\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u8996\u899a\u7684\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u6b63\u78ba\u3055\u3092\u5b9a\u91cf\u7684\u306b\u6e2c\u308c\u305f\u65b9\u304c\u4fbf\u5229\u3067\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u5b9a\u91cf\u7684\u306b\u8a55\u4fa1\u3059\u308b\u5c3a\u5ea6\u3068\u3057\u3066\u3001 MSE \u3068 \u6c7a\u5b9a\u4fc2\u6570 \u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 MSE \u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee (Mean Squared Error) \u3068\u306f\u3001\u5b9f\u969b\u306e\u5024\u3068\u4e88\u6e2c\u5024\u306e\u7d76\u5bfe\u5024\u306e2\u4e57\u3092\u5e73\u5747\u3057\u305f\u3082\u306e\u3067\u3059\u3002 \u5024\u304c\u5927\u304d\u3044\u307b\u3069\u8aa4\u5dee\u306e\u591a\u3044\u30e2\u30c7\u30eb\u3068\u8a00\u3048\u307e\u3059\u3002\u8a08\u7b97\u5f0f\u306f\u4ee5\u4e0b\u3068\u306a\u308a\u307e\u3059\u3002 MSE(y, \\hat{y}) = \\frac{1}{n} \\sum_{i=0}^{n} (y_i - \\hat{y}_i)^2 \u3053\u306e\u5f0f\u306f\u3001\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306b\u7528\u3044\u305f\u8aa4\u5dee\u3092\u5e73\u5747\u5316\u3057\u305f\u3082\u306e\u3067\u3059\u3002 \u5c0f\u3055\u3044\u307b\u3069\u3001\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u76f4\u7dda\u3068\u3044\u3046\u306e\u306f\u76f4\u611f\u306b\u53cd\u3057\u307e\u305b\u3093\u3002 \u305f\u3060\u3057\u3001\u76ee\u7684\u5909\u6570\u306e\u5206\u6563\u304c\u5927\u304d\u3044\u5834\u5408\u306f\u3001MSE\u3082\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002 sklearn \u30e2\u30b8\u30e5\u30fc\u30eb\u306e sklearn.metrics.mean_squared_error \u306f\u3001MSE\u3092\u6c42\u3081\u308b\u95a2\u6570\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002 from sklearn.metrics import mean_squared_error mse = mean_squared_error ( y , y_pred ) print ( 'MSE:' , mse ) \u5b9f\u884c\u7d50\u679c MSE: 43.60055177116956 \u6c7a\u5b9a\u4fc2\u6570 \u6c7a\u5b9a\u4fc2\u6570 (R2, R-squared, coefficient of determination) \u306f\u3001MSE\u3092\u4f7f\u3063\u3066\u3001\u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u5f53\u3066\u306f\u307e\u308a\u306e\u826f\u3055\u3092\u793a\u3059\u6307\u6a19\u3067\u3059\u3002\u5bc4\u4e0e\u7387\u3068\u3082\u547c\u3070\u308c\u307e\u3059\u3002 R^2(y,\\hat{y}) = 1 - \\frac{\\sum_{i=1}^n (y_i-\\hat{y_i})^2 }{\\sum_{i=1}^n (y_i-\\bar{y})^2},\u3000\\\\ \\mbox{\u305f\u3060\u3057\u3001} \\bar{y} = \\frac{1}{n} \\sum_{i=1}^n y_i \u6700\u3082\u5f53\u3066\u306f\u307e\u308a\u306e\u826f\u3044\u5834\u5408\u3001\u3064\u307e\u308a\u8aa4\u5dee\u306e\u306a\u3044\u5834\u5408\u30011.0 \u3068\u306a\u308a\u307e\u3059\u3002 (\u5f53\u3066\u306f\u307e\u308a\u306e\u60aa\u3044\u5834\u5408\u3001\u30de\u30a4\u30ca\u30b9\u3068\u306a\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059)\u3002MSE\u3068\u7570\u306a\u308a\u3001\u76ee\u7684\u5909\u6570\u306e\u5206\u6563\u306b\u4f9d\u5b58\u3057\u306a\u3044\u305f\u3081\u3001\u76ee\u7684\u5909\u6570\u306e\u30b9\u30b1\u30fc\u30eb\u304c\u7570\u306a\u3063\u3066\u3082\u4e00\u822c\u7684\u306a\u6307\u6a19\u3068\u306a\u308a\u307e\u3059\u3002 from sklearn.metrics import r2_score r2 = r2_score ( y , y_pred ) print ( '\u6c7a\u5b9a\u4fc2\u6570(R2):' , r2 ) \u5b9f\u884c\u7d50\u679c \u6c7a\u5b9a\u4fc2\u6570(R2): 0.48352545599133423","title":"\u5b9a\u91cf\u7684\u306a\u8a55\u4fa1\u5c3a\u5ea6"},{"location":"boston3/#_9","text":"\u91cd\u56de\u5e30\u5206\u6790\u306f\u3001\u4e8c\u3064\u4ee5\u4e0a\u306e\u8aac\u660e\u5909\u6570\u3092\u9078\u3073\u307e\u3059\u3002 Let's try \u4f4f\u5b85\u4fa1\u683c\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u305d\u3046\u306a\u30c7\u30fc\u30bf\u5217\uff08\u8aac\u660e\u5909\u6570\uff09\u3092\u3075\u305f\u3064\u9078\u3093\u3067\u307f\u3088\u3046\u3002 \u4e0d\u52d5\u7523\u306e\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304b\u3089\u3001\u4f55\u304c\u5f71\u97ff\u3059\u308b\u304b\u3001\u308f\u304b\u308a\u307e\u305b\u3093\u3002 \u3068\u308a\u3042\u3048\u305a\u3001\u50d5\u306e\u7d4c\u9a13\u304b\u3089 '\u901a\u52e4' \u3068 '\u6559\u54e1' \u8fba\u308a\u304c\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u7768\u3093\u3067\u3001 \u8aac\u660e\u5909\u6570\u306b\u9078\u3093\u3067\u307f\u307e\u3057\u305f\u3002 \u307f\u306a\u3055\u3093\u304c\u3001\u9078\u3093\u3060\u8aac\u660e\u5909\u6570\u306b\u5909\u3048\u3066\u8a66\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 X = df [[ '\u901a\u52e4' , '\u6559\u54e1' ]] # \u8aac\u660e\u5909\u6570 y = df [ '\u4f4f\u5b85\u4fa1\u683c' ] # \u76ee\u7684\u5909\u6570 pd . concat ([ X , y ], axis = 1 ) . head () #\u6700\u521d\u306e5\u4ef6\u306e\u307f\u307f\u3066\u307f\u308b","title":"\u91cd\u56de\u5e30"},{"location":"boston3/#_10","text":"\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u76ee\u7684\u306e\u3072\u3068\u3064\u306f\u3001\u4eee\u8aac\u691c\u8a3c\u306b\u3088\u308b\u3088\u308a\u7cbe\u5ea6\u306e\u9ad8\u3044\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001\u90e8\u5c4b\u6570\u3084\u72af\u7f6a\u7387\u306a\u3069\u8272\u3005\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u508d\u89b3\u3059\u308b\u3068\u304d\u306f\u3001\u8272\u3005\u306a\u4eee\u8aac\u3092\u7acb\u3066\u306a\u304c\u3089\u307f\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u4f8b \u90e8\u5c4b\u6570\u304c\u5897\u3048\u308b\u3068\u4fa1\u683c\u4e0a\u304c\u308a\u305d\u3046\u3060\u306a.. \u72af\u7f6a\u7387\u304c\u9ad8\u3044\u3068\u4f4f\u5b85\u4fa1\u683c\u306f\u4e0b\u304c\u308a\u305d\u3046\u3060\u306a.. \u74b0\u5883\u6c5a\u67d3\u306f\u4f4f\u6c11\u306b\u306f\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u4f4f\u5b85\u4fa1\u683c\u306b\u5f71\u97ff\u3057\u306a\u3044\u3060\u308d\u3046\u306a\u3069 \u3053\u306e\u3088\u3046\u306a\u4eee\u8aac\u3092\u7acb\u3066\u3066\u3001\u4eee\u8aac\u691c\u8a3c\u3092\u3059\u308b\u306e\u306f\u30c7\u30fc\u30bf\u5206\u6790\u306e\u918d\u9190\u5473\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u5206\u6790\u3068\u53ef\u8996\u5316\u3092\u99c6\u4f7f\u3057\u3066\u3001\u4f4f\u5b85\u4fa1\u683c\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u8aac\u660e\u5909\u6570\u3092\u5206\u6790\u3057\u3066\u3044\u304d\u307e\u3059\u3002","title":"\u4eee\u8aac\u3068\u691c\u8a3c"},{"location":"boston3/#_11","text":"\u8aac\u660e\u5909\u6570\u306e\u5019\u88dc\u3092\u8abf\u3079\u308b\u3068\u304d\u306b\u30d2\u30f3\u30c8\u3068\u306a\u308b\u306e\u304c\u3001\u76ee\u7684\u5909\u6570\u3068\u306e\u76f8\u95a2\u3067\u3059\u3002 \u4eee\u8aac:\u300c\u72af\u7f6a\u7387\u304c\u9ad8\u3051\u308c\u3070\u4f4f\u5b85\u4fa1\u683c\u304c\u4f4e\u304f\u306a\u308a\u305d\u3046\u3060\u306a\u300d sns . jointplot ( x = \"\u72af\u7f6a\u7387\" , y = \"\u4f4f\u5b85\u4fa1\u683c\" , data = df ) plt . show () \u4eee\u8aac(2): \u90e8\u5c4b\u6570\u304c\u591a\u3044\u307b\u3069\u4fa1\u683c\u304c\u9ad8\u304f\u306a\u308a\u305d\u3046\u3060\u306a sns . jointplot ( x = '\u90e8\u5c4b\u6570' , y = '\u4f4f\u5b85\u4fa1\u683c' , data = df ) corr = pearsonr ( df [ '\u90e8\u5c4b\u6570' ], df [ '\u4f4f\u5b85\u4fa1\u683c' ]) print ( '\u30d4\u30a2\u30bd\u30f3\u76f8\u95a2\u4fc2\u6570:' , corr [ 0 ]) print ( 'p\u5024:' , corr [ 1 ]) \u4eee\u8aac(3) NOx \u306f\u4f4f\u5b85\u4fa1\u683c\u306b\u5f71\u97ff\u306a\u3044 (\u30ab\u30fc\u30cd\u30eb\u56f3) sns . kdeplot ( data = df , x = \"\u5de5\u5834\" , y = \"\u4f4f\u5b85\u4fa1\u683c\" , shade = True , thresh = 0.05 ) corr = pearsonr ( df [ '\u5de5\u5834' ], df [ '\u4f4f\u5b85\u4fa1\u683c' ]) print ( '\u30d4\u30a2\u30bd\u30f3\u76f8\u95a2\u4fc2\u6570:' , corr [ 0 ]) print ( 'p\u5024:' , corr [ 1 ]) \u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u3001\u5168\u90e8\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff01 cor = df . corr () plt . figure ( figsize = ( 20 , 10 )) sns . heatmap ( cor [( cor >= 0.4 ) | ( cor <= - 0.4 )], annot = True , cmap = 'Blues' ) fig , ax = plt . subplots ( round ( len ( df . columns ) / 3 ), 3 , figsize = ( 18 , 18 )) fig . subplots_adjust ( hspace = 0.5 ) # \u9593\u9694\u3092\u8abf\u6574 for i , ax in enumerate ( fig . axes ): if i < len ( df . columns ) - 1 : sns . regplot ( x = df . columns [ i ], y = '\u4f4f\u5b85\u4fa1\u683c' , data = df [ df . columns ], ax = ax )","title":"\u30d2\u30f3\u30c8\u306f\u76f8\u95a2"},{"location":"boston3/#_12","text":"\u307e\u305a\u306f\u3001\u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u3092\u898b\u308b\u306e\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002 sns . distplot ( df [ '\u4f4f\u5b85\u4fa1\u683c' ], color = 'green' , bins = 100 , hist_kws = { 'alpha' : 0.4 }) df . hist ( figsize = ( 16 , 20 ), xlabelsize = 12 , ylabelsize = 12 ) \u76ee\u7684\u5909\u6570\u304c\u6b63\u898f\u5206\u5e03\u3067\u306a\u3044!! \u7d71\u8a08\u5b66\u3092\u3057\u3063\u304b\u308a\u5b66\u3093\u3067\u3044\u306a\u3044\u3068\u3001\u56f0\u3063\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 https://toukeier.hatenablog.com/entry/2019/09/08/224346","title":"\u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u3092\u898b\u308b"},{"location":"boston3/#_13","text":"\u91cd\u56de\u5e30\u5206\u6790\u306f\u3001\u8907\u6570\u306e\u8aac\u660e\u5909\u6570\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u4fa1\u683c\u4ee5\u5916\u306e\u5168\u3066\u306e\u30c7\u30fc\u30bf\u5217\u3092\u8aac\u660e\u5909\u6570\u306b\u3057\u3066\u3001\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 y = df [ '\u4fa1\u683c' ] print ( df . columns [: - 1 ]) X = df [ df . columns [: - 1 ]] # \u4fa1\u683c\u4ee5\u5916\u306e\u5168\u3066 model = LinearRegression () model . fit ( X , y ) y_pred = model . predict ( X ) plt . scatter ( y , y_pred , c = 'red' , alpha = 0.3 ) print ( \"MSE: \" , mean_squared_error ( y , y_pred ) ) print ( 'R2' , r2_score ( y , y_pred ))","title":"\u5168\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570"},{"location":"boston3/#_14","text":"'\u4f4f\u5b85\u4fa1\u683c' \u3092\u76ee\u7684\u5909\u6570\u3068\u3057\u3066\u3001\u56de\u5e30\u5206\u6790\u3057\u3066\u307f\u3088\u3046\u3002 \u5358\u56de\u5e30\u5206\u6790\u3067\u3001\u6c7a\u5b9a\u4fc2\u6570(R2)\u304c\u6700\u5927\u306b\u306a\u308b\u8aac\u660e\u5909\u6570\u3092\u63a2\u3057\u3066\u307f\u3088\u3046\u3002 \u91cd\u56de\u5e30\u5206\u6790\u3067\u3001\u6c7a\u5b9a\u4fc2\u6570(R2)\u304c\u6700\u5927\u306b\u306a\u308b\u8aac\u660e\u5909\u6570\u3092\uff12\u3064\u63a2\u3057\u3066\u307f\u3088\u3046\u3002 \u81ea\u5206\u306a\u308a\u306b\u4eee\u8aac\u3092\u7acb\u3066\u3066\uff13\u3064\u306e\u8aac\u660e\u5909\u6570\u3092\u9078\u3073\u3001 \u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u306e\u6c7a\u5b9a\u4fc2\u6570(R2)\u304b\u3089\u9078\u3093\u3060\u8aac\u660e\u5909\u6570\u304c\u4f4f\u5b85\u4fa1\u683c\u306e\u7279\u5fb4\u3092\u3088\u304f\u8aac\u660e\u3057\u3066\u3044\u308b\u304b\u8003\u5bdf\u3057\u3066\u307f\u3088\u3046\u3002 \u8003\u5bdf\u3092\u3059\u308b\u3068\u304d\u306f\u3001\u76f8\u95a2\u4fc2\u6570\u3092\u610f\u8b58\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002 \u7279\u306b\u3001\u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u306f\u3001\u8aac\u660e\u5909\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u3088\u3063\u3066\u306f\u3001 \u591a\u91cd\u5171\u7dda\u6027(multi-colinearlity\u3001\u548c\u88fd\u82f1\u8a9e: \u30de\u30eb\u30c1\u30b3) \u304c\u751f\u3058\u308b\u3053\u3068\u304c\u3042\u308a\u3001\u8aac\u660e\u529b\u304c\u4f4e\u4e0b\u3057\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u5358\u7d14\u306b\u76f8\u95a2\u304c\u9ad8\u3044\u8aac\u660e\u5909\u6570\u3092\u9078\u3076\u3060\u3051\u3067\u306f\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u30de\u30eb\u30c1\u30b3\u306b\u306f\u3054\u6ce8\u610f \u30de\u30eb\u30c1\u30b3\u3078\u306e\u5bfe\u5fdc\u306f\u5206\u91ce\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002 * \u7d71\u8a08\u5b66\u7684\u306b\u306f\u3001\u653e\u7f6e\u3057\u3066\u306f\u3044\u3051\u306a\u3044 * \u6a5f\u68b0\u5b66\u7fd2\u7684\u306b\u306f\u3001\u30e2\u30c7\u30eb\u306e\u8aac\u660e\u529b\u3092\u4f4e\u4e0b\u3055\u305b\u308b\u3082\u306e\u306e\u3001\u4e88\u6e2c\u7cbe\u5ea6\u306b\u3042\u307e\u308a\u5f71\u97ff\u3092\u4e0e\u3048\u306a\u3044 \u307e\u305f\u3001\u8aac\u660e\u5909\u6570\u3092\u5168\u3066\u5165\u308c\u308b\u3068\u3001\u4e00\u898b\u3001\u6700\u3082\u3088\u3044\u56de\u5e30\u30e2\u30c7\u30eb\u304c\u4f5c\u308c\u305d\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002 \u6b21\u56de\u306e\u4e88\u7fd2\u3068\u3057\u3066\u3001\u5168\u8aac\u660e\u5909\u6570\u306e\u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u3082\u4f5c\u3063\u3066\u3001\u8003\u5bdf\u306b\u52a0\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u6f14\u7fd2\u554f\u984c"},{"location":"boston4/","text":"\u7d71\u8a08\u304b\u3089AI\u3078 # \u5358\u56de\u5e30\u3068\u91cd\u56de\u5e30\u5206\u6790\u306f\u3001\u3082\u3068\u3082\u3068\u7d71\u8a08\u5b66\u306e\u5206\u91ce\u3067\u7814\u7a76\u3055\u308c\u3066\u304d\u305f\u624b\u6cd5\u3067\u3059\u3002 \u7d71\u8a08\u5b66\u3067\u306f\u3001\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u3092\u89e3\u91c8\u3059\u308b\u3053\u3068\u3092\u91cd\u8996\u3057\u307e\u3059\u3002 AI\u3067\u306f\u3001\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u3092\u89e3\u91c8\u3059\u308b\u3053\u3068\u3088\u308a\u3001 \u672a\u6765\uff08\u672a\u77e5\u306e\u30c7\u30fc\u30bf\uff09\u3092\u6b63\u3057\u304f\u4e88\u6e2c\u3059\u308b\u3053\u3068 \u3092\u91cd\u8996\u3057\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001AI\u306e\u6d41\u5100\u306b\u3057\u305f\u304c\u3063\u3066\u3001\u3088\u308a\u6b63\u78ba\u306b\u4e88\u6e2c\u3067\u304d\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002 \u3055\u3066\u3001\u4eca\u56de\u3082\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 \u6f14\u7fd2\u304c\u59cb\u307e\u308b\u524d\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099\u5b8c\u4e86 df = pd.read_csv('boston.csv') df.drop('\u9ed2\u4eba', axis=1, inplace=True) df.head() \u3082\u3046\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u98fd\u304d\u305f\u65b9\u306e\u305f\u3081\u306b\u3001 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af\uff12 \u3067\u306f\u3001\u5225\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7df4\u7fd2\u3092\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u3002 \u672a\u6765\u3092\u4e88\u6e2c\u3059\u308b # \u6a5f\u68b0\u5b66\u7fd2\u3084AI\u306e\u958b\u767a\u3067\u306f\u3001 \u904e\u5b66\u7fd2 \u3068\u3044\u3046\u73fe\u8c61\u304c\u975e\u5e38\u306b\u5acc\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306f\u3001\u4e88\u6e2c\u30e2\u30c7\u30eb\u304c\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u3067\u3042\u308b\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u904e\u5270\u306b\u9069\u5408\u3057\u904e\u304e\u3066\u3057\u307e\u3063\u3066\u3001 \u672a\u6765\u306e\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u3078\u306e\u4e88\u6e2c\u304c\u3042\u307e\u308a\u6b63\u78ba\u306b\u3067\u304d\u306a\u304f\u306a\u308b\u73fe\u8c61\u3067\u3059\u3002 \u904e\u5b66\u7fd2 \u904e\u53bb\u554f\u3070\u304b\u308a\u7e70\u308a\u8fd4\u3057\u7df4\u7fd2\u3057\u3066\u3082\u3001\u672c\u756a\u306e\u8a66\u9a13\u306e\u554f\u984c\u306f\u89e3\u3051\u307e\u305b\u3093\u3088\u306d\u3002 \u6a5f\u68b0\u5b66\u7fd2\u3084AI\u3067\u306f\u3001\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\u3001 \u672a\u6765\u306e \u672a\u77e5\u306e\u30c7\u30fc\u30bf \u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u958b\u767a\u304c\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5 \u3068\u3044\u3046\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6c4e\u5316\u6027\u80fd\u3092\u8a55\u4fa1\u3059\u308b\u624b\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u91cd\u56de\u5e30\u5206\u6790 # \u307e\u305a\u3001\u524d\u56de\u306e\u56de\u5e30\u5206\u6790\u3092\u3092\u601d\u3044\u51fa\u3057\u306a\u304c\u3089 '\u4f4f\u5b85\u4fa1\u683c' \u3092\u76ee\u7684\u5909\u6570\u3001 \u305d\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u5217\u3092\u5168\u3066\u8aac\u660e\u5909\u6570\u3068\u3057\u305f\u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002 \u91cd\u56de\u5e30\u30e2\u30c7\u30eb from sklearn.metrics import mean_squared_error , r2_score X = df [ df . columns [: - 1 ]] # \u4fa1\u683c\u4ee5\u5916\u3092\u5168\u3066\u8aac\u660e\u5909\u6570\u306b y = df [ '\u4f4f\u5b85\u4fa1\u683c' ] model = LinearRegression () model . fit ( X , y ) y_pred = model . predict ( X ) print ( '\u8aac\u660e\u5909\u6570:' , X . columns , '\u6b21\u5143:' , X . shape ) print ( \"MSE: \" , mean_squared_error ( y , y_pred )) print ( 'R2' , r2_score ( y , y_pred )) plt . figure ( figsize = ( 7 , 7 )) plt . scatter ( y , y_pred , c = 'red' , alpha = 0.3 ) plt . show () \u8aac\u660e\u5909\u6570: Index(['\u72af\u7f6a\u7387', '\u7dd1\u5730', '\u5de5\u5834', '\u5ddd\u8fd1', '\u5927\u6c17\u6c5a\u67d3', '\u90e8\u5c4b\u6570', '\u7bc9\u5e74', '\u901a\u52e4', '\u4ea4\u901a', '\u8cc7\u7523\u7a0e', '\u6559\u54e1\u6bd4','\u4f4e\u6240\u5f97\u7387'], dtype='object') \u6b21\u5143: (506, 12) MSE: 22.429681439489933 R2 0.7343070437613075 \u6c7a\u5b9a\u4fc2\u6570(R2)\u306b\u7740\u76ee\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u3053\u3053\u304b\u3089\u3001\u904e\u5b66\u7fd2\u3092\u9632\u304e\u306a\u304c\u3089\u3001R22\u30b9\u30b3\u30a2\u304c\u9ad8\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u65b9\u6cd5\u3092\u307f\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5 # \u4eba\u5de5\u77e5\u80fd\u3067\u306f\u3001\u904e\u53bb\u306b\u5b66\u7fd2\u3057\u305f\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\u3001 \u672a\u6765\u306e \u672a\u77e5\u306e\u30c7\u30fc\u30bf \u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u7cbe\u5ea6\u304c\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5 \u306f\u3001 \u5168\u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u3067\u3001\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u3092\u8a55\u4fa1\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u672a\u77e5\u3068\u3057\u3066\u5b66\u7fd2\u306b\u4f7f\u308f\u306a\u3044\u3053\u3068\u3067\u3001\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7cbe\u5ea6\u304c\u6e2c\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf : \u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf : \u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf sklearn \u306b\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3059\u308b\u95a2\u6570 train_test_split() \u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3057\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272 test_size : \u8a13\u7df4\u7528(70%),\u30c6\u30b9\u30c8\u7528(30%) random_state=0 : \u4e71\u6570\u306e\u751f\u6210\u3092\u56fa\u5b9a\u3057\u3001\u6bce\u56de\u540c\u3058\u4e71\u6570\u3067\u5206\u5272\u3055\u305b\u308b \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272 from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.3 , random_state = 0 ) print ( '\u8a13\u7df4\u30c7\u30fc\u30bf\u6570:' , len ( X_train )) print ( '\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570:' , len ( X_test )) \u8a13\u7df4\u30c7\u30fc\u30bf\u6570: 354 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570: 152 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u5b66\u7fd2 # \u5b66\u7fd2\u306f\u3001 \u8a13\u7df4\u30c7\u30fc\u30bf \u306b\u5bfe\u3057\u3066\u306e\u307f\u884c\u3044\u307e\u3059\u3002 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3092\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 \u6a5f\u68b0\u5b66\u7fd2\u7684\u306b\u306f\u30c1\u30fc\u30c8\u884c\u70ba\uff08\u30ab\u30f3\u30cb\u30f3\u30b0\uff09\u306b\u306a\u308a\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u5b9f\u884c model . fit ( X_train , y_train ) \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u8a55\u4fa1 # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf X_test \u3068 y_test \u306f\u3001\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u306b\u306f\u4e00\u5207\u4f7f\u308f\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3060\u304b\u3089\u3001\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306b\u3068\u3063\u3066\u3001\u672a\u77e5\u306e\u672a\u6765\u306b\u6765\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u30c7\u30fc\u30bf\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002 \u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u884c\u3044\u307e\u3059\u3002 X_test : \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8aac\u660e\u5909\u6570 y_test : \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u76ee\u7684\u5909\u6570\uff08\u3064\u307e\u308a\u3001\u6b63\u89e3\uff09 y_pred: : \u30e2\u30c7\u30eb\u304b\u3089\u4e88\u6e2c\u3055\u308c\u305f\u30c7\u30fc\u30bf\u5217 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6c7a\u5b9a\u4fc2\u6570(R2) y_pred = model.predict(X_test) print(\"MSE(\u30c6\u30b9\u30c8): \", mean_squared_error(y_test, y_pred) ) print('R2(\u30c6\u30b9\u30c8):', r2_score(y_test, y_pred)) MSE(\u30c6\u30b9\u30c8): 28.14679026854114 R2(\u30c6\u30b9\u30c8): 0.6619633616256454 MSE(\u30c6\u30b9\u30c8)\u3084R2(\u30c6\u30b9\u30c8)\u306f\u3001\u5b66\u7fd2\u3057\u3066\u3044\u306a\u3044\u672a\u77e5\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7cbe\u5ea6\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u3078\u306e\u6307\u6a19\u3092 \u6c4e\u5316\u6027\u80fd \u3068\u3044\u3044\u307e\u3059\u3002 \u904e\u5b66\u7fd2\u306e\u30c1\u30a7\u30c3\u30af # \u904e\u5b66\u7fd2\u306f\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u904e\u5ea6\u306b\u5b66\u7fd2\u3057\u3066\u3057\u307e\u3046\u73fe\u8c61\u3067\u3059\u3002 \u3053\u3061\u3089\u306f\u3001\u5c11\u3057\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u304c\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u7cbe\u5ea6\u3068\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3053\u3068\u3067\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u904e\u5b66\u7fd2\u306e\u30c1\u30a7\u30c3\u30af print('R2(\u8a13\u7df4):', r2_score(y_train, model.predict(X_train))) print('R2(\u30c6\u30b9\u30c8):', r2_score(y_test, y_pred)) R2(\u8a13\u7df4): 0.7614925768121829 R2(\u30c6\u30b9\u30c8): 0.6619633616256454 \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30b9\u30b3\u30a2\u304c\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u6bd4\u3079\u3066\u660e\u3089\u304b\u306b\u9ad8\u3044\u3068\u304d\u306f\u3001 \u904e\u5b66\u7fd2 \u3092\u7591\u3044\u307e\u3057\u3087\u3046\u3002 \u3061\u306a\u307f\u306b\u3001\u4eca\u56de\u3001\u4f5c\u6210\u3057\u305f\u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u306f\u3001\u660e\u3089\u304b\u306b\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30b9\u30b3\u30a2\u306e\u65b9\u304c\u9ad8\u3044\u3067\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u904e\u5b66\u7fd2\u306e\u767a\u751f\u3092\u7591\u3046\u3079\u304d\u3067\u3059\u3002 \u904e\u5b66\u7fd2\u306e\u9632\u304e\u65b9 \u904e\u5b66\u7fd2\u306f\u3001\u5b66\u7fd2\u304c\u3042\u307e\u308a\u9032\u307e\u306a\u3044\u3088\u3046\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u9632\u304e\u307e\u3059\u3002 \u6a5f\u68b0\u5b66\u7fd2\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u3063\u3066\u3001\u9632\u304e\u65b9\u306f\u7570\u306a\u308a\u307e\u3059\u3002 \u4ea4\u5dee\u691c\u8a3c\uff08\u2605\uff09 # \u4ea4\u5dee\u691c\u8a3c\uff08\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3, CV)\u306f\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3059\u308b\u70b9\u306f\u540c\u3058\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u307e\u305aK\u500b\u306b\u5206\u5272\u3057\u3066\u3001\u305d\u306e\u3046\u3061\u3072\u3068\u3064\u3060\u3051\u3092\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3001\u6b8b\u308a\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001 \u5b66\u7fd2\u30fb\u8a55\u4fa1\u3057\u307e\u3059\u3002\uff12\u56de\u76ee\u306f\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5207\u308a\u66ff\u3048\u3066k\u56de\u8a55\u4fa1\u3057\u307e\u3059\u3002 \u305d\u3057\u3066\u3001\u5404\u56de\u3067\u6e2c\u5b9a\u3057\u305f\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3067\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u3092\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002 sklearn \u3067\u306f\u3001 cross_val_score \u3068\u3057\u3066\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306f\u3059\u3054\u304f\u4fbf\u5229\u306a\u95a2\u6570\u3067\u3001\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u305b\u3070\u3001\u3042\u3068\u306f\u52dd\u624b\u306b\u8a08\u7b97\u3057\u3066\u304f\u308c\u307e\u3059\u3002 cross_val_score(\u30e2\u30c7\u30eb, X, y, cv=5, scoring='r2') \u3072\u3068\u3064\u6ce8\u610f\u3059\u308b\u70b9\u306f\u3001\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307ek\u7b49\u5206\u3057\u3066\u3057\u307e\u3046\u70b9\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u306b\u504f\u308a\u304c\u3042\u308b\u3068\u3001\u671f\u5f85\u3057\u305f\u7d50\u679c\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u4f55\u304b\u5909\u3060\u306a\u3068\u601d\u3063\u305f\u3089\u3001\u4e8b\u524d\u306b\u30e9\u30f3\u30c0\u30e0\u5316\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u7dda\u5f62\u56de\u5e30\u306e\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 from sklearn.model_selection import cross_validate , cross_val_score df = df . sample ( 500 ) #500\u500b\u307b\u3069\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 X = df [ df . columns [: - 1 ]] # \u4fa1\u683c\u4ee5\u5916\u3092\u5168\u3066\u8aac\u660e\u5909\u6570\u306b y = df [ '\u4f4f\u5b85\u4fa1\u683c' ] scores = cross_val_score ( LinearRegression (), X , y , cv = 5 , scoring = 'r2' ) print ( scores ) [0.7008421 0.60231973 0.76837893 0.70741722 0.72919493] cross_val_score() \u306e\u7d50\u679c\u306f\u30015\u56de\u5206\u306e\u30b9\u30b3\u30a2\u3067\u5e30\u3063\u3066\u304d\u307e\u3059\u3002 \u3053\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3059\u304c\u3001boxplot \u306a\u3069\u3092\u8868\u793a\u3057\u3066\u3082\u9762\u767d\u3044\u3067\u3059\u3002 \u8a73\u3057\u304f\u306f\u3001\u6f14\u7fd2\u554f\u984c\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6c7a\u5b9a\u6728 # \u4eca\u307e\u3067\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3068\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u790e\u4e2d\u306e\u57fa\u790e\u306a\u306e\u3067\u3001\u7dda\u5f62\u56de\u5e30\uff08\u5358\u56de\u5e30\u3068\u91cd\u56de\u5e30\uff09\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002 \u3057\u304b\u3057\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u9577\u8db3\u306e\u9032\u6b69\u3092\u9042\u3052\u3066\u3044\u308b\u306e\u3067\u3001 \u826f\u3044\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3044\u306e\u306a\u3089\u3001\u7dda\u5f62\u56de\u5e30\u306b\u3053\u3060\u308f\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u73fe\u5728\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u696d\u52d9\u306e\u5834\u3067\u4eba\u6c17\u304c\u9ad8\u3044\u306e\u306f\u3001 \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3001XGDBoost\u3001\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\u304c\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u4e00\u65b9\u3001\u4eba\u5de5\u77e5\u80fd\u3067\u306f\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7cfb\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001\u3082\u3046\u3072\u3068\u3064\u306e\u5b9a\u756a\u306e\u56de\u5e30\u5206\u6790\u3067\u3042\u308b\u3001 \u6c7a\u5b9a\u6728 \u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u6c7a\u5b9a\u6728\u306e\u3057\u304f\u307f # \u6c7a\u5b9a\u6728\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3084XGDBoost \u306e\u5143\u306b\u306a\u3063\u3066\u3044\u308b\u57fa\u672c\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002 \u975e\u7dda\u5f62\u56de\u5e30\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306a\u306e\u3067\u3001\u7dda\u5f62\u30e2\u30c7\u30eb\u304c\u3046\u307e\u304f\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u3068\u304d\u306b\u6709\u52b9\u306a\u624b\u6bb5\u306b\u306a\u308a\u307e\u3059\u3002 \u6c7a\u5b9a\u6728\u306e\u5229\u7528\u6cd5 # \u6c7a\u5b9a\u6728(\u56de\u5e30) from sklearn.tree import DecisionTreeRegressor \u3042\u3068\u306f\u3001 LinearRegression() \u306e\u4ee3\u308f\u308a\u306b\u3001 DecisionTreeRegressor() \u3092\u4f7f\u3048\u3070\u3001 fit() \u3084 predict() \u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u306f \u5168\u304f\u540c\u3058\u3088\u3046\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 model = DecisionTreeRegressor () model . fit ( X_train , y_train ) y_pred = model . predict ( X_test ) print ( 'R2(\u8a13\u7df4):' , r2_score ( y_train , model . predict ( X_train ))) print ( 'R2(\u30c6\u30b9\u30c8):' , r2_score ( y_test , y_pred )) plt . figure ( figsize = ( 7 , 7 )) plt . scatter ( y , y_pred , c = 'red' , alpha = 0.3 ) plt . show () R2(\u8a13\u7df4): 1.0 R2(\u30c6\u30b9\u30c8): 0.6597361898690233 \u8a13\u7df4\u30c7\u30fc\u30bf\u306f\u3001\u7d20\u6674\u3089\u3057\u3044\u30b9\u30b3\u30a2\u3092\u51fa\u3057\u307e\u3057\u305f\u304c\u3001\u904e\u5b66\u7fd2\u3067\u3059\u306d\u3002\u305f\u3076\u3093\u3002 \u3061\u306a\u307f\u306b\u6c7a\u5b9a\u6728\u3092\u8868\u793a\u3059\u308b\u3068\u304d\u306f\u3001\u6b21\u306e\u3088\u3046\u306b plot_tree \u3092\u4f7f\u3044\u307e\u3059\u3002 \u6c7a\u5b9a\u6728\u3092\u8868\u793a\u3059\u308b from sklearn.tree import plot_tree plot_tree(model, feature_names=X.columns, filled=True) plt.show() maxdepth \u4e0a\u306e\u56f3\u306f\u3001 DecisionTreeRegressor(maxdepth=2) \u3067\u5b66\u7fd2\u3057\u305f\u3068\u304d\u3067\u3059\u3002 \u4f55\u3082\u6307\u5b9a\u3057\u306a\u3044\u3068\u7121\u5236\u9650\u306b\u6728\u3092\u5206\u5272\u3057\u3066\u3044\u304d\u307e\u3059\u3002 \u91cd\u8981\u5ea6 # \u6c7a\u5b9a\u6728\u306e\u9762\u767d\u3044\u3068\u3053\u308d\u306f\u3001\u3069\u306e\u8aac\u660e\u5909\u6570\u304c\u30e2\u30c7\u30eb\u306b\u5bc4\u4e0e\u3057\u3066\u3044\u308b\u304b\u7c21\u5358\u306b \u53ef\u8996\u5316\u3067\u304d\u308b\u70b9\u3067\u3059\u3002 \u91cd\u8981\u5ea6(importance) \u7279\u5fb4\u91cf\u306e\u5206\u5272\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5206\u985e\u306b\u3069\u308c\u304f\u3089\u3044\u5bc4\u4e0e\u3057\u3066\u3044\u308b\u304b\u3092\u6e2c\u308b\u6307\u6a19 \u6c7a\u5b9a\u6728\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u304c\u7d42\u308f\u308b\u3068\u3001 feature_importances_ \u306b \u5404\u8aac\u660e\u5909\u6570\u3054\u3068\u306e\u91cd\u8981\u5ea6\u304c\u7b97\u51fa\u3055\u308c\u3066\u8a18\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u91cd\u8981\u5ea6\u3092\u53d6\u308a\u51fa\u3057\u3066\u8868\u793a\u3057\u3066\u3044\u307f\u308b for column , importance in zip ( X_train . columns , model . feature_importances_ ): print ( f ' { column } { importance : .5f } ' ) print ( sum ( model . feature_importances_ )) \u72af\u7f6a\u7387 0.08447 \u7dd1\u5730 0.00049 \u5de5\u5834 0.00882 \u5ddd\u8fd1 0.00026 \u5927\u6c17\u6c5a\u67d3 0.02107 \u90e8\u5c4b\u6570 0.60087 \u7bc9\u5e74 0.00893 \u901a\u52e4 0.05647 \u4ea4\u901a 0.00276 \u8cc7\u7523\u7a0e 0.00792 \u6559\u54e1\u6bd4 0.03026 \u4f4e\u6240\u5f97\u7387 0.17767 1.0 Warning \u91cd\u8981\u5ea6\u306f\u3001\u5408\u8a08\u304c1.0\u306b\u306a\u308b\u3088\u3046\u306b\u6b63\u898f\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u68d2\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3057\u3066\u307f\u308b\u3068\u3001\u3088\u308a\u8996\u899a\u7684\u306b\u78ba\u8a8d\u3057\u3084\u3059\u3044\u3067\u3057\u3087\u3046\u3002 \u68d2\u30b0\u30e9\u30d5\u3067\u8868\u793a plt.figure(figsize=(12, 6)) plt.barh(X_train.columns, model.feature_importances_) plt.show() \u6728\u306e\u6df1\u3055\u3092\u8abf\u6574\u3059\u308b\uff08\u2605\uff09 # \u6c7a\u5b9a\u6728\u306f\u3001 maxdepth \u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001 \u5b66\u7fd2\u3092\u9032\u3081\u308b\u6df1\u3055\u3092\u8abf\u6574\u3067\u304d\u307e\u3059\u3002 \u4f8b. \u6df1\u3055\u30923\u307e\u3067\u306b\u3059\u308b model = DecisionTreeRegressor ( maxdepth = 3 ) \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3084AI\u30a8\u30f3\u30b8\u30cb\u30a2\u304c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u524d\u306b\u8a2d\u5b9a\u3059\u3079\u304d\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u3053\u3068 \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574\u304c\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3084AI\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u8155\u306e\u898b\u305b\u6240\u3067\u3059\u3002 \u3082\u3061\u308d\u3093\u3001\u624b\u4f5c\u696d\u3067\u8abf\u6574\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3093\u3067\u8abf\u3079\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 maxdepth\u306e\u8abf\u6574 y = [] y2 = [] for depth in range ( 1 , 11 ): model = DecisionTreeRegressor ( max_depth = depth ) # None \u5236\u9650\u306a\u3057 model . fit ( X_train , y_train ) r2_train = r2_score ( y_train , model . predict ( X_train )) r2_test = r2_score ( y_test , model . predict ( X_test )) y . append ( r2_train ) y2 . append ( r2_test ) print ( f 'depth= { depth } , R2(train)= { r2_train : .4f } , R2(test)= { r2_test : .4f } ' ) plt . figure ( figsize = ( 10 , 8 )) plt . plot ( range ( 1 , 11 ), y , label = '\u8a13\u7df4' ) plt . plot ( range ( 1 , 11 ), y2 , label = '\u30c6\u30b9\u30c8' ) plt . xlabel ( '\u6df1\u3055' ) plt . legend () plt . show () \u3055\u3066\u3001\u3069\u306e\u3042\u305f\u308a\u304b\u3089\u904e\u5b66\u7fd2\u3068\u5224\u65ad\u3059\u308b\u304b\u96e3\u3057\u3044\u3067\u3059\u304c\u3001 \u300c\u3072\u3068\u3064\u306e\u57fa\u6e96\u3068\u3057\u3066\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30b9\u30b3\u30a2\u304c\u4e0a\u304c\u3089\u306a\u304f\u306a\u3063\u305f\u3089\u5b66\u7fd2\u3092\u6b62\u3081\u308b\u300d \u3068\u3044\u3046\u8003\u3048\u65b9\u304c\u3042\u308a\u307e\u3059\u3002 \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574 \u3068\u3053\u308d\u3067\u3001\u4e0a\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3089\u3059\u3089\u3068\u304b\u3051\u308b\u3068\u3001Python\u529b\u306f\u5b9f\u52d9\u30ec\u30d9\u30eb\u3067\u3059\u3002 \u305f\u3060\u3057\u3001\u4f55\u4e8b\u306b\u3082\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u8abf\u3079\u3066\u304f\u3060\u3055\u3044\u3002 \u7df4\u7fd2\u554f\u984c # \u30b3\u30fc\u30b9\u30ef\u30fc\u30af \u4eca\u9031\u306f\u3001 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af\uff12 \u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u3061\u3089\u3092\u512a\u5148\u3057\u3066\u3001\u53d6\u308a\u7d44\u3093\u3067\u304f\u3060\u3055\u3044\u3002 **\u3069\u306e\u3088\u3046\u306a\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3042\u308b\u304b\u8abf\u3079\u3066\u307f\u3088\u3046** \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u306b\u306a\u308b\u306b\u306f\u3001\u6700\u65b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u95a2\u5fc3\u3092\u3082\u3061\u3001 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u3042\u308f\u305b\u3066\u4f7f\u3044\u5206\u3051\u308b\u3053\u3068\u3082\u91cd\u8981\u3067\u3059\u3002 \u7814\u7a76\u5ba4\u306e\u5b66\u751f\u3092\u307f\u3066\u3044\u308b\u3068\u3001\u3069\u3093\u3069\u3093\u8272\u3005\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8a66\u3057\u3066\u304d\u3066\u3001 \u5831\u544a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u6559\u54e1\u3088\u308a\u8a73\u3057\u3044\u3067\u3059\u3002 (\u88dc\u8db3\uff09\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3068\u306f # \u4eca\u56de\u306f\u3001\u30c7\u30fc\u30bf\u5206\u6790\u306e\u57fa\u790e\u4e2d\u306e\u57fa\u790e\u306a\u306e\u3067\u3001\u7dda\u5f62\u56de\u5e30\uff08\u5358\u56de\u5e30\u3068\u91cd\u56de\u5e30\uff09\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002 \u3057\u304b\u3057\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u9577\u8db3\u306e\u9032\u6b69\u3092\u9042\u3052\u3066\u3044\u308b\u306e\u3067\u3001 \u56de\u5e30\u3067\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u305f\u3044\u306e\u306a\u3089\u3001\u7dda\u5f62\u56de\u5e30\u306b\u5f37\u304f\u3053\u3060\u308f\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3082\u3001 \u6c7a\u5b9a\u6728\u3068\u4e71\u629e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7d44\u307f\u5408\u308f\u305b\u305f \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8 \u3092\u7528\u3044\u308b\u3068\u3001 \u7d20\u6674\u3089\u3057\u304f\u3088\u3044\u4e88\u6e2c\u30e2\u30c7\u30eb\u304c\u5f97\u3089\u308c\u307e\u3059\u3002 from sklearn.ensemble import RandomForestRegressor model = RandomForestRegressor () model . fit ( X , y ) y_pred = model . predict ( X ) plt . scatter ( y , y_pred , c = 'red' , alpha = 0.3 ) print ( \"Mean Square Error : \" , mean_squared_error ( y , y_pred ) ) print ( 'R squared error' , r2_score ( y , y_pred )) \uff083. \u306e\u30d2\u30f3\u30c8\uff09 \u52fe\u914d\u30d6\u30fc\u30b9\u30c8\u3092\u7528\u3044\u305f\u6c7a\u5b9a\u6728(GBDT)\u306b\u3088\u308b\u30af\u30e9\u30b9\u5206\u985e\u3084\u56de\u5e30\u306f\u30c7\u30fc\u30bf\u5206\u6790\u30b3\u30f3\u30da\u3067\u3082\u975e\u5e38\u306b\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 https://arxiv.org/abs/1603.02754 \u305d\u306e\u4e2d\u3067\u30822016\u5e74\u306b\u51fa\u3055\u308c\u305fXGBoost\u306fLightGBM\u3068\u4e26\u3073\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u624b\u6cd5\u3067\u3059\u3002 import xgboost as xgb model = xgb . XGBRegressor ( objective = 'reg:squarederror' ) model . fit ( X_train , y_train ) #xgb.plot_importance(model) #xgb.to_graphviz(model, num_trees=5) \u7df4\u7fd2\u554f\u984c # sklearn\u306b\u306f\u3001\u56de\u5e30\u30e2\u30c7\u30eb\u309228\u7a2e\u985e\u8a66\u3057\uff0c\u7cbe\u5ea6\u306e\u30b0\u30e9\u30d5\u3092\u751f\u6210\u3057\u307e\u3059\uff0e from sklearn.linear_model import LinearRegression , Ridge , Lasso , ElasticNet , SGDRegressor from sklearn.linear_model import PassiveAggressiveRegressor , ARDRegression , RidgeCV from sklearn.linear_model import TheilSenRegressor , RANSACRegressor , HuberRegressor from sklearn.neural_network import MLPRegressor from sklearn.svm import SVR , LinearSVR from sklearn.neighbors import KNeighborsRegressor from sklearn.gaussian_process import GaussianProcessRegressor from sklearn.tree import DecisionTreeRegressor from sklearn.experimental import enable_hist_gradient_boosting from sklearn.ensemble import RandomForestRegressor , AdaBoostRegressor , ExtraTreesRegressor , HistGradientBoostingRegressor from sklearn.ensemble import BaggingRegressor , GradientBoostingRegressor , VotingRegressor , StackingRegressor from sklearn.preprocessing import PolynomialFeatures from sklearn.pipeline import Pipeline from sklearn.cross_decomposition import PLSRegression reg_dict = { \"LinearRegression\" : LinearRegression (), \"Ridge\" : Ridge (), \"Lasso\" : Lasso (), \"ElasticNet\" : ElasticNet (), \"Polynomial_deg2\" : Pipeline ([( 'poly' , PolynomialFeatures ( degree = 2 )),( 'linear' , LinearRegression ())]), \"Polynomial_deg3\" : Pipeline ([( 'poly' , PolynomialFeatures ( degree = 3 )),( 'linear' , LinearRegression ())]), \"Polynomial_deg4\" : Pipeline ([( 'poly' , PolynomialFeatures ( degree = 4 )),( 'linear' , LinearRegression ())]), \"Polynomial_deg5\" : Pipeline ([( 'poly' , PolynomialFeatures ( degree = 5 )),( 'linear' , LinearRegression ())]), \"KNeighborsRegressor\" : KNeighborsRegressor ( n_neighbors = 3 ), \"DecisionTreeRegressor\" : DecisionTreeRegressor (), \"RandomForestRegressor\" : RandomForestRegressor (), \"SVR\" : SVR ( kernel = 'rbf' , C = 1e3 , gamma = 0.1 , epsilon = 0.1 ), \"GaussianProcessRegressor\" : GaussianProcessRegressor (), \"SGDRegressor\" : SGDRegressor (), \"MLPRegressor\" : MLPRegressor ( hidden_layer_sizes = ( 10 , 10 ), max_iter = 100 , early_stopping = True , n_iter_no_change = 5 ), \"ExtraTreesRegressor\" : ExtraTreesRegressor ( n_estimators = 100 ), \"PLSRegression\" : PLSRegression ( n_components = 10 ), \"PassiveAggressiveRegressor\" : PassiveAggressiveRegressor ( max_iter = 100 , tol = 1e-3 ), \"TheilSenRegressor\" : TheilSenRegressor ( random_state = 0 ), \"RANSACRegressor\" : RANSACRegressor ( random_state = 0 ), \"HistGradientBoostingRegressor\" : HistGradientBoostingRegressor (), \"AdaBoostRegressor\" : AdaBoostRegressor ( random_state = 0 , n_estimators = 100 ), \"BaggingRegressor\" : BaggingRegressor ( base_estimator = SVR (), n_estimators = 10 ), \"GradientBoostingRegressor\" : GradientBoostingRegressor ( random_state = 0 ), \"VotingRegressor\" : VotingRegressor ([( 'lr' , LinearRegression ()), ( 'rf' , RandomForestRegressor ( n_estimators = 10 ))]), \"StackingRegressor\" : StackingRegressor ( estimators = [( 'lr' , RidgeCV ()), ( 'svr' , LinearSVR ())], final_estimator = RandomForestRegressor ( n_estimators = 10 )), \"ARDRegression\" : ARDRegression (), \"HuberRegressor\" : HuberRegressor (), }","title":"\u7d71\u8a08\u304b\u3089AI\u3078"},{"location":"boston4/#ai","text":"\u5358\u56de\u5e30\u3068\u91cd\u56de\u5e30\u5206\u6790\u306f\u3001\u3082\u3068\u3082\u3068\u7d71\u8a08\u5b66\u306e\u5206\u91ce\u3067\u7814\u7a76\u3055\u308c\u3066\u304d\u305f\u624b\u6cd5\u3067\u3059\u3002 \u7d71\u8a08\u5b66\u3067\u306f\u3001\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u3092\u89e3\u91c8\u3059\u308b\u3053\u3068\u3092\u91cd\u8996\u3057\u307e\u3059\u3002 AI\u3067\u306f\u3001\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u3092\u89e3\u91c8\u3059\u308b\u3053\u3068\u3088\u308a\u3001 \u672a\u6765\uff08\u672a\u77e5\u306e\u30c7\u30fc\u30bf\uff09\u3092\u6b63\u3057\u304f\u4e88\u6e2c\u3059\u308b\u3053\u3068 \u3092\u91cd\u8996\u3057\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001AI\u306e\u6d41\u5100\u306b\u3057\u305f\u304c\u3063\u3066\u3001\u3088\u308a\u6b63\u78ba\u306b\u4e88\u6e2c\u3067\u304d\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002 \u3055\u3066\u3001\u4eca\u56de\u3082\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u3044\u307e\u3059\u3002 \u6f14\u7fd2\u304c\u59cb\u307e\u308b\u524d\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6e96\u5099\u5b8c\u4e86 df = pd.read_csv('boston.csv') df.drop('\u9ed2\u4eba', axis=1, inplace=True) df.head() \u3082\u3046\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u98fd\u304d\u305f\u65b9\u306e\u305f\u3081\u306b\u3001 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af\uff12 \u3067\u306f\u3001\u5225\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7df4\u7fd2\u3092\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u3002","title":"\u7d71\u8a08\u304b\u3089AI\u3078"},{"location":"boston4/#_1","text":"\u6a5f\u68b0\u5b66\u7fd2\u3084AI\u306e\u958b\u767a\u3067\u306f\u3001 \u904e\u5b66\u7fd2 \u3068\u3044\u3046\u73fe\u8c61\u304c\u975e\u5e38\u306b\u5acc\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306f\u3001\u4e88\u6e2c\u30e2\u30c7\u30eb\u304c\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u3067\u3042\u308b\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u904e\u5270\u306b\u9069\u5408\u3057\u904e\u304e\u3066\u3057\u307e\u3063\u3066\u3001 \u672a\u6765\u306e\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u3078\u306e\u4e88\u6e2c\u304c\u3042\u307e\u308a\u6b63\u78ba\u306b\u3067\u304d\u306a\u304f\u306a\u308b\u73fe\u8c61\u3067\u3059\u3002 \u904e\u5b66\u7fd2 \u904e\u53bb\u554f\u3070\u304b\u308a\u7e70\u308a\u8fd4\u3057\u7df4\u7fd2\u3057\u3066\u3082\u3001\u672c\u756a\u306e\u8a66\u9a13\u306e\u554f\u984c\u306f\u89e3\u3051\u307e\u305b\u3093\u3088\u306d\u3002 \u6a5f\u68b0\u5b66\u7fd2\u3084AI\u3067\u306f\u3001\u904e\u53bb\u306e\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\u3001 \u672a\u6765\u306e \u672a\u77e5\u306e\u30c7\u30fc\u30bf \u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u958b\u767a\u304c\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5 \u3068\u3044\u3046\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6c4e\u5316\u6027\u80fd\u3092\u8a55\u4fa1\u3059\u308b\u624b\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002","title":"\u672a\u6765\u3092\u4e88\u6e2c\u3059\u308b"},{"location":"boston4/#_2","text":"\u307e\u305a\u3001\u524d\u56de\u306e\u56de\u5e30\u5206\u6790\u3092\u3092\u601d\u3044\u51fa\u3057\u306a\u304c\u3089 '\u4f4f\u5b85\u4fa1\u683c' \u3092\u76ee\u7684\u5909\u6570\u3001 \u305d\u308c\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u5217\u3092\u5168\u3066\u8aac\u660e\u5909\u6570\u3068\u3057\u305f\u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002 \u91cd\u56de\u5e30\u30e2\u30c7\u30eb from sklearn.metrics import mean_squared_error , r2_score X = df [ df . columns [: - 1 ]] # \u4fa1\u683c\u4ee5\u5916\u3092\u5168\u3066\u8aac\u660e\u5909\u6570\u306b y = df [ '\u4f4f\u5b85\u4fa1\u683c' ] model = LinearRegression () model . fit ( X , y ) y_pred = model . predict ( X ) print ( '\u8aac\u660e\u5909\u6570:' , X . columns , '\u6b21\u5143:' , X . shape ) print ( \"MSE: \" , mean_squared_error ( y , y_pred )) print ( 'R2' , r2_score ( y , y_pred )) plt . figure ( figsize = ( 7 , 7 )) plt . scatter ( y , y_pred , c = 'red' , alpha = 0.3 ) plt . show () \u8aac\u660e\u5909\u6570: Index(['\u72af\u7f6a\u7387', '\u7dd1\u5730', '\u5de5\u5834', '\u5ddd\u8fd1', '\u5927\u6c17\u6c5a\u67d3', '\u90e8\u5c4b\u6570', '\u7bc9\u5e74', '\u901a\u52e4', '\u4ea4\u901a', '\u8cc7\u7523\u7a0e', '\u6559\u54e1\u6bd4','\u4f4e\u6240\u5f97\u7387'], dtype='object') \u6b21\u5143: (506, 12) MSE: 22.429681439489933 R2 0.7343070437613075 \u6c7a\u5b9a\u4fc2\u6570(R2)\u306b\u7740\u76ee\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u3053\u3053\u304b\u3089\u3001\u904e\u5b66\u7fd2\u3092\u9632\u304e\u306a\u304c\u3089\u3001R22\u30b9\u30b3\u30a2\u304c\u9ad8\u3044\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u65b9\u6cd5\u3092\u307f\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002","title":"\u91cd\u56de\u5e30\u5206\u6790"},{"location":"boston4/#_3","text":"\u4eba\u5de5\u77e5\u80fd\u3067\u306f\u3001\u904e\u53bb\u306b\u5b66\u7fd2\u3057\u305f\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\u3001 \u672a\u6765\u306e \u672a\u77e5\u306e\u30c7\u30fc\u30bf \u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u7cbe\u5ea6\u304c\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5 \u306f\u3001 \u5168\u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u3067\u3001\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u3092\u8a55\u4fa1\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u672a\u77e5\u3068\u3057\u3066\u5b66\u7fd2\u306b\u4f7f\u308f\u306a\u3044\u3053\u3068\u3067\u3001\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7cbe\u5ea6\u304c\u6e2c\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf : \u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf : \u30e2\u30c7\u30eb\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf sklearn \u306b\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3059\u308b\u95a2\u6570 train_test_split() \u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3057\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272 test_size : \u8a13\u7df4\u7528(70%),\u30c6\u30b9\u30c8\u7528(30%) random_state=0 : \u4e71\u6570\u306e\u751f\u6210\u3092\u56fa\u5b9a\u3057\u3001\u6bce\u56de\u540c\u3058\u4e71\u6570\u3067\u5206\u5272\u3055\u305b\u308b \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272 from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.3 , random_state = 0 ) print ( '\u8a13\u7df4\u30c7\u30fc\u30bf\u6570:' , len ( X_train )) print ( '\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570:' , len ( X_test )) \u8a13\u7df4\u30c7\u30fc\u30bf\u6570: 354 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570: 152","title":"\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5"},{"location":"boston4/#_4","text":"\u5b66\u7fd2\u306f\u3001 \u8a13\u7df4\u30c7\u30fc\u30bf \u306b\u5bfe\u3057\u3066\u306e\u307f\u884c\u3044\u307e\u3059\u3002 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3092\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 \u6a5f\u68b0\u5b66\u7fd2\u7684\u306b\u306f\u30c1\u30fc\u30c8\u884c\u70ba\uff08\u30ab\u30f3\u30cb\u30f3\u30b0\uff09\u306b\u306a\u308a\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u5b9f\u884c model . fit ( X_train , y_train )","title":"\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u5b66\u7fd2"},{"location":"boston4/#_5","text":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf X_test \u3068 y_test \u306f\u3001\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u306b\u306f\u4e00\u5207\u4f7f\u308f\u308c\u3066\u3044\u307e\u305b\u3093\u3002 \u3060\u304b\u3089\u3001\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u306b\u3068\u3063\u3066\u3001\u672a\u77e5\u306e\u672a\u6765\u306b\u6765\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u30c7\u30fc\u30bf\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002 \u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u884c\u3044\u307e\u3059\u3002 X_test : \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8aac\u660e\u5909\u6570 y_test : \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u76ee\u7684\u5909\u6570\uff08\u3064\u307e\u308a\u3001\u6b63\u89e3\uff09 y_pred: : \u30e2\u30c7\u30eb\u304b\u3089\u4e88\u6e2c\u3055\u308c\u305f\u30c7\u30fc\u30bf\u5217 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6c7a\u5b9a\u4fc2\u6570(R2) y_pred = model.predict(X_test) print(\"MSE(\u30c6\u30b9\u30c8): \", mean_squared_error(y_test, y_pred) ) print('R2(\u30c6\u30b9\u30c8):', r2_score(y_test, y_pred)) MSE(\u30c6\u30b9\u30c8): 28.14679026854114 R2(\u30c6\u30b9\u30c8): 0.6619633616256454 MSE(\u30c6\u30b9\u30c8)\u3084R2(\u30c6\u30b9\u30c8)\u306f\u3001\u5b66\u7fd2\u3057\u3066\u3044\u306a\u3044\u672a\u77e5\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7cbe\u5ea6\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u3078\u306e\u6307\u6a19\u3092 \u6c4e\u5316\u6027\u80fd \u3068\u3044\u3044\u307e\u3059\u3002","title":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u8a55\u4fa1"},{"location":"boston4/#_6","text":"\u904e\u5b66\u7fd2\u306f\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u904e\u5ea6\u306b\u5b66\u7fd2\u3057\u3066\u3057\u307e\u3046\u73fe\u8c61\u3067\u3059\u3002 \u3053\u3061\u3089\u306f\u3001\u5c11\u3057\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u304c\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u7cbe\u5ea6\u3068\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3053\u3068\u3067\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u904e\u5b66\u7fd2\u306e\u30c1\u30a7\u30c3\u30af print('R2(\u8a13\u7df4):', r2_score(y_train, model.predict(X_train))) print('R2(\u30c6\u30b9\u30c8):', r2_score(y_test, y_pred)) R2(\u8a13\u7df4): 0.7614925768121829 R2(\u30c6\u30b9\u30c8): 0.6619633616256454 \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30b9\u30b3\u30a2\u304c\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u6bd4\u3079\u3066\u660e\u3089\u304b\u306b\u9ad8\u3044\u3068\u304d\u306f\u3001 \u904e\u5b66\u7fd2 \u3092\u7591\u3044\u307e\u3057\u3087\u3046\u3002 \u3061\u306a\u307f\u306b\u3001\u4eca\u56de\u3001\u4f5c\u6210\u3057\u305f\u91cd\u56de\u5e30\u30e2\u30c7\u30eb\u3067\u306f\u3001\u660e\u3089\u304b\u306b\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u30b9\u30b3\u30a2\u306e\u65b9\u304c\u9ad8\u3044\u3067\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u904e\u5b66\u7fd2\u306e\u767a\u751f\u3092\u7591\u3046\u3079\u304d\u3067\u3059\u3002 \u904e\u5b66\u7fd2\u306e\u9632\u304e\u65b9 \u904e\u5b66\u7fd2\u306f\u3001\u5b66\u7fd2\u304c\u3042\u307e\u308a\u9032\u307e\u306a\u3044\u3088\u3046\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u9632\u304e\u307e\u3059\u3002 \u6a5f\u68b0\u5b66\u7fd2\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u3063\u3066\u3001\u9632\u304e\u65b9\u306f\u7570\u306a\u308a\u307e\u3059\u3002","title":"\u904e\u5b66\u7fd2\u306e\u30c1\u30a7\u30c3\u30af"},{"location":"boston4/#_7","text":"\u4ea4\u5dee\u691c\u8a3c\uff08\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3, CV)\u306f\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3059\u308b\u70b9\u306f\u540c\u3058\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u3092\u307e\u305aK\u500b\u306b\u5206\u5272\u3057\u3066\u3001\u305d\u306e\u3046\u3061\u3072\u3068\u3064\u3060\u3051\u3092\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3001\u6b8b\u308a\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001 \u5b66\u7fd2\u30fb\u8a55\u4fa1\u3057\u307e\u3059\u3002\uff12\u56de\u76ee\u306f\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5207\u308a\u66ff\u3048\u3066k\u56de\u8a55\u4fa1\u3057\u307e\u3059\u3002 \u305d\u3057\u3066\u3001\u5404\u56de\u3067\u6e2c\u5b9a\u3057\u305f\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3067\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u3092\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002 sklearn \u3067\u306f\u3001 cross_val_score \u3068\u3057\u3066\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306f\u3059\u3054\u304f\u4fbf\u5229\u306a\u95a2\u6570\u3067\u3001\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u305b\u3070\u3001\u3042\u3068\u306f\u52dd\u624b\u306b\u8a08\u7b97\u3057\u3066\u304f\u308c\u307e\u3059\u3002 cross_val_score(\u30e2\u30c7\u30eb, X, y, cv=5, scoring='r2') \u3072\u3068\u3064\u6ce8\u610f\u3059\u308b\u70b9\u306f\u3001\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307ek\u7b49\u5206\u3057\u3066\u3057\u307e\u3046\u70b9\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u306b\u504f\u308a\u304c\u3042\u308b\u3068\u3001\u671f\u5f85\u3057\u305f\u7d50\u679c\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u4f55\u304b\u5909\u3060\u306a\u3068\u601d\u3063\u305f\u3089\u3001\u4e8b\u524d\u306b\u30e9\u30f3\u30c0\u30e0\u5316\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u7dda\u5f62\u56de\u5e30\u306e\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 from sklearn.model_selection import cross_validate , cross_val_score df = df . sample ( 500 ) #500\u500b\u307b\u3069\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 X = df [ df . columns [: - 1 ]] # \u4fa1\u683c\u4ee5\u5916\u3092\u5168\u3066\u8aac\u660e\u5909\u6570\u306b y = df [ '\u4f4f\u5b85\u4fa1\u683c' ] scores = cross_val_score ( LinearRegression (), X , y , cv = 5 , scoring = 'r2' ) print ( scores ) [0.7008421 0.60231973 0.76837893 0.70741722 0.72919493] cross_val_score() \u306e\u7d50\u679c\u306f\u30015\u56de\u5206\u306e\u30b9\u30b3\u30a2\u3067\u5e30\u3063\u3066\u304d\u307e\u3059\u3002 \u3053\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3059\u304c\u3001boxplot \u306a\u3069\u3092\u8868\u793a\u3057\u3066\u3082\u9762\u767d\u3044\u3067\u3059\u3002 \u8a73\u3057\u304f\u306f\u3001\u6f14\u7fd2\u554f\u984c\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u4ea4\u5dee\u691c\u8a3c\uff08\u2605\uff09"},{"location":"boston4/#_8","text":"\u4eca\u307e\u3067\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3068\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u790e\u4e2d\u306e\u57fa\u790e\u306a\u306e\u3067\u3001\u7dda\u5f62\u56de\u5e30\uff08\u5358\u56de\u5e30\u3068\u91cd\u56de\u5e30\uff09\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002 \u3057\u304b\u3057\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u9577\u8db3\u306e\u9032\u6b69\u3092\u9042\u3052\u3066\u3044\u308b\u306e\u3067\u3001 \u826f\u3044\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3044\u306e\u306a\u3089\u3001\u7dda\u5f62\u56de\u5e30\u306b\u3053\u3060\u308f\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u73fe\u5728\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u696d\u52d9\u306e\u5834\u3067\u4eba\u6c17\u304c\u9ad8\u3044\u306e\u306f\u3001 \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3001XGDBoost\u3001\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\u304c\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u4e00\u65b9\u3001\u4eba\u5de5\u77e5\u80fd\u3067\u306f\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u7cfb\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001\u3082\u3046\u3072\u3068\u3064\u306e\u5b9a\u756a\u306e\u56de\u5e30\u5206\u6790\u3067\u3042\u308b\u3001 \u6c7a\u5b9a\u6728 \u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002","title":"\u6c7a\u5b9a\u6728"},{"location":"boston4/#_9","text":"\u6c7a\u5b9a\u6728\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3084XGDBoost \u306e\u5143\u306b\u306a\u3063\u3066\u3044\u308b\u57fa\u672c\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002 \u975e\u7dda\u5f62\u56de\u5e30\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306a\u306e\u3067\u3001\u7dda\u5f62\u30e2\u30c7\u30eb\u304c\u3046\u307e\u304f\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u3068\u304d\u306b\u6709\u52b9\u306a\u624b\u6bb5\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u6c7a\u5b9a\u6728\u306e\u3057\u304f\u307f"},{"location":"boston4/#_10","text":"\u6c7a\u5b9a\u6728(\u56de\u5e30) from sklearn.tree import DecisionTreeRegressor \u3042\u3068\u306f\u3001 LinearRegression() \u306e\u4ee3\u308f\u308a\u306b\u3001 DecisionTreeRegressor() \u3092\u4f7f\u3048\u3070\u3001 fit() \u3084 predict() \u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u306f \u5168\u304f\u540c\u3058\u3088\u3046\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 model = DecisionTreeRegressor () model . fit ( X_train , y_train ) y_pred = model . predict ( X_test ) print ( 'R2(\u8a13\u7df4):' , r2_score ( y_train , model . predict ( X_train ))) print ( 'R2(\u30c6\u30b9\u30c8):' , r2_score ( y_test , y_pred )) plt . figure ( figsize = ( 7 , 7 )) plt . scatter ( y , y_pred , c = 'red' , alpha = 0.3 ) plt . show () R2(\u8a13\u7df4): 1.0 R2(\u30c6\u30b9\u30c8): 0.6597361898690233 \u8a13\u7df4\u30c7\u30fc\u30bf\u306f\u3001\u7d20\u6674\u3089\u3057\u3044\u30b9\u30b3\u30a2\u3092\u51fa\u3057\u307e\u3057\u305f\u304c\u3001\u904e\u5b66\u7fd2\u3067\u3059\u306d\u3002\u305f\u3076\u3093\u3002 \u3061\u306a\u307f\u306b\u6c7a\u5b9a\u6728\u3092\u8868\u793a\u3059\u308b\u3068\u304d\u306f\u3001\u6b21\u306e\u3088\u3046\u306b plot_tree \u3092\u4f7f\u3044\u307e\u3059\u3002 \u6c7a\u5b9a\u6728\u3092\u8868\u793a\u3059\u308b from sklearn.tree import plot_tree plot_tree(model, feature_names=X.columns, filled=True) plt.show() maxdepth \u4e0a\u306e\u56f3\u306f\u3001 DecisionTreeRegressor(maxdepth=2) \u3067\u5b66\u7fd2\u3057\u305f\u3068\u304d\u3067\u3059\u3002 \u4f55\u3082\u6307\u5b9a\u3057\u306a\u3044\u3068\u7121\u5236\u9650\u306b\u6728\u3092\u5206\u5272\u3057\u3066\u3044\u304d\u307e\u3059\u3002","title":"\u6c7a\u5b9a\u6728\u306e\u5229\u7528\u6cd5"},{"location":"boston4/#_11","text":"\u6c7a\u5b9a\u6728\u306e\u9762\u767d\u3044\u3068\u3053\u308d\u306f\u3001\u3069\u306e\u8aac\u660e\u5909\u6570\u304c\u30e2\u30c7\u30eb\u306b\u5bc4\u4e0e\u3057\u3066\u3044\u308b\u304b\u7c21\u5358\u306b \u53ef\u8996\u5316\u3067\u304d\u308b\u70b9\u3067\u3059\u3002 \u91cd\u8981\u5ea6(importance) \u7279\u5fb4\u91cf\u306e\u5206\u5272\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5206\u985e\u306b\u3069\u308c\u304f\u3089\u3044\u5bc4\u4e0e\u3057\u3066\u3044\u308b\u304b\u3092\u6e2c\u308b\u6307\u6a19 \u6c7a\u5b9a\u6728\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u304c\u7d42\u308f\u308b\u3068\u3001 feature_importances_ \u306b \u5404\u8aac\u660e\u5909\u6570\u3054\u3068\u306e\u91cd\u8981\u5ea6\u304c\u7b97\u51fa\u3055\u308c\u3066\u8a18\u9332\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u91cd\u8981\u5ea6\u3092\u53d6\u308a\u51fa\u3057\u3066\u8868\u793a\u3057\u3066\u3044\u307f\u308b for column , importance in zip ( X_train . columns , model . feature_importances_ ): print ( f ' { column } { importance : .5f } ' ) print ( sum ( model . feature_importances_ )) \u72af\u7f6a\u7387 0.08447 \u7dd1\u5730 0.00049 \u5de5\u5834 0.00882 \u5ddd\u8fd1 0.00026 \u5927\u6c17\u6c5a\u67d3 0.02107 \u90e8\u5c4b\u6570 0.60087 \u7bc9\u5e74 0.00893 \u901a\u52e4 0.05647 \u4ea4\u901a 0.00276 \u8cc7\u7523\u7a0e 0.00792 \u6559\u54e1\u6bd4 0.03026 \u4f4e\u6240\u5f97\u7387 0.17767 1.0 Warning \u91cd\u8981\u5ea6\u306f\u3001\u5408\u8a08\u304c1.0\u306b\u306a\u308b\u3088\u3046\u306b\u6b63\u898f\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u68d2\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3057\u3066\u307f\u308b\u3068\u3001\u3088\u308a\u8996\u899a\u7684\u306b\u78ba\u8a8d\u3057\u3084\u3059\u3044\u3067\u3057\u3087\u3046\u3002 \u68d2\u30b0\u30e9\u30d5\u3067\u8868\u793a plt.figure(figsize=(12, 6)) plt.barh(X_train.columns, model.feature_importances_) plt.show()","title":"\u91cd\u8981\u5ea6"},{"location":"boston4/#_12","text":"\u6c7a\u5b9a\u6728\u306f\u3001 maxdepth \u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001 \u5b66\u7fd2\u3092\u9032\u3081\u308b\u6df1\u3055\u3092\u8abf\u6574\u3067\u304d\u307e\u3059\u3002 \u4f8b. \u6df1\u3055\u30923\u307e\u3067\u306b\u3059\u308b model = DecisionTreeRegressor ( maxdepth = 3 ) \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3084AI\u30a8\u30f3\u30b8\u30cb\u30a2\u304c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u524d\u306b\u8a2d\u5b9a\u3059\u3079\u304d\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u3053\u3068 \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574\u304c\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3084AI\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u8155\u306e\u898b\u305b\u6240\u3067\u3059\u3002 \u3082\u3061\u308d\u3093\u3001\u624b\u4f5c\u696d\u3067\u8abf\u6574\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3093\u3067\u8abf\u3079\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002 maxdepth\u306e\u8abf\u6574 y = [] y2 = [] for depth in range ( 1 , 11 ): model = DecisionTreeRegressor ( max_depth = depth ) # None \u5236\u9650\u306a\u3057 model . fit ( X_train , y_train ) r2_train = r2_score ( y_train , model . predict ( X_train )) r2_test = r2_score ( y_test , model . predict ( X_test )) y . append ( r2_train ) y2 . append ( r2_test ) print ( f 'depth= { depth } , R2(train)= { r2_train : .4f } , R2(test)= { r2_test : .4f } ' ) plt . figure ( figsize = ( 10 , 8 )) plt . plot ( range ( 1 , 11 ), y , label = '\u8a13\u7df4' ) plt . plot ( range ( 1 , 11 ), y2 , label = '\u30c6\u30b9\u30c8' ) plt . xlabel ( '\u6df1\u3055' ) plt . legend () plt . show () \u3055\u3066\u3001\u3069\u306e\u3042\u305f\u308a\u304b\u3089\u904e\u5b66\u7fd2\u3068\u5224\u65ad\u3059\u308b\u304b\u96e3\u3057\u3044\u3067\u3059\u304c\u3001 \u300c\u3072\u3068\u3064\u306e\u57fa\u6e96\u3068\u3057\u3066\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30b9\u30b3\u30a2\u304c\u4e0a\u304c\u3089\u306a\u304f\u306a\u3063\u305f\u3089\u5b66\u7fd2\u3092\u6b62\u3081\u308b\u300d \u3068\u3044\u3046\u8003\u3048\u65b9\u304c\u3042\u308a\u307e\u3059\u3002 \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574 \u3068\u3053\u308d\u3067\u3001\u4e0a\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3059\u3089\u3059\u3089\u3068\u304b\u3051\u308b\u3068\u3001Python\u529b\u306f\u5b9f\u52d9\u30ec\u30d9\u30eb\u3067\u3059\u3002 \u305f\u3060\u3057\u3001\u4f55\u4e8b\u306b\u3082\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u8abf\u3079\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u6728\u306e\u6df1\u3055\u3092\u8abf\u6574\u3059\u308b\uff08\u2605\uff09"},{"location":"boston4/#_13","text":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af \u4eca\u9031\u306f\u3001 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af\uff12 \u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u3061\u3089\u3092\u512a\u5148\u3057\u3066\u3001\u53d6\u308a\u7d44\u3093\u3067\u304f\u3060\u3055\u3044\u3002 **\u3069\u306e\u3088\u3046\u306a\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3042\u308b\u304b\u8abf\u3079\u3066\u307f\u3088\u3046** \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u306b\u306a\u308b\u306b\u306f\u3001\u6700\u65b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u95a2\u5fc3\u3092\u3082\u3061\u3001 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u3042\u308f\u305b\u3066\u4f7f\u3044\u5206\u3051\u308b\u3053\u3068\u3082\u91cd\u8981\u3067\u3059\u3002 \u7814\u7a76\u5ba4\u306e\u5b66\u751f\u3092\u307f\u3066\u3044\u308b\u3068\u3001\u3069\u3093\u3069\u3093\u8272\u3005\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8a66\u3057\u3066\u304d\u3066\u3001 \u5831\u544a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u6559\u54e1\u3088\u308a\u8a73\u3057\u3044\u3067\u3059\u3002","title":"\u7df4\u7fd2\u554f\u984c"},{"location":"boston4/#_14","text":"\u4eca\u56de\u306f\u3001\u30c7\u30fc\u30bf\u5206\u6790\u306e\u57fa\u790e\u4e2d\u306e\u57fa\u790e\u306a\u306e\u3067\u3001\u7dda\u5f62\u56de\u5e30\uff08\u5358\u56de\u5e30\u3068\u91cd\u56de\u5e30\uff09\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002 \u3057\u304b\u3057\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u9577\u8db3\u306e\u9032\u6b69\u3092\u9042\u3052\u3066\u3044\u308b\u306e\u3067\u3001 \u56de\u5e30\u3067\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u305f\u3044\u306e\u306a\u3089\u3001\u7dda\u5f62\u56de\u5e30\u306b\u5f37\u304f\u3053\u3060\u308f\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u4fa1\u683c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3082\u3001 \u6c7a\u5b9a\u6728\u3068\u4e71\u629e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7d44\u307f\u5408\u308f\u305b\u305f \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8 \u3092\u7528\u3044\u308b\u3068\u3001 \u7d20\u6674\u3089\u3057\u304f\u3088\u3044\u4e88\u6e2c\u30e2\u30c7\u30eb\u304c\u5f97\u3089\u308c\u307e\u3059\u3002 from sklearn.ensemble import RandomForestRegressor model = RandomForestRegressor () model . fit ( X , y ) y_pred = model . predict ( X ) plt . scatter ( y , y_pred , c = 'red' , alpha = 0.3 ) print ( \"Mean Square Error : \" , mean_squared_error ( y , y_pred ) ) print ( 'R squared error' , r2_score ( y , y_pred )) \uff083. \u306e\u30d2\u30f3\u30c8\uff09 \u52fe\u914d\u30d6\u30fc\u30b9\u30c8\u3092\u7528\u3044\u305f\u6c7a\u5b9a\u6728(GBDT)\u306b\u3088\u308b\u30af\u30e9\u30b9\u5206\u985e\u3084\u56de\u5e30\u306f\u30c7\u30fc\u30bf\u5206\u6790\u30b3\u30f3\u30da\u3067\u3082\u975e\u5e38\u306b\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 https://arxiv.org/abs/1603.02754 \u305d\u306e\u4e2d\u3067\u30822016\u5e74\u306b\u51fa\u3055\u308c\u305fXGBoost\u306fLightGBM\u3068\u4e26\u3073\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u624b\u6cd5\u3067\u3059\u3002 import xgboost as xgb model = xgb . XGBRegressor ( objective = 'reg:squarederror' ) model . fit ( X_train , y_train ) #xgb.plot_importance(model) #xgb.to_graphviz(model, num_trees=5)","title":"(\u88dc\u8db3\uff09\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3068\u306f"},{"location":"boston4/#_15","text":"sklearn\u306b\u306f\u3001\u56de\u5e30\u30e2\u30c7\u30eb\u309228\u7a2e\u985e\u8a66\u3057\uff0c\u7cbe\u5ea6\u306e\u30b0\u30e9\u30d5\u3092\u751f\u6210\u3057\u307e\u3059\uff0e from sklearn.linear_model import LinearRegression , Ridge , Lasso , ElasticNet , SGDRegressor from sklearn.linear_model import PassiveAggressiveRegressor , ARDRegression , RidgeCV from sklearn.linear_model import TheilSenRegressor , RANSACRegressor , HuberRegressor from sklearn.neural_network import MLPRegressor from sklearn.svm import SVR , LinearSVR from sklearn.neighbors import KNeighborsRegressor from sklearn.gaussian_process import GaussianProcessRegressor from sklearn.tree import DecisionTreeRegressor from sklearn.experimental import enable_hist_gradient_boosting from sklearn.ensemble import RandomForestRegressor , AdaBoostRegressor , ExtraTreesRegressor , HistGradientBoostingRegressor from sklearn.ensemble import BaggingRegressor , GradientBoostingRegressor , VotingRegressor , StackingRegressor from sklearn.preprocessing import PolynomialFeatures from sklearn.pipeline import Pipeline from sklearn.cross_decomposition import PLSRegression reg_dict = { \"LinearRegression\" : LinearRegression (), \"Ridge\" : Ridge (), \"Lasso\" : Lasso (), \"ElasticNet\" : ElasticNet (), \"Polynomial_deg2\" : Pipeline ([( 'poly' , PolynomialFeatures ( degree = 2 )),( 'linear' , LinearRegression ())]), \"Polynomial_deg3\" : Pipeline ([( 'poly' , PolynomialFeatures ( degree = 3 )),( 'linear' , LinearRegression ())]), \"Polynomial_deg4\" : Pipeline ([( 'poly' , PolynomialFeatures ( degree = 4 )),( 'linear' , LinearRegression ())]), \"Polynomial_deg5\" : Pipeline ([( 'poly' , PolynomialFeatures ( degree = 5 )),( 'linear' , LinearRegression ())]), \"KNeighborsRegressor\" : KNeighborsRegressor ( n_neighbors = 3 ), \"DecisionTreeRegressor\" : DecisionTreeRegressor (), \"RandomForestRegressor\" : RandomForestRegressor (), \"SVR\" : SVR ( kernel = 'rbf' , C = 1e3 , gamma = 0.1 , epsilon = 0.1 ), \"GaussianProcessRegressor\" : GaussianProcessRegressor (), \"SGDRegressor\" : SGDRegressor (), \"MLPRegressor\" : MLPRegressor ( hidden_layer_sizes = ( 10 , 10 ), max_iter = 100 , early_stopping = True , n_iter_no_change = 5 ), \"ExtraTreesRegressor\" : ExtraTreesRegressor ( n_estimators = 100 ), \"PLSRegression\" : PLSRegression ( n_components = 10 ), \"PassiveAggressiveRegressor\" : PassiveAggressiveRegressor ( max_iter = 100 , tol = 1e-3 ), \"TheilSenRegressor\" : TheilSenRegressor ( random_state = 0 ), \"RANSACRegressor\" : RANSACRegressor ( random_state = 0 ), \"HistGradientBoostingRegressor\" : HistGradientBoostingRegressor (), \"AdaBoostRegressor\" : AdaBoostRegressor ( random_state = 0 , n_estimators = 100 ), \"BaggingRegressor\" : BaggingRegressor ( base_estimator = SVR (), n_estimators = 10 ), \"GradientBoostingRegressor\" : GradientBoostingRegressor ( random_state = 0 ), \"VotingRegressor\" : VotingRegressor ([( 'lr' , LinearRegression ()), ( 'rf' , RandomForestRegressor ( n_estimators = 10 ))]), \"StackingRegressor\" : StackingRegressor ( estimators = [( 'lr' , RidgeCV ()), ( 'svr' , LinearSVR ())], final_estimator = RandomForestRegressor ( n_estimators = 10 )), \"ARDRegression\" : ARDRegression (), \"HuberRegressor\" : HuberRegressor (), }","title":"\u7df4\u7fd2\u554f\u984c"},{"location":"class/","text":"\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c # \u6a5f\u68b0\u5b66\u7fd2 (machine learning) \u3068\u306f\u3001 \u4e0e\u3048\u3089\u308c\u305f\u554f\u984c\u306b\u5bfe\u3057\u3066\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u81ea\u8eab\u304c\u5b66\u7fd2\u3057\u3001\u5b66\u7fd2\u7d50\u679c\u3092\u6d3b\u304b\u3057\u305f\u554f\u984c\u89e3\u6c7a\u3092\u884c\u3046\u3057\u304f\u307f\u306e\u3053\u3068\u3067\u3059\u3002 \u4eba\u5de5\u77e5\u80fd (artificial inteligence) \u3092\u5b9f\u73fe\u3059\u308b\u624b\u6bb5\u3068\u3057\u3066\u6d3b\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3092\u3068\u308a\u3042\u3052\u3001\u3044\u3088\u3044\u3088\u672c\u683c\u7684\u306a\u6a5f\u68b0\u5b66\u7fd2\u306e\u4e16\u754c\u306b\u8db3\u3092\u8e0f\u307f\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002 \u6e96\u5099 import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try : import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError : ! pip install japanize_matplotlib import japanize_matplotlib sns . set ( font = \"IPAexGothic\" ) #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a \u4e73\u304c\u3093\u8a3a\u65ad\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 # \u4e73\u304c\u3093\u8a3a\u65ad\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001Breast Cancer Wisconsin (Diagnostic) Data Set\u306b\u7531\u6765\u3057\u3001 \u4e73\u817a\u816b\u7624\u306e\u7a7f\u523a\u5438\u5f15\u7d30\u80de\u8a3a\u306e\u30c7\u30b8\u30bf\u30eb\u753b\u50cf\u304b\u3089\u8a08\u7b97\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 1993 W.N. Street, W.H. Wolberg and O.L. Mangasarian Nuclear feature extraction for breast tumor diagnosis IS&T/SPIE 1993 International Symposium on Electronic Imaging: Science and Technology, volume 1905, pages 861-870, San Jose, CA, 1993. (abstract) \u30c7\u30fc\u30bf\u306eURL https://KuramitsuLab.github.io/data/cancer.csv \u30c7\u30fc\u30bf\u306e\u7406\u89e3 # \u307e\u305a\u306f\u3001\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5185\u5bb9\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u8aad\u307f\u8fbc\u307f !wget https://KuramitsuLab.github.io/data/cancer.csv df = pd.read_csv('cancer.csv') df.head() \u6700\u521d\u306e target \u30ab\u30e9\u30e0\u306f\u3001\u4e73\u304c\u3093\u306e\u8a3a\u65ad\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002 \u826f\u6027\u306f 1 \u3001\u60aa\u6027\u306f 0 \u306e\u30e9\u30d9\u30eb\u304c\u3064\u3044\u3066\u3044\u307e\u3059\u3002 \u305d\u308c\u306b\u7d9a\u3044\u3066\u3001\u4e73\u304c\u3093\u306e\u8a3a\u65ad\u306b\u7528\u3044\u305f \u691c\u67fb\u7d50\u679c\uff08\u305f\u3076\u3093\u3001X\u7dda\u753b\u50cf\u3092\u5206\u6790\u3057\u3001\u816b\u760d\u3092\u6e2c\u5b9a\u3057\u305f\u5024\uff09\u304c\u7d9a\u304d\u307e\u3059\u3002 \u8a73\u7d30\u306f\u3001\u5c02\u9580\u533b\u3067\u306f\u306a\u3044\u306e\u3067\u5272\u611b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002 \u8a73\u7d30\u304c\u308f\u304b\u3089\u306a\u3044\u30c7\u30fc\u30bf\u3067\u3082\u30c7\u30fc\u30bf\u5206\u6790\u3067\u304d\u308b\u306e\u304b\u3068\u601d\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u3080\u3057\u308d\u3001\u6c7a\u5b9a\u6728\u306a\u3069\u3067\u4e73\u304c\u3093\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3067\u3001 \u91cd\u8981\u5ea6\u304b\u3089\u3069\u306e\u9805\u76ee\u304c\u4e73\u304c\u3093\u306e\u8a3a\u65ad\u306b\u5f71\u97ff\u304c\u3042\u308b\u304b\u5206\u6790\u3059\u308b\u30d2\u30f3\u30c8\u306b\u306a\u308a\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570 # \u4e73\u304c\u3093\u306e\u8a3a\u65ad\u30e2\u30c7\u30eb\u3092\u6e96\u5099\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u691c\u67fb\u9805\u76ee\u306b\u95a2\u3057\u3066\u306f\u5c02\u9580\u533b\u3067\u306a\u3044\u305f\u3081\u3001\u3069\u308c\u304c\u7279\u5fb4\u91cf\u3092\u3088\u304f\u8868\u3057\u3066\u3044\u308b\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002 \u5168\u3066\u306e\u9805\u76ee\u3092\u8aac\u660e\u5909\u6570\u306b\u3057\u3066\u3001\u8a3a\u65ad\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570 X = df[df.columns[1:]] # target \u4ee5\u5916 y = df['target'] print(f'\u30c7\u30fc\u30bf\u6570: {len(df)}, \u8aac\u660e\u5909\u6570\u306e\u6b21\u5143 {X.shape[1]}') \u4e73\u304c\u3093\u8a3a\u65ad\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\u3001\u5b66\u7fd2\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u306f\u300130\u6b21\u5143\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u306e30\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092\u3001\u826f\u6027 1 \u3000\u60aa\u6027 0 \u306b\u5206\u985e\u3059\u308b\u3053\u3068\u304c\u4e88\u6e2c\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u3053\u3067\u3001\u901a\u5e38\u306e\u624b\u9806\u3068\u3057\u3066\u3001\u5206\u985e\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u307f\u308b\u305f\u3081\u3001 \u3042\u3089\u304b\u3058\u3081\u6563\u5e03\u56f3\u306a\u3069\u3067\u3001\u30c7\u30fc\u30bf\u306e\u6563\u3089\u3070\u308a\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570 # \u7d9a\u3044\u3066\u3001\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u306b\u3088\u3063\u3066\u3001\u6de1\u3005\u3068\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.3 , random_state = 0 ) print ( '\u8a13\u7df4\u30c7\u30fc\u30bf\u6570:' , len ( X_train )) print ( '\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570:' , len ( X_test )) \u5206\u985e\u5668(Classifier) # \u524d\u56de\u3001\u6c7a\u5b9a\u6728\u3092\u7fd2\u3044\u307e\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u3082\u6c7a\u5b9a\u6728\u3092\u4f7f\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u30af\u30e9\u30b9\u5206\u985e\u306e\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u306f\u3001 Regressor \u306e\u4ee3\u308f\u308a\u306bClassifier\u3092\u4f7f\u3046\u70b9\u3067\u3059\u3002 \u56de\u5e30\u6728\uff08\u524d\u56de\uff09 from sklearn.tree import DecisionTreeRegressor model = DecisionTreeRegressor () \u5206\u985e\u6728\uff08\u4eca\u56de\uff09 from sklearn.tree import DecisionTreeClassifier model = DecisionTreeClassifier () \u6ce8\u610f\uff1a\u30e2\u30c7\u30eb\u304c\u51fa\u529b\u3059\u308b\u5024\u304c\u6570\u5024\u30c7\u30fc\u30bf\u304b\u3001 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\uff08\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u305f\u30af\u30e9\u30b9\uff09\u304b\u306e\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002 DecisionTreeClassifier \u3092\u6b63\u3057\u304f\u4f7f\u3048\u3070\u3001\u3042\u3068\u306f\u540c\u3058\u3088\u3046\u306b\u5b66\u7fd2(fit)\u3057\u3001 \u4e88\u6e2c\u3059\u308b(predict)\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u5206\u985e\u5668 from sklearn.tree import DecisionTreeClassifier model = DecisionTreeClassifier () model . fit ( X_train , y_train ) y_pred = model . predict ( X_test ) print ( y_test . values ) print ( y_pred ) [0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 1 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 1 0 0 0 0 1 1 1 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 1 0 1 0 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1 0 1 0 0 0 1 1 1] [0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 0 0 0 0 0 1 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 1 0 0 0 0 1 1 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 1 0 1 0 1 1 0 0 1 1 1 1 1 0 0 1 0 1 0 1 1 0 0 1 1 1 0 1 1 1 1 1 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 0 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 1 1 1] \u3055\u3066\u3001\u3069\u306e\u304f\u3089\u3044\u6b63\u78ba\u306b\u5206\u985e\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f \u6df7\u540c\u884c\u5217 # \u30af\u30e9\u30b9\u5206\u985e\u306f\u3001\u5e38\u306b\u6b63\u3057\u3044\u5206\u985e\u3092\u3057\u3066\u304f\u308c\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002 \u60aa\u6027\u306a\u306e\u306b\u826f\u6027\u3068\u9593\u9055\u3063\u3066\u5224\u65ad\u3055\u308c\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3057\u3001\u826f\u6027\u304c\u60aa\u6027\u3068\u5224\u65ad\u3055\u308c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002 \u30af\u30e9\u30b9\u5206\u985e\u5668\u304c\u51fa\u3057\u305f\u4e88\u6e2c\u7d50\u679c\u3068\u5b9f\u969b\u306e\u7d50\u679c\u3092\u5168\u3066\u7db2\u7f85\u3057\u305f\u3082\u306e\u304c\u3001\u6df7\u5408\u884c\u5217\u306b\u306a\u308a\u307e\u3059\u3002 Python\u3067\u3001\u6df7\u540c\u884c\u5217\u3092\u6c42\u3081\u308b\u306b\u306f\u3001 sklearn.metrics \u30e2\u30b8\u30e5\u30fc\u30eb\u306e confusion_matrix() \u3092\u7528\u3044\u307e\u3059\u3002 \u7b2c\u4e00\u5f15\u6570\u306b\u5b9f\u6e2c\u30af\u30e9\u30b9\uff08\u6b63\u89e3\u30af\u30e9\u30b9\uff09\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u4e88\u6e2c\u3057\u305f\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u6df7\u540c\u884c\u5217\u3092\u7b97\u51fa\u3059\u308b from sklearn.metrics import confusion_matrix cm = confusion_matrix ( y_test , y_pred ) cm array([[60, 3], [12, 96]]) \u6df7\u540c\u884c\u5217\u306f\u3001\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u306b\u3057\u3066\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3082\u591a\u304f\u3042\u308a\u307e\u3059\u3002 \u6df7\u540c\u884c\u5217\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u78ba\u8a8d\u3059\u308b sns.heatmap(cm, annot=True, cmap='Reds') plt.show() \u3055\u3066\u3001\u6df7\u540c\u884c\u5217\u306e\u8aad\u307f\u65b9\u3067\u3059\u304c\u3001\u6b21\u306e\u3088\u3046\u306b\u8aad\u307f\u307e\u3059\u3002 TP(True Positive): \u826f\u6027\u304b\u3064\u826f\u6027\u3068\u4e88\u60f3\u3055\u308c\u308b TN(True Negative): \u60aa\u6027\u304b\u3064\u60aa\u6027\u3068\u5224\u5b9a\u3055\u308c\u308b FN(False Negative, \u507d\u9670\u6027): \u60aa\u6027\u3067\u3042\u308b\u304c\u3001\u826f\u6027\u3068\u4e88\u60f3\u3055\u308c\u308b FP(False Positive, \u507d\u967d\u6027): \u826f\u6027\u3067\u3042\u308b\u304c\u3001\u60aa\u6027\u3068\u4e88\u60f3\u3055\u308c\u308b \u5b9a\u91cf\u7684\u306a\u8a55\u4fa1\u6307\u6a19 # \u6b63\u89e3\u7387\uff08accuracy\uff09 \u9069\u5408\u7387\uff08precision, PPV\uff09 \u518d\u73fe\u7387\uff08recall, sensitivity, hit rate, TPR\uff09 F\u5024\uff08F-measure, F-score, F1-score \uff09 \u6b63\u89e3\u7387(accuracy) # \u6b63\u89e3\u7387\uff08accuracy\uff09\u306f\u3001\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u3046\u3061\u6b63\u89e3\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u5272\u5408\u3067\u3059\u3002 \\frac{TF+TN}{TP+FP+FN+TN} \u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001\u6700\u3082\u4e00\u822c\u7684\u306b\u6027\u80fd\u8a55\u4fa1\u3067\u7528\u3044\u3089\u308c\u308b\u6307\u6a19\u3067\u3059\u3002 sklearn.metrics \u30e2\u30b8\u30e5\u30fc\u30eb\u306e accuracy_score() \u3067\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 \u6b63\u89e3\u7387: accuracy_score from sklearn.metrics import accuracy_score accuracy = accuracy_score ( y_test , y_pred ) print ( f '\u6b63\u89e3\u7387 { accuracy : .5f } ' ) \u6b63\u89e3\u7387 0.91228 \u5b66\u7fd2\u6e08\u307f\u306e\u5206\u985e\u30e2\u30c7\u30eb model \u3082\u3001 model.score(X, y) \u3067\u7c21\u5358\u306b\u7b97\u51fa\u3067\u304d\u308b\u3088\u3046\u306b \u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b63\u89e3\u7387\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b print ( f '\u6b63\u89e3\u7387(\u8a13\u7df4)' , model . score ( X_train , y_train )) print ( f '\u6b63\u89e3\u7387(\u30c6\u30b9\u30c8)' , model . score ( X_test , y_test )) \u6b63\u89e3\u7387(\u8a13\u7df4) 1.0 \u6b63\u89e3\u7387(\u30c6\u30b9\u30c8) 0.9122807017543859 \u9069\u5408\u5ea6(Precision) # \u9069\u5408\u7387\uff08precision\uff09\u306f\u3001\u967d\u6027\u3068\u4e88\u6e2c\u3055\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u3046\u3061\u6b63\u89e3\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u5272\u5408\u3067\u3059\u3002 FP\uff08\u507d\u967d\u6027\uff09\u304c\u5927\u304d\u304f\u306a\u308b\u3068\u9069\u5408\u7387\u306f\u5c0f\u3055\u304f\u306a\u308b\u306e\u3067\u3001\u507d\u967d\u6027\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u306b\u7528\u3044\u307e\u3059\u3002 \\frac{TP}{TP+FP} sklearn.metrics \u30e2\u30b8\u30e5\u30fc\u30eb\u306e precision_score() \u3067\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 \u9069\u5408\u5ea6 from sklearn.metrics import precision_score precision = precision_score ( y_test , y_pred ) print ( f '\u9069\u5408\u7387 { precision : .5f } ' ) \u9069\u5408\u7387 0.96970 \u518d\u73fe\u7387(Recall) # \u518d\u73fe\u7387\uff08recall\uff09\u306f\u5b9f\u969b\u306b\u967d\u6027\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u3046\u3061\u6b63\u89e3\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u5272\u5408\u3067\u3059\u3002 FN\uff08\u507d\u9670\u6027\uff09\u304c\u5927\u304d\u304f\u306a\u308b\u3068\u518d\u73fe\u7387\u306f\u5c0f\u3055\u304f\u306a\u308b\u306e\u3067\u3001\u507d\u9670\u6027\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u306b\u7528\u3044\u307e\u3059\u3002 \\frac{TP}{TP+FN} sklearn.metrics \u30e2\u30b8\u30e5\u30fc\u30eb\u306e recall_score() \u3067\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 \u518d\u73fe\u7387 from sklearn.metrics import recall_score recall_score = recall_score ( y_test , y_pred ) print ( f '\u518d\u73fe\u7387 { recall : .5f } ' ) \u518d\u73fe\u7387 0.88889 F\u5024 # F\u5024\uff08F1-measure\uff09\u306f\u9069\u5408\u7387\u3068\u518d\u73fe\u7387\u306e\u8abf\u548c\u5e73\u5747\u3067\u3059\u3002 \\frac{TP\\times 2}{TP\\times2+FP+FN} sklearn.metrics \u30e2\u30b8\u30e5\u30fc\u30eb\u306e recall_score() \u3067\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 F\u5024\u306e\u7b97\u51fa from sklearn.metrics import f1_score f1 = f1_score ( y_test , y_pred ) print ( f 'F1\u5024 { f1 : .5f } ' ) F1\u5024 0.92754 \u8a73\u3057\u304f\u306f\u3001 F\u5024\u306e\u8a18\u4e8b \u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1 # \u5b9a\u91cf\u7684\u306b\u6b63\u89e3\u7387\u3092\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u306b\u57fa\u3065\u3044\u3066\u3001 \u3088\u308a\u6b63\u89e3\u7387\u306e\u9ad8\u3044\u5206\u985e\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u30e2\u30c7\u30eb\u306e\u6b63\u89e3\u7387 # \u6c7a\u5b9a\u6728\u306e\u5206\u985e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u3001\u6b21\u306e\u3088\u3046\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 DecisionTreeClassifier ( criterion = \u2019 gini \u2019 , splitter = \u2019 best \u2019 , max_depth = 4 , min_samples_split = 3 , min_samples_leaf = 1 , min_weight_fraction_leaf = 0.0 , max_features = 4 , random_state = None , max_leaf_nodes = 8 , min_impurity_split = 1e-07 , class_weight = \u2019 balanced \u2019 , presort = False ) \u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u89e3\u8aac\u306f\u3001\u6b21\u306e\u53c2\u8003\u8cc7\u6599\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002 \u53c2\u8003\u8cc7\u6599 * \u516c\u5f0f\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 * \u6c7a\u5b9a\u6728\u5206\u6790\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u89e3\u8aac \u6700\u521d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e0e\u3048\u65b9\u3067\u3001\u6b63\u89e3\u7387\u306f\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002 \u5c11\u3057\u3057\u304b\u5909\u308f\u3089\u306a\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u5927\u304d\u304f\u5f71\u97ff\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u3042\u308a\u307e\u3059\u3002 \u30d1\u30e9\u30e1\u30fc\u30bf: criterion=\u2019gini\u2019, max_depth=2 model = DecisionTreeClassifier ( criterion = 'gini' , max_depth = 2 ) model . fit ( X_train , y_train ) print ( f '\u6b63\u89e3\u7387(\u8a13\u7df4)' , model . score ( X_train , y_train )) print ( f '\u6b63\u89e3\u7387(\u30c6\u30b9\u30c8)' , model . score ( X_test , y_test )) \u30d1\u30e9\u30e1\u30fc\u30bf: criterion=\u2019entropy\u2019, max_depth=5 model = DecisionTreeClassifier ( criterion = 'entropy' , max_depth = 5 ) model . fit ( X_train , y_train ) print ( f '\u6b63\u89e3\u7387(\u8a13\u7df4)' , model . score ( X_train , y_train )) print ( f '\u6b63\u89e3\u7387(\u30c6\u30b9\u30c8)' , model . score ( X_test , y_test )) \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3084AI\u30a8\u30f3\u30b8\u30cb\u30a2\u306f\u3001 \u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u539f\u7406\u3092\u7406\u89e3\u3057\u3001\u7d4c\u9a13\u3092\u983c\u308a\u306b\u3067\u304d\u308b\u3060\u3051\u826f\u3044 \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3057\u3001\u6b63\u78ba\u3055\u306e\u9ad8\u3044\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u3044\u304d\u307e\u3059\u3002 \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\uff08\u2605\uff09 # \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306f\u3001\u8907\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u63a2\u7d22\u3057\u3001 \u6700\u3082\u512a\u308c\u305f\u7cbe\u5ea6\u306e\u9ad8\u3044\u7d44\u307f\u5408\u308f\u305b\u3092\u63a2\u7d22\u3059\u308b\u624b\u6cd5\u3067\u3059 \u3002 sklearn\u3067\u306f\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3068\u7d44\u307f\u5408\u308f\u3055\u3063\u305f`GridSearchCV()'\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4f7f\u3044\u65b9\u306f\u3001\u7c21\u5358\u306a\u306e\u3067\u305c\u3072\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u3087\u3046\u3002 \u307e\u305a\u3001\u7d44\u307f\u5408\u308f\u305b\u3092\u8abf\u3079\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8f9e\u66f8\u3092\u4f5c\u308a\u307e\u3059\u3002 \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8f9e\u66f8\u3092\u4f5c\u308b hparams = { 'criterion' : [ 'gini' , 'entropy' ], 'max_depth' : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , None ], 'min_samples_leaf' : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ], # 'min_samples_split': [2, 3, 4, 5, 6, 7, 8], } \u7d44\u307f\u5408\u308f\u305b \u6700\u5927\uff13\u3064\u304f\u3089\u3044\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u9069\u5207\u3067\u3059\u3002 \u7d44\u307f\u5408\u308f\u305b\u3092 N \u306b\u3059\u308b\u3068\u3001\u8a08\u7b97\u6642\u9593\u306f O(p^N) \u3067\u5897\u3048\u307e\u3059\u3002 GridSearchCV() \u306b\u306f\u3001\u30e2\u30c7\u30eb\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8f9e\u66f8\u306e\u9806\u306b\u6e21\u3057\u307e\u3059\u3002 \u6c7a\u5b9a\u6728\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1 from sklearn.model_selection import GridSearchCV clf = GridSearchCV ( DecisionTreeClassifier (), hparams , cv = 5 ) clf . fit ( X_train , y_train ) best_model = clf . best_estimator_ print ( '\u6700\u826f\u6761\u4ef6: \\n ' , best_model ) print ( '\u6b63\u89e3\u7387(\u8a13\u7df4):' , best_model . score ( X_train , y_train )) print ( '\u6b63\u89e3\u7387(\u30c6\u30b9\u30c8):' , best_model . score ( X_test , y_test )) \u6700\u826f\u6761\u4ef6: DecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_leaf=2) \u6b63\u89e3\u7387(\u8a13\u7df4): 0.9849246231155779 \u6b63\u89e3\u7387(\u30c6\u30b9\u30c8): 0.9473684210526315 \u9ad8\u901f\u5316\u306e\u30b3\u30c4 \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5206\u5272\u6570\u306f\u3001cv=5\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001 \u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u308b\u5834\u5408\u306f\u3088\u308a\u5c0f\u3055\u306a\u5024\u306b\u3059\u308b\u3068\u65e9\u304f\u306a\u308a\u307e\u3059\u3002 \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306f\u3001\u4e07\u80fd\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u826f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3059\u30b9\u30bf\u30fc\u30c8\u5730\u70b9\u306b\u306a\u308a\u307e\u3059\u3002 \u305c\u3072\u3001\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u3087\u3046\u3002 \u7df4\u7fd2\u554f\u984c # \u30af\u30e9\u30b9\u5206\u985e\u5668\u3042\u308c\u3053\u308c # \u56de\u5e30\u304b\u3089\u30af\u30e9\u30b9\u5206\u985e\u3078 # \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306f\u3001\u7dda\u5f62\u56de\u5e30\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002 \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u300c\u56de\u5e30\u300d\u3068\u3001\u56de\u5e30\u304c\u3064\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u30af\u30e9\u30b9\u5206\u985e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002 \u56de\u5e30\u304b\u3089\u30af\u30e9\u30b9\u5206\u985e\u306e\u539f\u7406\u3092\u7406\u89e3\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u539f\u7406: \u7dda\u5f62\u56de\u5e30\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u306b\u3001\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570( \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u95a2\u6570 )\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u30ab\u30c6\u30b4\u30ea\u30fc\u5024\u306b\u5909\u63db\u3057\u307e\u3059\u3002 \\sigma(x) = \\frac{1}{1+e^{-x}} !!!! example \"Let's try\" \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092matplotlib\u3067\u63cf\u753b\u3057\u3066\u307f\u3088\u3046 import matplotlib.pyplot as plt import numpy as np from math import e x = np.arange(-10, 10, 0.1) y = 1 / (1 + e**-x) plt.plot(x, y) \uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3068\u591a\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c \u6570\u5b66\u7684\u306b\u6271\u3044\u3084\u3059\u3044\u305f\u3081\u3001\uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3068\u591a\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u306f\u533a\u5225\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4e0a\u8a18\u306e\u8aac\u660e\u306f\u3001\uff12\u30af\u30e9\u30b9\u5206\u985e\u306e\u30b1\u30fc\u30b9\u3067\u3059\u304c\u3001 \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306f\u591a\u30af\u30e9\u30b9\u5206\u985e\u306b\u62e1\u5f35\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u8208\u5473\u304c\u3042\u308b\u3068\u304d\u306f\u3001\u591a\u30af\u30e9\u30b9\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u539f\u7406\u3082\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002 from sklearn.linear_model import LogisticRegression \uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c # \u4e73\u304c\u3093\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u3044\u3066\u3001\uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3068\u3057\u3066\u3001\u4e73\u304c\u3093\u306e\u826f\u6027\u30fb\u60aa\u6027\u3092\u5224\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002 \u5b66\u7fd2\u30e2\u30c7\u30eb # \u307e\u305a\u3001\u3068\u308a\u3042\u3048\u305a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 from sklearn.linear_model import LogisticRegression \u91cd\u56de\u5e30\u306e\u3068\u304d\u3068\u540c\u3058\u304f\u3001\uff12\u3064\u306e\u8aac\u660e\u5909\u6570\u306b\u3057\u3066\u307f\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001\u9069\u5f53\u306b\u3075\u305f\u3064\u306e \u5e73\u5747\u534a\u5f84 \u3068 \u5e73\u5747\u611f\u89e6 \u3092\u9078\u3093\u3067\u3044\u307e\u3059\u3002 \u4ed6\u306e\u8aac\u660e\u5909\u6570\u306b\u5909\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 X = data[['\u5e73\u5747\u534a\u5f84', '\u5e73\u5747\u611f\u89e6']] y = data['\u826f\u6027'] model = LogisticRegression() # \u5b66\u7fd2\u306e\u5b9f\u884c model.fit(X, y) \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u306e\u306f\u3001 predict \u3092\u4f7f\u3044\u307e\u3059\u3002 model.predict([(20, 18)]) \u5165\u529b\u306b\u5bfe\u3057\u3066\u3001\u4e88\u6e2c\u3055\u308c\u305f\u826f\u6027/\u60aa\u6027\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002 \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u306f\u3067\u304d\u305f\u3088\u3046\u3067\u3059\u3002 Let's try \u5165\u529b\u3092\u5909\u66f4\u3057\u3066\u3069\u306e\u3088\u3046\u306b\u4e88\u6e2c\u3055\u308c\u308b\u304b\u8abf\u3079\u3066\u307f\u3088\u3046\u3002 \u307e\u305f\u3001\u4e88\u6e2c\u9593\u9055\u3044\u3092\u8d77\u3053\u3059\u30c7\u30fc\u30bf\u3082\u8abf\u3079\u3066\u307f\u3088\u3046\u3002 y_pred = model.predict(X) pd.DataFrame({'\u6b63\u89e3': y, '\u4e88\u6e2c': y_pred}) \u7df4\u7fd2\u554f\u984c # \u4f8b\u984c\uff08\uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\uff09 \u4e73\u304c\u3093\u306e\u30c7\u30fc\u30bf\u3092\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3067\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf(7:3)\u306b\u5206\u5272\u3057\u3001 \u826f\u6027\u304b\u60aa\u6027\u304b\u5224\u5b9a\u3059\u308b\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u3088\u3046\u3002 \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30 \u6c7a\u5b9a\u6728 \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8 \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3 \u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3(MLP) \u30af\u30e9\u30b9\u5206\u985e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30 sklearn.linear_model.LogisticRegression \u4ee5\u5916\u306b\u3082\u591a\u304f\u3042\u308a\u307e\u3059\u3002 sklearn \u304b\u3089\u7c21\u5358\u306b\u8a66\u305b\u308b\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002 from sklearn.linear_model import LogisticRegression \u6c7a\u5b9a\u6728 : sklearn.tree.DecisionTreeClassifier \u6c7a\u5b9a\u6728\u306f\u3001\u6761\u4ef6\u5206\u5c90\u306b\u3088\u3063\u3066\u30b0\u30eb\u30fc\u30d7\u3092\u5206\u5272\u3057\u3066\u5206\u985e\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\u305d\u306e\u969b\u306b\u30b0\u30eb\u30fc\u30d7\u304c\u306a\u308b\u3079\u304f\u540c\u3058\u3088\u3046\u306a\u5c5e\u6027\u3067\u69cb\u6210\u3055\u308c\u308b\u3088\u3046\u306b\u5206\u5272\u3057\u307e\u3059\u3002 \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8 : sklearn.ensemble.RandomForestClassifier \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3068\u306f\u3001\u5206\u985e\u3084\u56de\u5e30\u306b\u4f7f\u3048\u308b\u6a5f\u68b0\u5b66\u7fd2\u306e\u624b\u6cd5\u3067\u3059\u3002\u6c7a\u5b9a\u6728\u3092\u305f\u304f\u3055\u3093\u4f5c\u3063\u3066\u591a\u6570\u6c7a\u3059\u308b\uff08\u307e\u305f\u306f\u5e73\u5747\u3092\u53d6\u308b\uff09\u3088\u3046\u306a\u624b\u6cd5\u3067\u3059\u3002\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306f\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u304c\u3001\u7cbe\u5ea6\u306e\u9ad8\u3044\u4e88\u6e2c/\u5206\u985e\u3092\u884c\u3048\u308b\u3068\u3044\u3046\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\u3002 \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\uff08SVC) : sklearn.svm.LinearSVC \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\u306f\u3001\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58\u30e2\u30c7\u30eb\u306e\u4e00\u3064\u3067\u3001\u7dda\u5f62\u5165\u529b\u7d20\u5b50\u3092\u5229\u7528\u3057\u30662\u30af\u30e9\u30b9\u306e\u30d1\u30bf\u30fc\u30f3\u8b58\u5225\u5668\u3092\u69cb\u6210\u3059\u308b\u624b\u6cd5\u3067\u3059\u30022\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u9593\u306e\u6700\u3082\u8ddd\u96e2\u306e\u96e2\u308c\u305f\u7b87\u6240\uff08\u6700\u5927\u30de\u30fc\u30b8\u30f3\uff09\u3092\u898b\u3064\u3051\u51fa\u3057\u3001\u305d\u306e\u771f\u3093\u4e2d\u306b\u8b58\u5225\u306e\u7dda\u3092\u5f15\u304d\u307e\u3059\u3002 \u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u5206\u985e\u5668 : sklearn.naive_bayes.GaussianNB \u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u5206\u985e\u5668\u306f\u7279\u5fb4\u9593\u306b\u5f37\u3044\uff08\u30ca\u30a4\u30fc\u30d6\u306a\uff09\u72ec\u7acb\u6027\u3092\u4eee\u5b9a\u3057\u305f\u4e0a\u3067\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3092\u4f7f\u3046\u3001\u78ba\u7387\u306b\u57fa\u3065\u3044\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002 \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3(MLP) : sklearn.neural_network.MLPClassifier \u4eba\u9593\u306e\u8133\uff08\u30cb\u30e5\u30fc\u30ed\u30f3\uff09\u306e\u6570\u7406\u30e2\u30c7\u30eb\u306b\u57fa\u3065\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\u6df1\u5c64\u5b66\u7fd2\u306b\u7528\u3044\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u3044\u539f\u7406\u306f\u3001\u6388\u696d\u306e\u5f8c\u534a\u3067\u6271\u3044\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u306f\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u9069\u3057\u305f\u3082\u306e\u3092\u9078\u3093\u3067\u69cb\u3044\u307e\u305b\u3093\u3002 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\u3067\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 (\u88dc\u8db3\uff09 \u6b21\u5143\u5727\u7e2e\u306b\u3088\u308b\u9ad8\u6b21\u5143\u30c7\u30fc\u30bf\u306e\u6563\u5e03\u56f3 # \u4e73\u304c\u3093\u8a3a\u65ad\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u300130\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3067\u3057\u305f\u3002 \u4e00\u65b9\u3001\u4eba\u9593\u306f2\u6b21\u5143\u3001\u3082\u3057\u304f\u306f\uff13\u6b21\u5143\u3057\u304b\u8996\u899a\u7684\u306b\u7406\u89e3\u3067\u304d\u307e\u305b\u3093\u3002 \u6563\u5e03\u56f3\u3082\uff12\u6b21\u5143\u3001\u9811\u5f35\u3063\u3066\u3082\uff13\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u307e\u3067\u3057\u304b\u63cf\u753b\u3067\u304d\u307e\u305b\u3093\u3002 \uff12\u6b21\u5143\u306e\u6563\u5e03\u56f3 plt . figure ( figsize = ( 7 , 7 )) sns . scatterplot ( data = df , x = 'mean radius' , y = 'mean texture' , hue = 'target' ) plt . show () \u9811\u5f35\u3063\u3066\u3001\uff13\u6b21\u5143\u306e\u6563\u5e03\u56f3 from mpl_toolkits.mplot3d import Axes3D fig = plt . figure ( figsize = ( 7 , 7 )) ax = Axes3D ( fig ) ax . set_xlabel ( \"mean radius\" ) ax . set_ylabel ( \"mean texture\" ) ax . set_zlabel ( \"mean perimeter\" ) colors = [ 'r' , 'b' ] for i , gd in enumerate ( df . groupby ( 'target' )): ax . plot ( gd [ 1 ][ 'mean radius' ], gd [ 1 ][ 'mean texture' ], gd [ 1 ][ 'mean perimeter' ], marker = \"o\" , linestyle = 'None' , c = colors [ i ], alpha = 0.3 ) \u9811\u5f35\u3063\u30663\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092\u6563\u5e03\u56f3\u306b\u53ce\u3081\u3066\u3082\u3001 \u307e\u3060\u5168\u3066\u306e\u30c7\u30fc\u30bf\u306e\u6563\u3089\u3070\u308a\u304c\u8a00\u3048\u305f\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u6b21\u5143\u5727\u7e2e # 30\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3092\u6b8b\u3057\u306a\u304c\u3089\u3001\u6b21\u5143\u3092\u843d\u3068\u3059\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u3053\u3053\u3067\u306f\u3001 \u4e3b\u6210\u5206\u5206\u6790(PCA) \u306e\u624b\u6cd5\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002 \u4e3b\u6210\u5206\u5206\u6790(PCA)\u306b\u3088\u308b2\u6b21\u5143\u3078\u306e\u5727\u7e2e from sklearn.decomposition import PCA X = df [ df . columns [ 1 :]] pca = PCA ( n_components = 2 ) # \uff12\u6b21\u5143\u306b df2 = pd . DataFrame ( pca . fit_transform ( X ), columns = [ 'pc1' , 'pc2' ]) df2 = pd . concat ([ df [[ 'target' ]], df2 ], axis = 1 ) df2 . head () pc1\u306f\u7b2c\u4e00\u4e3b\u6210\u5206\u3001pc2\u306f\u7b2c\u4e8c\u4e3b\u6210\u5206\u3092\u8868\u3057\u307e\u3059\u3002 \u4e3b\u6210\u5206\u5206\u6790\u3092\u3057\u305f\u7d50\u679c\u3092\u7528\u3044\u3066\u6563\u5e03\u56f3\u3092\u63cf\u753b\u3059\u308c\u3070\u3001 \u9ad8\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u306e\u6563\u3089\u3070\u308a\u3092\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 ```py title='\u4e3b\u6210\u5206\u5206\u6790\u306e\u7d50\u679c\u304b\u3089\u6563\u5e03\u56f3\u3092\u63cf\u753b\u3059\u308b\" plt.figure(figsize=(7, 7)) sns.scatterplot(data=df2, x='pc1', y='pc2', hue='target') plt.show() ![](figs/cancer_scatter_pca-fs8.png) ## \u30b9\u30b1\u30fc\u30ea\u30f3\u30b0 \u4e73\u304c\u3093\u8a3a\u65ad\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u691c\u67fb\u7d50\u679c\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3001 \u305d\u308c\u305e\u308c\u5358\u4f4d\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u5404\u30ab\u30e9\u30e0\u3054\u3068\u306b\u6700\u5927\u5024\u3084\u6700\u5c0f\u5024\u3082\u5927\u304d\u304f\u3070\u3089\u3064\u3044\u3066\u3044\u307e\u3059\u3002 ![](figs/cancer_boxplot1-fs8.png) \u30c7\u30fc\u30bf\u5206\u6790\u3067\u306f\u3001\u5927\u304d\u306a\u5024\u306e\u8aac\u660e\u5909\u6570\u304c\u3042\u308b\u3068\u3001\u5c0f\u3055\u306a\u5024\u306e\u8aac\u660e\u5909\u6570\u306e\u5f71\u97ff\u304c\u5c0f\u3055\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u5f71\u97ff\u3092\u6392\u9664\u3059\u308b\u305f\u3081\u3001\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff08\u6a19\u6e96\u5316\uff09\u306f\u5e38\u5957\u624b\u6bb5\u3067\u3059\u3002 __\u6a19\u6e96\u5316__: \u30b5\u30f3\u30d7\u30eb\u5024$x$\u304b\u3089\u5e73\u5747$\\bar{x}$\u3092\u5f15\u304d\u3001\u6a19\u6e96\u504f\u5dee$\\sigma$\u3067\u5272\u308b $$ z = \\frac{x - \\bar{x}}{\\sigma} $$ sklearn\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u3001 \u7c21\u5358\u306b\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306e\u9053\u5177\u304c`StandardScaler`\u30af\u30e9\u30b9\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 ``` title=\"StandardScaler\u306b\u3088\u308b\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\" from sklearn.preprocessing import StandardScaler sc = StandardScaler() X = sc.fit_transform(df[df.columns[1:]]) # \u6a19\u6e96\u5316 plt.figure(figsize=(14, 7)) sns.boxplot(data=pd.DataFrame(X, columns=df.columns[1:]), orient='horizontal') plt.show() \u4e3b\u6210\u5206\u5206\u6790\u306e\u524d\u306b\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3057\u3066\u6563\u5e03\u56f3\u3092\u66f8\u304f from sklearn.preprocessing import StandardScaler sc = StandardScaler () X = sc . fit_transform ( df [ df . columns [ 1 :]]) # \u30b9\u30b1\u30fc\u30ea\u30f3\u30b0 pca = PCA ( n_components = 2 ) # \uff12\u6b21\u5143\u306b df3 = pd . DataFrame ( pca . fit_transform ( X ), columns = [ 'pc1' , 'pc2' ]) df3 = pd . concat ([ df [[ 'target' ]], df3 ], axis = 1 ) plt . figure ( figsize = ( 7 , 7 )) sns . scatterplot ( data = df3 , x = 'pc1' , y = 'pc2' , hue = 'target' ) plt . show ()","title":"\uff12\u30af\u30e9\u30b9\u5206\u985e"},{"location":"class/#_1","text":"\u6a5f\u68b0\u5b66\u7fd2 (machine learning) \u3068\u306f\u3001 \u4e0e\u3048\u3089\u308c\u305f\u554f\u984c\u306b\u5bfe\u3057\u3066\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u81ea\u8eab\u304c\u5b66\u7fd2\u3057\u3001\u5b66\u7fd2\u7d50\u679c\u3092\u6d3b\u304b\u3057\u305f\u554f\u984c\u89e3\u6c7a\u3092\u884c\u3046\u3057\u304f\u307f\u306e\u3053\u3068\u3067\u3059\u3002 \u4eba\u5de5\u77e5\u80fd (artificial inteligence) \u3092\u5b9f\u73fe\u3059\u308b\u624b\u6bb5\u3068\u3057\u3066\u6d3b\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3092\u3068\u308a\u3042\u3052\u3001\u3044\u3088\u3044\u3088\u672c\u683c\u7684\u306a\u6a5f\u68b0\u5b66\u7fd2\u306e\u4e16\u754c\u306b\u8db3\u3092\u8e0f\u307f\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002 \u6e96\u5099 import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try : import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError : ! pip install japanize_matplotlib import japanize_matplotlib sns . set ( font = \"IPAexGothic\" ) #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a","title":"\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c"},{"location":"class/#_2","text":"\u4e73\u304c\u3093\u8a3a\u65ad\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001Breast Cancer Wisconsin (Diagnostic) Data Set\u306b\u7531\u6765\u3057\u3001 \u4e73\u817a\u816b\u7624\u306e\u7a7f\u523a\u5438\u5f15\u7d30\u80de\u8a3a\u306e\u30c7\u30b8\u30bf\u30eb\u753b\u50cf\u304b\u3089\u8a08\u7b97\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 1993 W.N. Street, W.H. Wolberg and O.L. Mangasarian Nuclear feature extraction for breast tumor diagnosis IS&T/SPIE 1993 International Symposium on Electronic Imaging: Science and Technology, volume 1905, pages 861-870, San Jose, CA, 1993. (abstract) \u30c7\u30fc\u30bf\u306eURL https://KuramitsuLab.github.io/data/cancer.csv","title":"\u4e73\u304c\u3093\u8a3a\u65ad\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8"},{"location":"class/#_3","text":"\u307e\u305a\u306f\u3001\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5185\u5bb9\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u8aad\u307f\u8fbc\u307f !wget https://KuramitsuLab.github.io/data/cancer.csv df = pd.read_csv('cancer.csv') df.head() \u6700\u521d\u306e target \u30ab\u30e9\u30e0\u306f\u3001\u4e73\u304c\u3093\u306e\u8a3a\u65ad\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002 \u826f\u6027\u306f 1 \u3001\u60aa\u6027\u306f 0 \u306e\u30e9\u30d9\u30eb\u304c\u3064\u3044\u3066\u3044\u307e\u3059\u3002 \u305d\u308c\u306b\u7d9a\u3044\u3066\u3001\u4e73\u304c\u3093\u306e\u8a3a\u65ad\u306b\u7528\u3044\u305f \u691c\u67fb\u7d50\u679c\uff08\u305f\u3076\u3093\u3001X\u7dda\u753b\u50cf\u3092\u5206\u6790\u3057\u3001\u816b\u760d\u3092\u6e2c\u5b9a\u3057\u305f\u5024\uff09\u304c\u7d9a\u304d\u307e\u3059\u3002 \u8a73\u7d30\u306f\u3001\u5c02\u9580\u533b\u3067\u306f\u306a\u3044\u306e\u3067\u5272\u611b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002 \u8a73\u7d30\u304c\u308f\u304b\u3089\u306a\u3044\u30c7\u30fc\u30bf\u3067\u3082\u30c7\u30fc\u30bf\u5206\u6790\u3067\u304d\u308b\u306e\u304b\u3068\u601d\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u3080\u3057\u308d\u3001\u6c7a\u5b9a\u6728\u306a\u3069\u3067\u4e73\u304c\u3093\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3067\u3001 \u91cd\u8981\u5ea6\u304b\u3089\u3069\u306e\u9805\u76ee\u304c\u4e73\u304c\u3093\u306e\u8a3a\u65ad\u306b\u5f71\u97ff\u304c\u3042\u308b\u304b\u5206\u6790\u3059\u308b\u30d2\u30f3\u30c8\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u30c7\u30fc\u30bf\u306e\u7406\u89e3"},{"location":"class/#_4","text":"\u4e73\u304c\u3093\u306e\u8a3a\u65ad\u30e2\u30c7\u30eb\u3092\u6e96\u5099\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u691c\u67fb\u9805\u76ee\u306b\u95a2\u3057\u3066\u306f\u5c02\u9580\u533b\u3067\u306a\u3044\u305f\u3081\u3001\u3069\u308c\u304c\u7279\u5fb4\u91cf\u3092\u3088\u304f\u8868\u3057\u3066\u3044\u308b\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002 \u5168\u3066\u306e\u9805\u76ee\u3092\u8aac\u660e\u5909\u6570\u306b\u3057\u3066\u3001\u8a3a\u65ad\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570 X = df[df.columns[1:]] # target \u4ee5\u5916 y = df['target'] print(f'\u30c7\u30fc\u30bf\u6570: {len(df)}, \u8aac\u660e\u5909\u6570\u306e\u6b21\u5143 {X.shape[1]}') \u4e73\u304c\u3093\u8a3a\u65ad\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\u3001\u5b66\u7fd2\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u306f\u300130\u6b21\u5143\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u306e30\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092\u3001\u826f\u6027 1 \u3000\u60aa\u6027 0 \u306b\u5206\u985e\u3059\u308b\u3053\u3068\u304c\u4e88\u6e2c\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u3053\u3067\u3001\u901a\u5e38\u306e\u624b\u9806\u3068\u3057\u3066\u3001\u5206\u985e\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u307f\u308b\u305f\u3081\u3001 \u3042\u3089\u304b\u3058\u3081\u6563\u5e03\u56f3\u306a\u3069\u3067\u3001\u30c7\u30fc\u30bf\u306e\u6563\u3089\u3070\u308a\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002","title":"\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570"},{"location":"class/#_5","text":"\u7d9a\u3044\u3066\u3001\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u306b\u3088\u3063\u3066\u3001\u6de1\u3005\u3068\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.3 , random_state = 0 ) print ( '\u8a13\u7df4\u30c7\u30fc\u30bf\u6570:' , len ( X_train )) print ( '\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570:' , len ( X_test ))","title":"\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570"},{"location":"class/#classifier","text":"\u524d\u56de\u3001\u6c7a\u5b9a\u6728\u3092\u7fd2\u3044\u307e\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u3082\u6c7a\u5b9a\u6728\u3092\u4f7f\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u30af\u30e9\u30b9\u5206\u985e\u306e\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u306f\u3001 Regressor \u306e\u4ee3\u308f\u308a\u306bClassifier\u3092\u4f7f\u3046\u70b9\u3067\u3059\u3002 \u56de\u5e30\u6728\uff08\u524d\u56de\uff09 from sklearn.tree import DecisionTreeRegressor model = DecisionTreeRegressor () \u5206\u985e\u6728\uff08\u4eca\u56de\uff09 from sklearn.tree import DecisionTreeClassifier model = DecisionTreeClassifier () \u6ce8\u610f\uff1a\u30e2\u30c7\u30eb\u304c\u51fa\u529b\u3059\u308b\u5024\u304c\u6570\u5024\u30c7\u30fc\u30bf\u304b\u3001 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\uff08\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u305f\u30af\u30e9\u30b9\uff09\u304b\u306e\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002 DecisionTreeClassifier \u3092\u6b63\u3057\u304f\u4f7f\u3048\u3070\u3001\u3042\u3068\u306f\u540c\u3058\u3088\u3046\u306b\u5b66\u7fd2(fit)\u3057\u3001 \u4e88\u6e2c\u3059\u308b(predict)\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u5206\u985e\u5668 from sklearn.tree import DecisionTreeClassifier model = DecisionTreeClassifier () model . fit ( X_train , y_train ) y_pred = model . predict ( X_test ) print ( y_test . values ) print ( y_pred ) [0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 1 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 1 0 0 0 0 1 1 1 1 1 1 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 1 0 1 0 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 0 1 0 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 0 1 1 0 1 0 0 0 1 1 1] [0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 0 1 0 0 0 0 0 1 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 1 0 0 0 0 1 1 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 0 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 1 0 1 0 1 1 0 0 1 1 1 1 1 0 0 1 0 1 0 1 1 0 0 1 1 1 0 1 1 1 1 1 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 0 1 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 0 0 1 0 0 1 0 0 0 1 1 1] \u3055\u3066\u3001\u3069\u306e\u304f\u3089\u3044\u6b63\u78ba\u306b\u5206\u985e\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f","title":"\u5206\u985e\u5668(Classifier)"},{"location":"class/#_6","text":"\u30af\u30e9\u30b9\u5206\u985e\u306f\u3001\u5e38\u306b\u6b63\u3057\u3044\u5206\u985e\u3092\u3057\u3066\u304f\u308c\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002 \u60aa\u6027\u306a\u306e\u306b\u826f\u6027\u3068\u9593\u9055\u3063\u3066\u5224\u65ad\u3055\u308c\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3057\u3001\u826f\u6027\u304c\u60aa\u6027\u3068\u5224\u65ad\u3055\u308c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002 \u30af\u30e9\u30b9\u5206\u985e\u5668\u304c\u51fa\u3057\u305f\u4e88\u6e2c\u7d50\u679c\u3068\u5b9f\u969b\u306e\u7d50\u679c\u3092\u5168\u3066\u7db2\u7f85\u3057\u305f\u3082\u306e\u304c\u3001\u6df7\u5408\u884c\u5217\u306b\u306a\u308a\u307e\u3059\u3002 Python\u3067\u3001\u6df7\u540c\u884c\u5217\u3092\u6c42\u3081\u308b\u306b\u306f\u3001 sklearn.metrics \u30e2\u30b8\u30e5\u30fc\u30eb\u306e confusion_matrix() \u3092\u7528\u3044\u307e\u3059\u3002 \u7b2c\u4e00\u5f15\u6570\u306b\u5b9f\u6e2c\u30af\u30e9\u30b9\uff08\u6b63\u89e3\u30af\u30e9\u30b9\uff09\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u4e88\u6e2c\u3057\u305f\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u6df7\u540c\u884c\u5217\u3092\u7b97\u51fa\u3059\u308b from sklearn.metrics import confusion_matrix cm = confusion_matrix ( y_test , y_pred ) cm array([[60, 3], [12, 96]]) \u6df7\u540c\u884c\u5217\u306f\u3001\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u306b\u3057\u3066\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3082\u591a\u304f\u3042\u308a\u307e\u3059\u3002 \u6df7\u540c\u884c\u5217\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u78ba\u8a8d\u3059\u308b sns.heatmap(cm, annot=True, cmap='Reds') plt.show() \u3055\u3066\u3001\u6df7\u540c\u884c\u5217\u306e\u8aad\u307f\u65b9\u3067\u3059\u304c\u3001\u6b21\u306e\u3088\u3046\u306b\u8aad\u307f\u307e\u3059\u3002 TP(True Positive): \u826f\u6027\u304b\u3064\u826f\u6027\u3068\u4e88\u60f3\u3055\u308c\u308b TN(True Negative): \u60aa\u6027\u304b\u3064\u60aa\u6027\u3068\u5224\u5b9a\u3055\u308c\u308b FN(False Negative, \u507d\u9670\u6027): \u60aa\u6027\u3067\u3042\u308b\u304c\u3001\u826f\u6027\u3068\u4e88\u60f3\u3055\u308c\u308b FP(False Positive, \u507d\u967d\u6027): \u826f\u6027\u3067\u3042\u308b\u304c\u3001\u60aa\u6027\u3068\u4e88\u60f3\u3055\u308c\u308b","title":"\u6df7\u540c\u884c\u5217"},{"location":"class/#_7","text":"\u6b63\u89e3\u7387\uff08accuracy\uff09 \u9069\u5408\u7387\uff08precision, PPV\uff09 \u518d\u73fe\u7387\uff08recall, sensitivity, hit rate, TPR\uff09 F\u5024\uff08F-measure, F-score, F1-score \uff09","title":"\u5b9a\u91cf\u7684\u306a\u8a55\u4fa1\u6307\u6a19"},{"location":"class/#accuracy","text":"\u6b63\u89e3\u7387\uff08accuracy\uff09\u306f\u3001\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u3046\u3061\u6b63\u89e3\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u5272\u5408\u3067\u3059\u3002 \\frac{TF+TN}{TP+FP+FN+TN} \u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001\u6700\u3082\u4e00\u822c\u7684\u306b\u6027\u80fd\u8a55\u4fa1\u3067\u7528\u3044\u3089\u308c\u308b\u6307\u6a19\u3067\u3059\u3002 sklearn.metrics \u30e2\u30b8\u30e5\u30fc\u30eb\u306e accuracy_score() \u3067\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 \u6b63\u89e3\u7387: accuracy_score from sklearn.metrics import accuracy_score accuracy = accuracy_score ( y_test , y_pred ) print ( f '\u6b63\u89e3\u7387 { accuracy : .5f } ' ) \u6b63\u89e3\u7387 0.91228 \u5b66\u7fd2\u6e08\u307f\u306e\u5206\u985e\u30e2\u30c7\u30eb model \u3082\u3001 model.score(X, y) \u3067\u7c21\u5358\u306b\u7b97\u51fa\u3067\u304d\u308b\u3088\u3046\u306b \u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b63\u89e3\u7387\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b print ( f '\u6b63\u89e3\u7387(\u8a13\u7df4)' , model . score ( X_train , y_train )) print ( f '\u6b63\u89e3\u7387(\u30c6\u30b9\u30c8)' , model . score ( X_test , y_test )) \u6b63\u89e3\u7387(\u8a13\u7df4) 1.0 \u6b63\u89e3\u7387(\u30c6\u30b9\u30c8) 0.9122807017543859","title":"\u6b63\u89e3\u7387(accuracy)"},{"location":"class/#precision","text":"\u9069\u5408\u7387\uff08precision\uff09\u306f\u3001\u967d\u6027\u3068\u4e88\u6e2c\u3055\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u3046\u3061\u6b63\u89e3\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u5272\u5408\u3067\u3059\u3002 FP\uff08\u507d\u967d\u6027\uff09\u304c\u5927\u304d\u304f\u306a\u308b\u3068\u9069\u5408\u7387\u306f\u5c0f\u3055\u304f\u306a\u308b\u306e\u3067\u3001\u507d\u967d\u6027\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u306b\u7528\u3044\u307e\u3059\u3002 \\frac{TP}{TP+FP} sklearn.metrics \u30e2\u30b8\u30e5\u30fc\u30eb\u306e precision_score() \u3067\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 \u9069\u5408\u5ea6 from sklearn.metrics import precision_score precision = precision_score ( y_test , y_pred ) print ( f '\u9069\u5408\u7387 { precision : .5f } ' ) \u9069\u5408\u7387 0.96970","title":"\u9069\u5408\u5ea6(Precision)"},{"location":"class/#recall","text":"\u518d\u73fe\u7387\uff08recall\uff09\u306f\u5b9f\u969b\u306b\u967d\u6027\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u3046\u3061\u6b63\u89e3\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u5272\u5408\u3067\u3059\u3002 FN\uff08\u507d\u9670\u6027\uff09\u304c\u5927\u304d\u304f\u306a\u308b\u3068\u518d\u73fe\u7387\u306f\u5c0f\u3055\u304f\u306a\u308b\u306e\u3067\u3001\u507d\u9670\u6027\u3092\u907f\u3051\u305f\u3044\u5834\u5408\u306b\u7528\u3044\u307e\u3059\u3002 \\frac{TP}{TP+FN} sklearn.metrics \u30e2\u30b8\u30e5\u30fc\u30eb\u306e recall_score() \u3067\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 \u518d\u73fe\u7387 from sklearn.metrics import recall_score recall_score = recall_score ( y_test , y_pred ) print ( f '\u518d\u73fe\u7387 { recall : .5f } ' ) \u518d\u73fe\u7387 0.88889","title":"\u518d\u73fe\u7387(Recall)"},{"location":"class/#f","text":"F\u5024\uff08F1-measure\uff09\u306f\u9069\u5408\u7387\u3068\u518d\u73fe\u7387\u306e\u8abf\u548c\u5e73\u5747\u3067\u3059\u3002 \\frac{TP\\times 2}{TP\\times2+FP+FN} sklearn.metrics \u30e2\u30b8\u30e5\u30fc\u30eb\u306e recall_score() \u3067\u7b97\u51fa\u3067\u304d\u307e\u3059\u3002 F\u5024\u306e\u7b97\u51fa from sklearn.metrics import f1_score f1 = f1_score ( y_test , y_pred ) print ( f 'F1\u5024 { f1 : .5f } ' ) F1\u5024 0.92754 \u8a73\u3057\u304f\u306f\u3001 F\u5024\u306e\u8a18\u4e8b \u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"F\u5024"},{"location":"class/#_8","text":"\u5b9a\u91cf\u7684\u306b\u6b63\u89e3\u7387\u3092\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u306b\u57fa\u3065\u3044\u3066\u3001 \u3088\u308a\u6b63\u89e3\u7387\u306e\u9ad8\u3044\u5206\u985e\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002","title":"\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1"},{"location":"class/#_9","text":"\u6c7a\u5b9a\u6728\u306e\u5206\u985e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u3001\u6b21\u306e\u3088\u3046\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 DecisionTreeClassifier ( criterion = \u2019 gini \u2019 , splitter = \u2019 best \u2019 , max_depth = 4 , min_samples_split = 3 , min_samples_leaf = 1 , min_weight_fraction_leaf = 0.0 , max_features = 4 , random_state = None , max_leaf_nodes = 8 , min_impurity_split = 1e-07 , class_weight = \u2019 balanced \u2019 , presort = False ) \u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u89e3\u8aac\u306f\u3001\u6b21\u306e\u53c2\u8003\u8cc7\u6599\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002 \u53c2\u8003\u8cc7\u6599 * \u516c\u5f0f\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 * \u6c7a\u5b9a\u6728\u5206\u6790\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u89e3\u8aac \u6700\u521d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e0e\u3048\u65b9\u3067\u3001\u6b63\u89e3\u7387\u306f\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002 \u5c11\u3057\u3057\u304b\u5909\u308f\u3089\u306a\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u5927\u304d\u304f\u5f71\u97ff\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u3042\u308a\u307e\u3059\u3002 \u30d1\u30e9\u30e1\u30fc\u30bf: criterion=\u2019gini\u2019, max_depth=2 model = DecisionTreeClassifier ( criterion = 'gini' , max_depth = 2 ) model . fit ( X_train , y_train ) print ( f '\u6b63\u89e3\u7387(\u8a13\u7df4)' , model . score ( X_train , y_train )) print ( f '\u6b63\u89e3\u7387(\u30c6\u30b9\u30c8)' , model . score ( X_test , y_test )) \u30d1\u30e9\u30e1\u30fc\u30bf: criterion=\u2019entropy\u2019, max_depth=5 model = DecisionTreeClassifier ( criterion = 'entropy' , max_depth = 5 ) model . fit ( X_train , y_train ) print ( f '\u6b63\u89e3\u7387(\u8a13\u7df4)' , model . score ( X_train , y_train )) print ( f '\u6b63\u89e3\u7387(\u30c6\u30b9\u30c8)' , model . score ( X_test , y_test )) \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3084AI\u30a8\u30f3\u30b8\u30cb\u30a2\u306f\u3001 \u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u539f\u7406\u3092\u7406\u89e3\u3057\u3001\u7d4c\u9a13\u3092\u983c\u308a\u306b\u3067\u304d\u308b\u3060\u3051\u826f\u3044 \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3057\u3001\u6b63\u78ba\u3055\u306e\u9ad8\u3044\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u3044\u304d\u307e\u3059\u3002","title":"\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u30e2\u30c7\u30eb\u306e\u6b63\u89e3\u7387"},{"location":"class/#_10","text":"\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306f\u3001\u8907\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u63a2\u7d22\u3057\u3001 \u6700\u3082\u512a\u308c\u305f\u7cbe\u5ea6\u306e\u9ad8\u3044\u7d44\u307f\u5408\u308f\u305b\u3092\u63a2\u7d22\u3059\u308b\u624b\u6cd5\u3067\u3059 \u3002 sklearn\u3067\u306f\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3068\u7d44\u307f\u5408\u308f\u3055\u3063\u305f`GridSearchCV()'\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4f7f\u3044\u65b9\u306f\u3001\u7c21\u5358\u306a\u306e\u3067\u305c\u3072\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u3087\u3046\u3002 \u307e\u305a\u3001\u7d44\u307f\u5408\u308f\u305b\u3092\u8abf\u3079\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8f9e\u66f8\u3092\u4f5c\u308a\u307e\u3059\u3002 \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8f9e\u66f8\u3092\u4f5c\u308b hparams = { 'criterion' : [ 'gini' , 'entropy' ], 'max_depth' : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , None ], 'min_samples_leaf' : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ], # 'min_samples_split': [2, 3, 4, 5, 6, 7, 8], } \u7d44\u307f\u5408\u308f\u305b \u6700\u5927\uff13\u3064\u304f\u3089\u3044\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u9069\u5207\u3067\u3059\u3002 \u7d44\u307f\u5408\u308f\u305b\u3092 N \u306b\u3059\u308b\u3068\u3001\u8a08\u7b97\u6642\u9593\u306f O(p^N) \u3067\u5897\u3048\u307e\u3059\u3002 GridSearchCV() \u306b\u306f\u3001\u30e2\u30c7\u30eb\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8f9e\u66f8\u306e\u9806\u306b\u6e21\u3057\u307e\u3059\u3002 \u6c7a\u5b9a\u6728\u306e\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1 from sklearn.model_selection import GridSearchCV clf = GridSearchCV ( DecisionTreeClassifier (), hparams , cv = 5 ) clf . fit ( X_train , y_train ) best_model = clf . best_estimator_ print ( '\u6700\u826f\u6761\u4ef6: \\n ' , best_model ) print ( '\u6b63\u89e3\u7387(\u8a13\u7df4):' , best_model . score ( X_train , y_train )) print ( '\u6b63\u89e3\u7387(\u30c6\u30b9\u30c8):' , best_model . score ( X_test , y_test )) \u6700\u826f\u6761\u4ef6: DecisionTreeClassifier(criterion='entropy', max_depth=4, min_samples_leaf=2) \u6b63\u89e3\u7387(\u8a13\u7df4): 0.9849246231155779 \u6b63\u89e3\u7387(\u30c6\u30b9\u30c8): 0.9473684210526315 \u9ad8\u901f\u5316\u306e\u30b3\u30c4 \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5206\u5272\u6570\u306f\u3001cv=5\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001 \u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u308b\u5834\u5408\u306f\u3088\u308a\u5c0f\u3055\u306a\u5024\u306b\u3059\u308b\u3068\u65e9\u304f\u306a\u308a\u307e\u3059\u3002 \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306f\u3001\u4e07\u80fd\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u826f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3059\u30b9\u30bf\u30fc\u30c8\u5730\u70b9\u306b\u306a\u308a\u307e\u3059\u3002 \u305c\u3072\u3001\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u3087\u3046\u3002","title":"\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\uff08\u2605\uff09"},{"location":"class/#_11","text":"","title":"\u7df4\u7fd2\u554f\u984c"},{"location":"class/#_12","text":"","title":"\u30af\u30e9\u30b9\u5206\u985e\u5668\u3042\u308c\u3053\u308c"},{"location":"class/#_13","text":"\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306f\u3001\u7dda\u5f62\u56de\u5e30\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002 \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u300c\u56de\u5e30\u300d\u3068\u3001\u56de\u5e30\u304c\u3064\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u30af\u30e9\u30b9\u5206\u985e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002 \u56de\u5e30\u304b\u3089\u30af\u30e9\u30b9\u5206\u985e\u306e\u539f\u7406\u3092\u7406\u89e3\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u539f\u7406: \u7dda\u5f62\u56de\u5e30\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u306b\u3001\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570( \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u95a2\u6570 )\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u30ab\u30c6\u30b4\u30ea\u30fc\u5024\u306b\u5909\u63db\u3057\u307e\u3059\u3002 \\sigma(x) = \\frac{1}{1+e^{-x}} !!!! example \"Let's try\" \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092matplotlib\u3067\u63cf\u753b\u3057\u3066\u307f\u3088\u3046 import matplotlib.pyplot as plt import numpy as np from math import e x = np.arange(-10, 10, 0.1) y = 1 / (1 + e**-x) plt.plot(x, y) \uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3068\u591a\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c \u6570\u5b66\u7684\u306b\u6271\u3044\u3084\u3059\u3044\u305f\u3081\u3001\uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3068\u591a\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u306f\u533a\u5225\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4e0a\u8a18\u306e\u8aac\u660e\u306f\u3001\uff12\u30af\u30e9\u30b9\u5206\u985e\u306e\u30b1\u30fc\u30b9\u3067\u3059\u304c\u3001 \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306f\u591a\u30af\u30e9\u30b9\u5206\u985e\u306b\u62e1\u5f35\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u8208\u5473\u304c\u3042\u308b\u3068\u304d\u306f\u3001\u591a\u30af\u30e9\u30b9\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u306e\u539f\u7406\u3082\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002 from sklearn.linear_model import LogisticRegression","title":"\u56de\u5e30\u304b\u3089\u30af\u30e9\u30b9\u5206\u985e\u3078"},{"location":"class/#2","text":"\u4e73\u304c\u3093\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7528\u3044\u3066\u3001\uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3068\u3057\u3066\u3001\u4e73\u304c\u3093\u306e\u826f\u6027\u30fb\u60aa\u6027\u3092\u5224\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002","title":"\uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c"},{"location":"class/#_14","text":"\u307e\u305a\u3001\u3068\u308a\u3042\u3048\u305a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 from sklearn.linear_model import LogisticRegression \u91cd\u56de\u5e30\u306e\u3068\u304d\u3068\u540c\u3058\u304f\u3001\uff12\u3064\u306e\u8aac\u660e\u5909\u6570\u306b\u3057\u3066\u307f\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001\u9069\u5f53\u306b\u3075\u305f\u3064\u306e \u5e73\u5747\u534a\u5f84 \u3068 \u5e73\u5747\u611f\u89e6 \u3092\u9078\u3093\u3067\u3044\u307e\u3059\u3002 \u4ed6\u306e\u8aac\u660e\u5909\u6570\u306b\u5909\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 X = data[['\u5e73\u5747\u534a\u5f84', '\u5e73\u5747\u611f\u89e6']] y = data['\u826f\u6027'] model = LogisticRegression() # \u5b66\u7fd2\u306e\u5b9f\u884c model.fit(X, y) \u5b66\u7fd2\u3057\u305f\u30e2\u30c7\u30eb\u304c\u4e88\u6e2c\u3059\u308b\u306e\u306f\u3001 predict \u3092\u4f7f\u3044\u307e\u3059\u3002 model.predict([(20, 18)]) \u5165\u529b\u306b\u5bfe\u3057\u3066\u3001\u4e88\u6e2c\u3055\u308c\u305f\u826f\u6027/\u60aa\u6027\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002 \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u306f\u3067\u304d\u305f\u3088\u3046\u3067\u3059\u3002 Let's try \u5165\u529b\u3092\u5909\u66f4\u3057\u3066\u3069\u306e\u3088\u3046\u306b\u4e88\u6e2c\u3055\u308c\u308b\u304b\u8abf\u3079\u3066\u307f\u3088\u3046\u3002 \u307e\u305f\u3001\u4e88\u6e2c\u9593\u9055\u3044\u3092\u8d77\u3053\u3059\u30c7\u30fc\u30bf\u3082\u8abf\u3079\u3066\u307f\u3088\u3046\u3002 y_pred = model.predict(X) pd.DataFrame({'\u6b63\u89e3': y, '\u4e88\u6e2c': y_pred})","title":"\u5b66\u7fd2\u30e2\u30c7\u30eb"},{"location":"class/#_15","text":"\u4f8b\u984c\uff08\uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\uff09 \u4e73\u304c\u3093\u306e\u30c7\u30fc\u30bf\u3092\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3067\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf(7:3)\u306b\u5206\u5272\u3057\u3001 \u826f\u6027\u304b\u60aa\u6027\u304b\u5224\u5b9a\u3059\u308b\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u3088\u3046\u3002 \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30 \u6c7a\u5b9a\u6728 \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8 \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3 \u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3(MLP) \u30af\u30e9\u30b9\u5206\u985e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30 sklearn.linear_model.LogisticRegression \u4ee5\u5916\u306b\u3082\u591a\u304f\u3042\u308a\u307e\u3059\u3002 sklearn \u304b\u3089\u7c21\u5358\u306b\u8a66\u305b\u308b\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002 from sklearn.linear_model import LogisticRegression \u6c7a\u5b9a\u6728 : sklearn.tree.DecisionTreeClassifier \u6c7a\u5b9a\u6728\u306f\u3001\u6761\u4ef6\u5206\u5c90\u306b\u3088\u3063\u3066\u30b0\u30eb\u30fc\u30d7\u3092\u5206\u5272\u3057\u3066\u5206\u985e\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\u305d\u306e\u969b\u306b\u30b0\u30eb\u30fc\u30d7\u304c\u306a\u308b\u3079\u304f\u540c\u3058\u3088\u3046\u306a\u5c5e\u6027\u3067\u69cb\u6210\u3055\u308c\u308b\u3088\u3046\u306b\u5206\u5272\u3057\u307e\u3059\u3002 \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8 : sklearn.ensemble.RandomForestClassifier \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3068\u306f\u3001\u5206\u985e\u3084\u56de\u5e30\u306b\u4f7f\u3048\u308b\u6a5f\u68b0\u5b66\u7fd2\u306e\u624b\u6cd5\u3067\u3059\u3002\u6c7a\u5b9a\u6728\u3092\u305f\u304f\u3055\u3093\u4f5c\u3063\u3066\u591a\u6570\u6c7a\u3059\u308b\uff08\u307e\u305f\u306f\u5e73\u5747\u3092\u53d6\u308b\uff09\u3088\u3046\u306a\u624b\u6cd5\u3067\u3059\u3002\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306f\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u304c\u3001\u7cbe\u5ea6\u306e\u9ad8\u3044\u4e88\u6e2c/\u5206\u985e\u3092\u884c\u3048\u308b\u3068\u3044\u3046\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\u3002 \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\uff08SVC) : sklearn.svm.LinearSVC \u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\u306f\u3001\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58\u30e2\u30c7\u30eb\u306e\u4e00\u3064\u3067\u3001\u7dda\u5f62\u5165\u529b\u7d20\u5b50\u3092\u5229\u7528\u3057\u30662\u30af\u30e9\u30b9\u306e\u30d1\u30bf\u30fc\u30f3\u8b58\u5225\u5668\u3092\u69cb\u6210\u3059\u308b\u624b\u6cd5\u3067\u3059\u30022\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u9593\u306e\u6700\u3082\u8ddd\u96e2\u306e\u96e2\u308c\u305f\u7b87\u6240\uff08\u6700\u5927\u30de\u30fc\u30b8\u30f3\uff09\u3092\u898b\u3064\u3051\u51fa\u3057\u3001\u305d\u306e\u771f\u3093\u4e2d\u306b\u8b58\u5225\u306e\u7dda\u3092\u5f15\u304d\u307e\u3059\u3002 \u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u5206\u985e\u5668 : sklearn.naive_bayes.GaussianNB \u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u5206\u985e\u5668\u306f\u7279\u5fb4\u9593\u306b\u5f37\u3044\uff08\u30ca\u30a4\u30fc\u30d6\u306a\uff09\u72ec\u7acb\u6027\u3092\u4eee\u5b9a\u3057\u305f\u4e0a\u3067\u30d9\u30a4\u30ba\u306e\u5b9a\u7406\u3092\u4f7f\u3046\u3001\u78ba\u7387\u306b\u57fa\u3065\u3044\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002 \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3(MLP) : sklearn.neural_network.MLPClassifier \u4eba\u9593\u306e\u8133\uff08\u30cb\u30e5\u30fc\u30ed\u30f3\uff09\u306e\u6570\u7406\u30e2\u30c7\u30eb\u306b\u57fa\u3065\u304f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\u6df1\u5c64\u5b66\u7fd2\u306b\u7528\u3044\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u3044\u539f\u7406\u306f\u3001\u6388\u696d\u306e\u5f8c\u534a\u3067\u6271\u3044\u307e\u3059\u3002 \u8aac\u660e\u5909\u6570\u306f\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u9069\u3057\u305f\u3082\u306e\u3092\u9078\u3093\u3067\u69cb\u3044\u307e\u305b\u3093\u3002 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u6b63\u89e3\u7387\u3067\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u7df4\u7fd2\u554f\u984c"},{"location":"class/#_16","text":"\u4e73\u304c\u3093\u8a3a\u65ad\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u300130\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3067\u3057\u305f\u3002 \u4e00\u65b9\u3001\u4eba\u9593\u306f2\u6b21\u5143\u3001\u3082\u3057\u304f\u306f\uff13\u6b21\u5143\u3057\u304b\u8996\u899a\u7684\u306b\u7406\u89e3\u3067\u304d\u307e\u305b\u3093\u3002 \u6563\u5e03\u56f3\u3082\uff12\u6b21\u5143\u3001\u9811\u5f35\u3063\u3066\u3082\uff13\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u307e\u3067\u3057\u304b\u63cf\u753b\u3067\u304d\u307e\u305b\u3093\u3002 \uff12\u6b21\u5143\u306e\u6563\u5e03\u56f3 plt . figure ( figsize = ( 7 , 7 )) sns . scatterplot ( data = df , x = 'mean radius' , y = 'mean texture' , hue = 'target' ) plt . show () \u9811\u5f35\u3063\u3066\u3001\uff13\u6b21\u5143\u306e\u6563\u5e03\u56f3 from mpl_toolkits.mplot3d import Axes3D fig = plt . figure ( figsize = ( 7 , 7 )) ax = Axes3D ( fig ) ax . set_xlabel ( \"mean radius\" ) ax . set_ylabel ( \"mean texture\" ) ax . set_zlabel ( \"mean perimeter\" ) colors = [ 'r' , 'b' ] for i , gd in enumerate ( df . groupby ( 'target' )): ax . plot ( gd [ 1 ][ 'mean radius' ], gd [ 1 ][ 'mean texture' ], gd [ 1 ][ 'mean perimeter' ], marker = \"o\" , linestyle = 'None' , c = colors [ i ], alpha = 0.3 ) \u9811\u5f35\u3063\u30663\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092\u6563\u5e03\u56f3\u306b\u53ce\u3081\u3066\u3082\u3001 \u307e\u3060\u5168\u3066\u306e\u30c7\u30fc\u30bf\u306e\u6563\u3089\u3070\u308a\u304c\u8a00\u3048\u305f\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"(\u88dc\u8db3\uff09 \u6b21\u5143\u5727\u7e2e\u306b\u3088\u308b\u9ad8\u6b21\u5143\u30c7\u30fc\u30bf\u306e\u6563\u5e03\u56f3"},{"location":"class/#_17","text":"30\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3092\u6b8b\u3057\u306a\u304c\u3089\u3001\u6b21\u5143\u3092\u843d\u3068\u3059\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u3053\u3053\u3067\u306f\u3001 \u4e3b\u6210\u5206\u5206\u6790(PCA) \u306e\u624b\u6cd5\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002 \u4e3b\u6210\u5206\u5206\u6790(PCA)\u306b\u3088\u308b2\u6b21\u5143\u3078\u306e\u5727\u7e2e from sklearn.decomposition import PCA X = df [ df . columns [ 1 :]] pca = PCA ( n_components = 2 ) # \uff12\u6b21\u5143\u306b df2 = pd . DataFrame ( pca . fit_transform ( X ), columns = [ 'pc1' , 'pc2' ]) df2 = pd . concat ([ df [[ 'target' ]], df2 ], axis = 1 ) df2 . head () pc1\u306f\u7b2c\u4e00\u4e3b\u6210\u5206\u3001pc2\u306f\u7b2c\u4e8c\u4e3b\u6210\u5206\u3092\u8868\u3057\u307e\u3059\u3002 \u4e3b\u6210\u5206\u5206\u6790\u3092\u3057\u305f\u7d50\u679c\u3092\u7528\u3044\u3066\u6563\u5e03\u56f3\u3092\u63cf\u753b\u3059\u308c\u3070\u3001 \u9ad8\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u306e\u6563\u3089\u3070\u308a\u3092\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 ```py title='\u4e3b\u6210\u5206\u5206\u6790\u306e\u7d50\u679c\u304b\u3089\u6563\u5e03\u56f3\u3092\u63cf\u753b\u3059\u308b\" plt.figure(figsize=(7, 7)) sns.scatterplot(data=df2, x='pc1', y='pc2', hue='target') plt.show() ![](figs/cancer_scatter_pca-fs8.png) ## \u30b9\u30b1\u30fc\u30ea\u30f3\u30b0 \u4e73\u304c\u3093\u8a3a\u65ad\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u691c\u67fb\u7d50\u679c\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u304c\u3001 \u305d\u308c\u305e\u308c\u5358\u4f4d\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u5404\u30ab\u30e9\u30e0\u3054\u3068\u306b\u6700\u5927\u5024\u3084\u6700\u5c0f\u5024\u3082\u5927\u304d\u304f\u3070\u3089\u3064\u3044\u3066\u3044\u307e\u3059\u3002 ![](figs/cancer_boxplot1-fs8.png) \u30c7\u30fc\u30bf\u5206\u6790\u3067\u306f\u3001\u5927\u304d\u306a\u5024\u306e\u8aac\u660e\u5909\u6570\u304c\u3042\u308b\u3068\u3001\u5c0f\u3055\u306a\u5024\u306e\u8aac\u660e\u5909\u6570\u306e\u5f71\u97ff\u304c\u5c0f\u3055\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u5f71\u97ff\u3092\u6392\u9664\u3059\u308b\u305f\u3081\u3001\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff08\u6a19\u6e96\u5316\uff09\u306f\u5e38\u5957\u624b\u6bb5\u3067\u3059\u3002 __\u6a19\u6e96\u5316__: \u30b5\u30f3\u30d7\u30eb\u5024$x$\u304b\u3089\u5e73\u5747$\\bar{x}$\u3092\u5f15\u304d\u3001\u6a19\u6e96\u504f\u5dee$\\sigma$\u3067\u5272\u308b $$ z = \\frac{x - \\bar{x}}{\\sigma} $$ sklearn\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u3001 \u7c21\u5358\u306b\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306e\u9053\u5177\u304c`StandardScaler`\u30af\u30e9\u30b9\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 ``` title=\"StandardScaler\u306b\u3088\u308b\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\" from sklearn.preprocessing import StandardScaler sc = StandardScaler() X = sc.fit_transform(df[df.columns[1:]]) # \u6a19\u6e96\u5316 plt.figure(figsize=(14, 7)) sns.boxplot(data=pd.DataFrame(X, columns=df.columns[1:]), orient='horizontal') plt.show() \u4e3b\u6210\u5206\u5206\u6790\u306e\u524d\u306b\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u3057\u3066\u6563\u5e03\u56f3\u3092\u66f8\u304f from sklearn.preprocessing import StandardScaler sc = StandardScaler () X = sc . fit_transform ( df [ df . columns [ 1 :]]) # \u30b9\u30b1\u30fc\u30ea\u30f3\u30b0 pca = PCA ( n_components = 2 ) # \uff12\u6b21\u5143\u306b df3 = pd . DataFrame ( pca . fit_transform ( X ), columns = [ 'pc1' , 'pc2' ]) df3 = pd . concat ([ df [[ 'target' ]], df3 ], axis = 1 ) plt . figure ( figsize = ( 7 , 7 )) sns . scatterplot ( data = df3 , x = 'pc1' , y = 'pc2' , hue = 'target' ) plt . show ()","title":"\u6b21\u5143\u5727\u7e2e"},{"location":"corpus/","text":"\u30c7\u30fc\u30bf\u8cc7\u6e90\u3068\u30b3\u30fc\u30d1\u30b9 # \u6a5f\u68b0\u5b66\u7fd2\u306f\u3001\u30c7\u30fc\u30bf\u304c\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\u30c7\u30fc\u30bf\u8cc7\u6e90\u3067\u3042\u308b\u30b3\u30fc\u30d1\u30b9\u306b \u81ea\u7136\u8a00\u8a9e\u5206\u91ce\u3067\u306f\u3001\u30b3\u30fc\u30d1\u30b9","title":"\u30c7\u30fc\u30bf\u8cc7\u6e90\u3068\u30b3\u30fc\u30d1\u30b9"},{"location":"corpus/#_1","text":"\u6a5f\u68b0\u5b66\u7fd2\u306f\u3001\u30c7\u30fc\u30bf\u304c\u91cd\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\u30c7\u30fc\u30bf\u8cc7\u6e90\u3067\u3042\u308b\u30b3\u30fc\u30d1\u30b9\u306b \u81ea\u7136\u8a00\u8a9e\u5206\u91ce\u3067\u306f\u3001\u30b3\u30fc\u30d1\u30b9","title":"\u30c7\u30fc\u30bf\u8cc7\u6e90\u3068\u30b3\u30fc\u30d1\u30b9"},{"location":"kaggle/","text":"Kaggle \u306b\u6311\u6226 # Kaggle \u3092\u7528\u3044\u3066\u3001 \u3088\u308a\u5b9f\u8df5\u7684\u306b\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\uff06\u6a5f\u68b0\u5b66\u7fd2\u3092\u5b66\u3073\u3001\u7df4\u7fd2\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 Kaggle \u3068\u5165\u9580\u8005\u5411\u3051\u30b3\u30fc\u30b9\u30a6\u30a7\u30a2 \u3044\u3064\u3082\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046 import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try: import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError: !pip install japanize_matplotlib import japanize_matplotlib sns.set(font=\"IPAexGothic\") #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a Kaggle # Kaggle\u306f\u3001\u4e16\u754c\u4e2d\u306e\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u30fb\u6a5f\u68b0\u5b66\u7fd2\u3092\u5b66\u3093\u3067\u3044\u308b\u4eba\u3001\u4ed5\u4e8b\u3067\u6d3b\u7528\u3057\u3066\u3044\u308b\u4eba\u304c\u300140\u4e07\u4eba\u4ee5\u4e0a\u96c6\u307e\u308b\u30b3\u30df\u30cb\u30c6\u30a3\u3067\u3059\u3002Kaggle\u3067\u306f\u3001\u4f01\u696d\u3084\u653f\u5e9c\u306a\u3069\u306e\u7d44\u7e54\u3068\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3092\u7e4b\u3052\u308b\u30b3\u30f3\u30da\u5f62\u5f0f\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 Competition\uff08\u30b3\u30f3\u30da\uff09 \u4f01\u696d\u3084\u653f\u5e9c\u304c\u30b3\u30f3\u30da\u5f62\u5f0f\uff08\u7af6\u4e89\u5f62\u5f0f\uff09\u3067\u8ab2\u984c\u3092\u63d0\u793a\u3057\u3001\u8cde\u91d1\u3068\u5f15\u304d\u63db\u3048\u306b\u6700\u3082\u5236\u5ea6\u306e\u9ad8\u3044\u5206\u6790\u30e2\u30c7\u30eb\u3092\u8cb7\u3044\u53d6\u308b\u30af\u30e9\u30a6\u30c9\u30d5\u30a1\u30f3\u30c7\u30a3\u30f3\u30b0\u306b\u8fd1\u3044\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u5404\u30b3\u30f3\u30da\u306e\u5229\u7528\u898f\u7d04\u3078\u540c\u610f\u3092\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c0\u30a6\u30ed\u30fc\u30c9\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u843d\u3068\u3057\u3066\u3001\u81ea\u5206\u3067\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3044\u3001\u6700\u9069\u306a\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001\u904e\u53bb\u306e\u30b3\u30f3\u30da\u306e\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u3001\u7df4\u7fd2\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u307e\u305f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u304c\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3082\u53c2\u8003\u306b\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001 \u975e\u5e38\u306b\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c # \u6709\u540d\u306a\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c\u306e\u554f\u984c\u306b\u6311\u6226\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c(Kaggle) Kaggle\u306e\u5229\u7528\u306b\u306f\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332(\u7121\u6599)\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3092\u3055\u3089\u306b\u6df1\u3081\u3066\u52c9\u5f37\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u4f1a\u54e1\u767b\u9332\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u6b21\u306e\u3075\u305f\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u624b\u3057\u307e\u3059\u3002 train.csv : \u8a13\u7df4\u30c7\u30fc\u30bf test.csv : \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf \u82f1\u8a9e\u306b\u3064\u3044\u3066 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u7cfb\u306e\u6700\u65b0\u6280\u8853\u3084\u8a71\u984c\u306f\u5168\u3066\u6d77\u5916\u304b\u3089\u304d\u307e\u3059\u3002 \u82f1\u8a9e\u304c\u82e6\u624b\u3067\u3042\u3063\u3066\u3082\u306a\u304f\u3066\u3082\u3001\u3053\u3053\u304b\u3089\u5148\u306f\u82f1\u8a9e\u3067\u66f8\u304b\u308c\u305f\u60c5\u5831\u3092\u8aad\u307f\u53d6\u308b\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002 Pandas \u3092\u7528\u3044\u3066\u3001\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\u3092\u3057\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d train = pd.read_csv(\"train.csv\") test = pd.read_csv(\"test.csv\") print('\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6b21\u5143', train.shape) print('\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b21\u5143', test.shape) \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\u6700\u521d\u304b\u3089\u5225\u3005\u306b\u306a\u3063\u3066\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 \u30b3\u30f3\u30da\u306a\u306e\u3067\u3001 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b63\u89e3\u306f\u308f\u304b\u3089\u306a\u3044 \u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u9ad8\u3044\u6b63\u89e3\u7387\u3092\u7af6\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u3001 \u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u306f Survived \u306e\u30ab\u30e9\u30e0\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u3064\u307e\u308a\u3001\u3053\u306e Survived \u3092\u76ee\u7684\u5909\u6570\u3068\u3057\u3066\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 train.head() test.head() \u30c7\u30fc\u30bf\u306e\u628a\u63e1 # \u307e\u305a\u3001\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u4e57\u5ba2\u8005\u540d\u7c3f\u306e\u5c5e\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 PassengerId : \u4e57\u5ba2\u8b58\u5225\u30e6\u30cb\u30fc\u30afID Survived : \u751f\u5b58\u30d5\u30e9\u30b0\uff080=\u6b7b\u4ea1\u30011=\u751f\u5b58\uff09 Pclass : \u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9 1 \u4e0a\u5c64\u30af\u30e9\u30b9\uff08\u304a\u91d1\u6301\u3061\uff09 2 \u4e2d\u7d1a\u30af\u30e9\u30b9\uff08\u4e00\u822c\u968e\u7d1a\uff09 3 \u4e0b\u5c64\u30af\u30e9\u30b9\uff08\u52b4\u50cd\u968e\u7d1a\uff09 Name : \u4e57\u5ba2\u306e\u540d\u524d Sex : \u6027\u5225\uff08male=\u7537\u6027\u3001female\uff1d\u5973\u6027\uff09 Age : \u5e74\u9f62 SibSp : \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306b\u540c\u4e57\u3057\u3066\u3044\u308b\u5144\u5f1f/\u914d\u5076\u8005\u306e\u6570 parch : \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306b\u540c\u4e57\u3057\u3066\u3044\u308b\u89aa/\u5b50\u4f9b\u306e\u6570 ticket : \u30c1\u30b1\u30c3\u30c8\u756a\u53f7 fare : \u6599\u91d1 cabin : \u5ba2\u5ba4\u756a\u53f7 Embarked : \u51fa\u6e2f\u5730 C = Cherbourg Q = Queenstown S = Southampton \u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u4f5c\u6210 # \u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u306f\u3001\u4eca\u307e\u3067\u7fd2\u3063\u3066\u304d\u305f\u901a\u308a\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3000\u30c7\u30fc\u30bf\u5206\u6790\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u6e96\u5099\u3059\u308b \u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(\u30e2\u30c7\u30eb\uff09\u3092\u9078\u3076 \u8aac\u660e\u5909\u6570\u3092\u9078\u3076 \u5b66\u7fd2\uff06\u8a55\u4fa1\u3059\u308b \u3053\u308c\u4ee5\u5916\u306b\u3082\u69d8\u3005\u306a\u5de5\u592b\u304c\u3042\u308a\u307e\u3059\u3002 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c\u306f\u3001Kaggle\u306e\u5165\u9580\u984c\u6750\u3068\u3057\u3066\u8272\u3005\u306a\u89e3\u8aac\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u308c\u3089\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u3001\u305c\u3072\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30b3\u30f3\u30da\u3078\u306e\u63d0\u51fa\u65b9\u6cd5 # \u3055\u3066\u3001\u7121\u4e8b\u306b\u4e88\u6e2c\u30e2\u30c7\u30eb\u304c\u958b\u767a\u3067\u304d\u305f\u3068\u3057\u3066\u3001\u30b3\u30f3\u30da\u3078\u306e\u63d0\u51fa\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002 \u30b3\u30f3\u30da\u306e\u30da\u30fc\u30b8 \u306e\u300cSubmit Predictions\u300d\u3092\u958b\u3044\u3066\u3001 \u305d\u3053\u306e\u6307\u793a\u306b\u3057\u305f\u304c\u3063\u3066\u63d0\u51fa\u3057\u307e\u3059\u3002 \u63d0\u51fa\u65b9\u6cd5\u306f\u3001\u30b3\u30f3\u30da\u3054\u3068\u306b\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u8a73\u7d30\u306f\u8aac\u660e\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002 \u3053\u3053\u306f\u3001 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c(Kaggle) \u306e\u5834\u5408\u3092\u8aac\u660e\u3057\u307e\u3059\u3002 \u307e\u305a\u3001\u5b66\u7fd2\u3057\u305f\u4e88\u6e2c\u30e2\u30c7\u30eb( model )\u304b\u3089\u3001 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u3092\u884c\u3044\u307e\u3059\u3002 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c X_test = pd . read_csv ( 'test.csv' ) y_pred = model . predict ( X_test ) \u63d0\u51fa\u306f\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u6307\u5b9a\u3055\u308c\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 \u3053\u3053\u3067\u5fc5\u8981\u306b\u306a\u308b\u306e\u306f\u3001 PassengerId \u3068\u4e88\u6e2c\u3055\u308c\u305f Survived \u306e\u3075\u305f\u3064\u306e\u30ab\u30e9\u30e0\u304b\u3089\u306a\u308b\u8868\u30c7\u30fc\u30bf\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u3001 result.csv \u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002 import numpy as np df = pd . DataFrame ({ 'PassengerId' : test [ 'PassengerId' ], 'Survived' : y_pred }) df . to_csv ( \"result.csv\" , index = False ) \u3053\u308c\u3067\u3001 result.csv \u304c\u3067\u304d\u307e\u3057\u305f\u3002 \u4e00\u5fdc\u3001 result.csv \u306e\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3092\u78ba\u8a8d\u3057\u3066\u3001\u6b63\u3057\u304f\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u304b\u307f\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u6700\u521d\u306e10\u884c\u3092\u8868\u793a\u3057\u3066\u307f\u308b !head result.csv PassengerId,Survived 892,0 893,1 894,0 895,0 896,1 897,0 898,1 899,0 900,1 \u4e88\u6e2c\u5024\u306a\u306e\u3067.. Survived \u306e\u30ab\u30e9\u30e0\u306e\u5024\u306f\u3001\u4f5c\u6210\u3057\u305f\u4e88\u6e2c\u30e2\u30c7\u30eb\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u3042\u3068\u306f\u3001Colab\u304b\u3089 result.csv \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001Kaggle\u306b\u63d0\u51fa\u3057\u307e\u3059\u3002 \u3057\u3070\u3057\u5f85\u3064\u3068\u3001\u30b9\u30b3\u30a2\uff08\u6b63\u89e3\u7387\uff09\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 Let's try \u81ea\u5206\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u3001\u50d5\u306e\u30b9\u30b3\u30a2\uff08\u6b63\u89e3\u7387\uff09 0.77990 \u3092\u8d85\u3048\u3066\u307f\u3088\u3046\u3002 \u7df4\u7fd2 # Kaggle \u306b\u30e6\u30fc\u30b6\u767b\u9332\u3092\u3057\u3066\u3001 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c(Kaggle) \u306e\u30b3\u30f3\u30da\u306b\u6311\u6226\u3057\u3066\u307f\u3088\u3046\u3002 \u305f\u3060\u3057\u3001\u30b3\u30f3\u30da\u81ea\u4f53\u306f\u7d42\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7df4\u7fd2\u7528\u306e\u904e\u53bb\u3082\u30b3\u30f3\u30da\u3068\u306a\u308a\u307e\u3059\u3002 Submit\u3057\u305f\u5f8c\u306e\u6b63\u89e3\u30b9\u30b3\u30a2\u3092\u5831\u544a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u521d\u5fc3\u8005\u5411\u3051\u306e\u30d2\u30f3\u30c8 # \u3061\u3087\u3063\u3068\u5c11\u3057\u30e2\u30c7\u30eb\u4f5c\u308a\u306b\u95a2\u3059\u308b\u30d2\u30f3\u30c8\u3092\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u6b20\u640d\u5024\u3092\u51e6\u7406\u3059\u308b # \u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u5206\u6790\u3067\u306f\u3001100%\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u63c3\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\u3002 \u3069\u3053\u304b\u306e\u5c5e\u6027\u304c\u4e00\u90e8\u6b20\u3051\u3066\u3044\u305f\u308a\u3001\u4fe1\u7528\u6027\u304c\u4f4e\u304f\u3066\u4f7f\u3048\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u4e57\u5ba2\u540d\u7c3f\u306f\u3001\u4f55\u304b\u5acc\u304c\u3089\u305b\u304b\u3068\u601d\u3046\u307b\u3069\u3001\u30c7\u30fc\u30bf\u304c\u6b20\u640d\u3057\u3066\u3044\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024 train.isnull().sum() test.isnull().sum() Note \u30dd\u30a4\u30f3\u30c8\uff1a \u3053\u306e\u6b20\u640d\u3057\u305f\u5024\u3092\u3069\u3046\u89e3\u91c8\u3057\u3001\u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u306b\u751f\u304b\u3057\u3066\u3044\u304f\u306e\u304b\uff1f \u5b9f\u306f\u3001\u6570\u591a\u304f\u3042\u308bKaggle\u306e\u30b3\u30f3\u30da\u306e\u4e2d\u304b\u3089\u300c\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c\u300d\u3092\u9078\u3093\u3060\u306e\u306f\u3001 \u8272\u3005\u306a\u4eba\u304c\u89e3\u8aac\u3092\u304b\u3044\u3066\u3044\u3066\u53c2\u8003\u306b\u3059\u308b\u60c5\u5831\u304cWeb\u306b\u591a\u304f\u5b58\u5728\u3059\u308b\u304b\u3089\u3067\u3059\u3002 \u305d\u308c\u3089\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u3001\u3088\u3044\u65b9\u6cd5\uff08\u4eee\u8aac\uff09\u3092\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u8aac\u660e\u5909\u6570 # \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306f\u3001\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3001\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u6027\u5225\u306f\u6b21\u306e\u3088\u3046\u306b0, 1\u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002 train[\"Sex\"] = train[\"Sex\"].map({\"male\": 0, \"female\": 1}) test[\"Sex\"] = test[\"Sex\"].map({\"male\": 0, \"female\": 1}) \u8aac\u660e\u5909\u6570\u3001\u76ee\u7684\u5909\u6570\u3092\u9078\u3073\u307e\u3059\u3002 X_train = train[[\"Pclass\", \"Sex\", \"Fare\"]] y_train = train[\"Survived\"] X_test = test[[\"Pclass\", \"Sex\", \"Fare\"]] \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9078\u3076 # \u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9078\u3073\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u306a\u306e\u3067\u3001 \u5206\u985e\u5668(Classifier) \u306e\u4e2d\u304b\u3089\u9078\u3073\u307e\u3059\u3002 \u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u30c7\u30fc\u30bf\u306e\u6b63\u5ba4\u306b\u5bfe\u3057\u3066\u3001\u5f97\u610f/\u4e0d\u5f97\u610f\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u6700\u521d\u306e\u3046\u3061\u306f\u5168\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u8272\u3005\u8a66\u3057\u3066\u307f\u305f\u65b9\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002 \u3053\u3053\u3067\u306f\u3001\u6c7a\u5b9a\u6728\u3092\u8868\u793a\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3001 DecisionTreeClassifier \u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002 from sklearn.tree import DecisionTreeClassifier,plot_tree model = DecisionTreeClassifier(max_depth=3) model.fit(X_train, y_train) Warning \u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u6b20\u640d\u5024\u304c\u3042\u308b\u3068\uff1a ValueError: Input contains NaN, infinity or a value too large \u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3067\u3057\u3063\u304b\u308a\u3068\u3001\u53d6\u308a\u9664\u304d\u307e\u3057\u3087\u3046\u3002 \u3055\u3066\u3001\u6c7a\u5b9a\u6728\u306e\u3044\u3044\u3068\u3053\u308d\u306f\u3001\u3069\u3046\u3044\u3046\u904e\u7a0b\u3067\u5206\u985e\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u898b\u3048\u308b\u5316\u3057\u3084\u3059\u3044\u3068\u3053\u308d\u3067\u3059\u3002 plt.figure(figsize=(15,10)) plot_tree(model,feature_names=X_train.columns,filled=True, rounded=True, proportion=True) plt.show() \u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u3001\u6b63\u89e3\u7387\u3092\u8a08\u7b97\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u6b63\u89e3\u304c\u306a\u3044\u306e\u3067\u8a08\u7b97\u3067\u304d\u307e\u305b\u3093\u3002\uff09 model.score(X_train, y_train) \u826f\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\uff08maxdepth\u3092\u6df1\u304f\u3059\u308b\u3068\u3001\u3082\u3063\u3068\u7cbe\u5ea6\u306f\u9ad8\u304f\u306a\u308a\u307e\u3059\u3002\uff09 \u63d0\u51fa\u30c7\u30fc\u30bf\u306e\u4f5c\u6210 # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089\u4e88\u6e2c\u5024\u3092\u6c42\u3081\u3066\u3001\u63d0\u51fa\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002 # Fare \u306e\u524d\u51e6\u7406\u3092\u5fd8\u308c\u306a\u3044\u3067 # X_test[\"Fare\"].fillna(X_test[\"Fare\"].mean(), inplace=True) y_pred = model.predict(X_test) Warning \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u6b20\u640d\u5024\u304c\u3042\u308b\u3068\uff1a ValueError: Input contains NaN, infinity or a value too large \u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3067\u3057\u3063\u304b\u308a\u3068\u3001\u53d6\u308a\u9664\u304d\u307e\u3057\u3087\u3046\u3002 Pandas\u3092\u4f7f\u3063\u3066\u8868\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3057\u3001CSV\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 data = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': y_pred}) data.head() data.to_csv(\"result.csv\", index=False) !head result.csv Warning \u4e88\u6e2c\u7d50\u679c\u306a\u306e\u3067.. Survived \u306e\u30ab\u30e9\u30e0\u306e\u5024\u306f\u3001\u4f5c\u6210\u3057\u305f\u4e88\u6e2c\u30e2\u30c7\u30eb\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002 \u4e00\u81f4\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u6307\u5b9a\u3055\u308c\u305fCSV\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u305f\u3089\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u63d0\u51fa\u3057\u307e\u3059\u3002 \u3057\u3070\u3057\u5f85\u3064\u3068\u3001\u30b9\u30b3\u30a2\uff08\u6b63\u89e3\u7387\uff09\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u904e\u5b66\u7fd2\u3092\u9632\u3050\u306b\u306f # \u30c7\u30fc\u30bf\u5206\u6790\u306e\u6e96\u5099 # \u6b21\u56de\u304b\u3089Pandas \u3092\u7528\u3044\u3066\u3001\u3088\u308a\u672c\u683c\u7684\u306a\u30c7\u30fc\u30bf\u5206\u6790\u3092\u59cb\u3081\u307e\u3059\u3002 \u6b20\u640d\u5024\u306e\u30c1\u30a7\u30c3\u30af # \u4e16\u306e\u4e2d\u306e\u30c7\u30fc\u30bf\u306f\u3001\u30c7\u30fc\u30bf\u5024\u304c\u6b20\u3051\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u4eca\u56de\u306e\u7df4\u7fd2\u30c7\u30fc\u30bf\u3067\u306f\u3001 NaN \u3068\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u5024\u304c\u3001\u6b20\u640d\u5024\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u4ef6\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u306f\u3001\u76ee\u8996\u3067\u307f\u3064\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u304c\u3001 \u30c7\u30fc\u30bf\u4ef6\u6570\u304c\u591a\u304f\u306a\u308b\u3068\u3001\u624b\u4f5c\u696d\u3067\u63a2\u3059\u306e\u306f\u7121\u7406\u3067\u3059\u3002 \u6b20\u640d\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 data.isnull().sum() \u6b20\u640d\u5024\u304c\u898b\u3064\u304b\u3063\u305f\u3068\u304d\u306f\u3001 \u6b20\u640d\u5024\u3092\u51e6\u7406\u3059\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u3057\u3066\u306f\uff1a dropna() \uff1a\u30c7\u30fc\u30bf\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u884c\u3084\u5217\u3092\u524a\u9664\u3059\u308b fillna() \uff1a\u30c7\u30fc\u30bf\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u8981\u7d20\u3092\u5225\u306e\u5024\u3067\u7a74\u57cb\u3081\u3059\u308b \u3069\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u304b\u306f\u3001\u30c7\u30fc\u30bf\u5206\u6790\u306e\u76ee\u7684\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\u30e1\u30f3\u30d0\u30fc\u3092\u6d88\u3057\u3066\u3057\u307e\u3063\u305f\u3089\u3001\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001 __\u6b20\u640d\u5024\u306e\u5024\u3092\u5e73\u5747\u5024\u3067\u88dc\u5b8c\u3059\u308b__\u3053\u3068\u3067\u5bfe\u5fdc\u3057\u3066\u307f\u307e\u3059\u3002 data.fillna(data.mean(), inplace=True) data Note \u6b20\u640d\u5024\u306e\u88dc\u5b8c \u30c7\u30fc\u30bf\u5206\u6790\u3067\u306f\u3001\u6b20\u640d\u5024\u306f\u4f55\u304b\u306e\u5acc\u304c\u3089\u305b\u304b\u3068\u601d\u3046\u307b\u3069\u3001\u983b\u7e41\u306b\u751f\u3058\u307e\u3059\u3002 \u8272\u3005\u306a\u88dc\u5b8c\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u9069\u5207\u306a\u65b9\u6cd5\u3092\u9078\u3093\u3067\u304f\u3060\u3055\u3044\u3002 data['\u4f53\u91cd'].fillna(50.0) # \u4f53\u91cd\u306e\u6b20\u640d\u5024\u309250.0\u3067\u7a74\u57cb\u3081 data['\u4f53\u91cd'].fillna(data['\u4f53\u91cd'].mean()) # \u4f53\u91cd\u306e\u6b20\u640d\u5024\u3092\u4f53\u91cd\u306e\u5e73\u5747\u5024\u3067\u7a74\u57cb\u3081 data['\u4f53\u91cd'].fillna(data['\u4f53\u91cd'].median()) # \u4f53\u91cd\u306e\u6b20\u640d\u5024\u3092\u4f53\u91cd\u306e\u4e2d\u592e\u5024\u3067\u7a74\u57cb\u3081 data['\u4f53\u91cd'].fillna(data['\u4f53\u91cd'].mode()) # \u4f53\u91cd\u306e\u6b20\u640d\u5024\u3092\u4f53\u91cd\u306e\u6700\u983b\u5024\u3067\u7a74\u57cb\u3081 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af # \u3069\u3061\u3089\u304b\u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3057\u3066\u3001\u30b3\u30f3\u30da\u306b\u53c2\u52a0\u3057\u3066\u307f\u3088\u3046\u3002 **\u6f14\u7fd2\uff08Kaggle\uff09** Kaggle \u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3057\u3001 \u300c\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u300d\u306e\u30b3\u30f3\u30da\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u3066\u307f\u3088\u3046\u3002","title":"Kaggle\u306b\u6311\u6226"},{"location":"kaggle/#kaggle","text":"Kaggle \u3092\u7528\u3044\u3066\u3001 \u3088\u308a\u5b9f\u8df5\u7684\u306b\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\uff06\u6a5f\u68b0\u5b66\u7fd2\u3092\u5b66\u3073\u3001\u7df4\u7fd2\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 Kaggle \u3068\u5165\u9580\u8005\u5411\u3051\u30b3\u30fc\u30b9\u30a6\u30a7\u30a2 \u3044\u3064\u3082\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046 import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try: import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError: !pip install japanize_matplotlib import japanize_matplotlib sns.set(font=\"IPAexGothic\") #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a","title":"Kaggle \u306b\u6311\u6226"},{"location":"kaggle/#kaggle_1","text":"Kaggle\u306f\u3001\u4e16\u754c\u4e2d\u306e\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u30fb\u6a5f\u68b0\u5b66\u7fd2\u3092\u5b66\u3093\u3067\u3044\u308b\u4eba\u3001\u4ed5\u4e8b\u3067\u6d3b\u7528\u3057\u3066\u3044\u308b\u4eba\u304c\u300140\u4e07\u4eba\u4ee5\u4e0a\u96c6\u307e\u308b\u30b3\u30df\u30cb\u30c6\u30a3\u3067\u3059\u3002Kaggle\u3067\u306f\u3001\u4f01\u696d\u3084\u653f\u5e9c\u306a\u3069\u306e\u7d44\u7e54\u3068\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3092\u7e4b\u3052\u308b\u30b3\u30f3\u30da\u5f62\u5f0f\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 Competition\uff08\u30b3\u30f3\u30da\uff09 \u4f01\u696d\u3084\u653f\u5e9c\u304c\u30b3\u30f3\u30da\u5f62\u5f0f\uff08\u7af6\u4e89\u5f62\u5f0f\uff09\u3067\u8ab2\u984c\u3092\u63d0\u793a\u3057\u3001\u8cde\u91d1\u3068\u5f15\u304d\u63db\u3048\u306b\u6700\u3082\u5236\u5ea6\u306e\u9ad8\u3044\u5206\u6790\u30e2\u30c7\u30eb\u3092\u8cb7\u3044\u53d6\u308b\u30af\u30e9\u30a6\u30c9\u30d5\u30a1\u30f3\u30c7\u30a3\u30f3\u30b0\u306b\u8fd1\u3044\u4ed5\u7d44\u307f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u5404\u30b3\u30f3\u30da\u306e\u5229\u7528\u898f\u7d04\u3078\u540c\u610f\u3092\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30c0\u30a6\u30ed\u30fc\u30c9\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u843d\u3068\u3057\u3066\u3001\u81ea\u5206\u3067\u30c7\u30fc\u30bf\u5206\u6790\u3092\u884c\u3044\u3001\u6700\u9069\u306a\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001\u904e\u53bb\u306e\u30b3\u30f3\u30da\u306e\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u3001\u7df4\u7fd2\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u307e\u305f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u304c\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3082\u53c2\u8003\u306b\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001 \u975e\u5e38\u306b\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002","title":"Kaggle"},{"location":"kaggle/#_1","text":"\u6709\u540d\u306a\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c\u306e\u554f\u984c\u306b\u6311\u6226\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c(Kaggle) Kaggle\u306e\u5229\u7528\u306b\u306f\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332(\u7121\u6599)\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3092\u3055\u3089\u306b\u6df1\u3081\u3066\u52c9\u5f37\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u4f1a\u54e1\u767b\u9332\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u6b21\u306e\u3075\u305f\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u624b\u3057\u307e\u3059\u3002 train.csv : \u8a13\u7df4\u30c7\u30fc\u30bf test.csv : \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf \u82f1\u8a9e\u306b\u3064\u3044\u3066 \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u7cfb\u306e\u6700\u65b0\u6280\u8853\u3084\u8a71\u984c\u306f\u5168\u3066\u6d77\u5916\u304b\u3089\u304d\u307e\u3059\u3002 \u82f1\u8a9e\u304c\u82e6\u624b\u3067\u3042\u3063\u3066\u3082\u306a\u304f\u3066\u3082\u3001\u3053\u3053\u304b\u3089\u5148\u306f\u82f1\u8a9e\u3067\u66f8\u304b\u308c\u305f\u60c5\u5831\u3092\u8aad\u307f\u53d6\u308b\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002 Pandas \u3092\u7528\u3044\u3066\u3001\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\u3092\u3057\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d train = pd.read_csv(\"train.csv\") test = pd.read_csv(\"test.csv\") print('\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6b21\u5143', train.shape) print('\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b21\u5143', test.shape) \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\u6700\u521d\u304b\u3089\u5225\u3005\u306b\u306a\u3063\u3066\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 \u30b3\u30f3\u30da\u306a\u306e\u3067\u3001 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b63\u89e3\u306f\u308f\u304b\u3089\u306a\u3044 \u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u9ad8\u3044\u6b63\u89e3\u7387\u3092\u7af6\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u3001 \u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u306f Survived \u306e\u30ab\u30e9\u30e0\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u3064\u307e\u308a\u3001\u3053\u306e Survived \u3092\u76ee\u7684\u5909\u6570\u3068\u3057\u3066\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 train.head() test.head()","title":"\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c"},{"location":"kaggle/#_2","text":"\u307e\u305a\u3001\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u4e57\u5ba2\u8005\u540d\u7c3f\u306e\u5c5e\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 PassengerId : \u4e57\u5ba2\u8b58\u5225\u30e6\u30cb\u30fc\u30afID Survived : \u751f\u5b58\u30d5\u30e9\u30b0\uff080=\u6b7b\u4ea1\u30011=\u751f\u5b58\uff09 Pclass : \u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9 1 \u4e0a\u5c64\u30af\u30e9\u30b9\uff08\u304a\u91d1\u6301\u3061\uff09 2 \u4e2d\u7d1a\u30af\u30e9\u30b9\uff08\u4e00\u822c\u968e\u7d1a\uff09 3 \u4e0b\u5c64\u30af\u30e9\u30b9\uff08\u52b4\u50cd\u968e\u7d1a\uff09 Name : \u4e57\u5ba2\u306e\u540d\u524d Sex : \u6027\u5225\uff08male=\u7537\u6027\u3001female\uff1d\u5973\u6027\uff09 Age : \u5e74\u9f62 SibSp : \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306b\u540c\u4e57\u3057\u3066\u3044\u308b\u5144\u5f1f/\u914d\u5076\u8005\u306e\u6570 parch : \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u306b\u540c\u4e57\u3057\u3066\u3044\u308b\u89aa/\u5b50\u4f9b\u306e\u6570 ticket : \u30c1\u30b1\u30c3\u30c8\u756a\u53f7 fare : \u6599\u91d1 cabin : \u5ba2\u5ba4\u756a\u53f7 Embarked : \u51fa\u6e2f\u5730 C = Cherbourg Q = Queenstown S = Southampton","title":"\u30c7\u30fc\u30bf\u306e\u628a\u63e1"},{"location":"kaggle/#_3","text":"\u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u306f\u3001\u4eca\u307e\u3067\u7fd2\u3063\u3066\u304d\u305f\u901a\u308a\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3000\u30c7\u30fc\u30bf\u5206\u6790\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u6e96\u5099\u3059\u308b \u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(\u30e2\u30c7\u30eb\uff09\u3092\u9078\u3076 \u8aac\u660e\u5909\u6570\u3092\u9078\u3076 \u5b66\u7fd2\uff06\u8a55\u4fa1\u3059\u308b \u3053\u308c\u4ee5\u5916\u306b\u3082\u69d8\u3005\u306a\u5de5\u592b\u304c\u3042\u308a\u307e\u3059\u3002 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c\u306f\u3001Kaggle\u306e\u5165\u9580\u984c\u6750\u3068\u3057\u3066\u8272\u3005\u306a\u89e3\u8aac\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u308c\u3089\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u3001\u305c\u3072\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u4f5c\u6210"},{"location":"kaggle/#_4","text":"\u3055\u3066\u3001\u7121\u4e8b\u306b\u4e88\u6e2c\u30e2\u30c7\u30eb\u304c\u958b\u767a\u3067\u304d\u305f\u3068\u3057\u3066\u3001\u30b3\u30f3\u30da\u3078\u306e\u63d0\u51fa\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002 \u30b3\u30f3\u30da\u306e\u30da\u30fc\u30b8 \u306e\u300cSubmit Predictions\u300d\u3092\u958b\u3044\u3066\u3001 \u305d\u3053\u306e\u6307\u793a\u306b\u3057\u305f\u304c\u3063\u3066\u63d0\u51fa\u3057\u307e\u3059\u3002 \u63d0\u51fa\u65b9\u6cd5\u306f\u3001\u30b3\u30f3\u30da\u3054\u3068\u306b\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u8a73\u7d30\u306f\u8aac\u660e\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002 \u3053\u3053\u306f\u3001 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c(Kaggle) \u306e\u5834\u5408\u3092\u8aac\u660e\u3057\u307e\u3059\u3002 \u307e\u305a\u3001\u5b66\u7fd2\u3057\u305f\u4e88\u6e2c\u30e2\u30c7\u30eb( model )\u304b\u3089\u3001 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u3092\u884c\u3044\u307e\u3059\u3002 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c X_test = pd . read_csv ( 'test.csv' ) y_pred = model . predict ( X_test ) \u63d0\u51fa\u306f\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u6307\u5b9a\u3055\u308c\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 \u3053\u3053\u3067\u5fc5\u8981\u306b\u306a\u308b\u306e\u306f\u3001 PassengerId \u3068\u4e88\u6e2c\u3055\u308c\u305f Survived \u306e\u3075\u305f\u3064\u306e\u30ab\u30e9\u30e0\u304b\u3089\u306a\u308b\u8868\u30c7\u30fc\u30bf\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u3001 result.csv \u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002 import numpy as np df = pd . DataFrame ({ 'PassengerId' : test [ 'PassengerId' ], 'Survived' : y_pred }) df . to_csv ( \"result.csv\" , index = False ) \u3053\u308c\u3067\u3001 result.csv \u304c\u3067\u304d\u307e\u3057\u305f\u3002 \u4e00\u5fdc\u3001 result.csv \u306e\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3092\u78ba\u8a8d\u3057\u3066\u3001\u6b63\u3057\u304f\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u304b\u307f\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u6700\u521d\u306e10\u884c\u3092\u8868\u793a\u3057\u3066\u307f\u308b !head result.csv PassengerId,Survived 892,0 893,1 894,0 895,0 896,1 897,0 898,1 899,0 900,1 \u4e88\u6e2c\u5024\u306a\u306e\u3067.. Survived \u306e\u30ab\u30e9\u30e0\u306e\u5024\u306f\u3001\u4f5c\u6210\u3057\u305f\u4e88\u6e2c\u30e2\u30c7\u30eb\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u3042\u3068\u306f\u3001Colab\u304b\u3089 result.csv \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001Kaggle\u306b\u63d0\u51fa\u3057\u307e\u3059\u3002 \u3057\u3070\u3057\u5f85\u3064\u3068\u3001\u30b9\u30b3\u30a2\uff08\u6b63\u89e3\u7387\uff09\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 Let's try \u81ea\u5206\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u3001\u50d5\u306e\u30b9\u30b3\u30a2\uff08\u6b63\u89e3\u7387\uff09 0.77990 \u3092\u8d85\u3048\u3066\u307f\u3088\u3046\u3002","title":"\u30b3\u30f3\u30da\u3078\u306e\u63d0\u51fa\u65b9\u6cd5"},{"location":"kaggle/#_5","text":"Kaggle \u306b\u30e6\u30fc\u30b6\u767b\u9332\u3092\u3057\u3066\u3001 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c(Kaggle) \u306e\u30b3\u30f3\u30da\u306b\u6311\u6226\u3057\u3066\u307f\u3088\u3046\u3002 \u305f\u3060\u3057\u3001\u30b3\u30f3\u30da\u81ea\u4f53\u306f\u7d42\u4e86\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u7df4\u7fd2\u7528\u306e\u904e\u53bb\u3082\u30b3\u30f3\u30da\u3068\u306a\u308a\u307e\u3059\u3002 Submit\u3057\u305f\u5f8c\u306e\u6b63\u89e3\u30b9\u30b3\u30a2\u3092\u5831\u544a\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u7df4\u7fd2"},{"location":"kaggle/#_6","text":"\u3061\u3087\u3063\u3068\u5c11\u3057\u30e2\u30c7\u30eb\u4f5c\u308a\u306b\u95a2\u3059\u308b\u30d2\u30f3\u30c8\u3092\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\u3002","title":"\u521d\u5fc3\u8005\u5411\u3051\u306e\u30d2\u30f3\u30c8"},{"location":"kaggle/#_7","text":"\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u5206\u6790\u3067\u306f\u3001100%\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u63c3\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\u3002 \u3069\u3053\u304b\u306e\u5c5e\u6027\u304c\u4e00\u90e8\u6b20\u3051\u3066\u3044\u305f\u308a\u3001\u4fe1\u7528\u6027\u304c\u4f4e\u304f\u3066\u4f7f\u3048\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u4e57\u5ba2\u540d\u7c3f\u306f\u3001\u4f55\u304b\u5acc\u304c\u3089\u305b\u304b\u3068\u601d\u3046\u307b\u3069\u3001\u30c7\u30fc\u30bf\u304c\u6b20\u640d\u3057\u3066\u3044\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024 train.isnull().sum() test.isnull().sum() Note \u30dd\u30a4\u30f3\u30c8\uff1a \u3053\u306e\u6b20\u640d\u3057\u305f\u5024\u3092\u3069\u3046\u89e3\u91c8\u3057\u3001\u4e88\u6e2c\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u306b\u751f\u304b\u3057\u3066\u3044\u304f\u306e\u304b\uff1f \u5b9f\u306f\u3001\u6570\u591a\u304f\u3042\u308bKaggle\u306e\u30b3\u30f3\u30da\u306e\u4e2d\u304b\u3089\u300c\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u4e88\u6e2c\u300d\u3092\u9078\u3093\u3060\u306e\u306f\u3001 \u8272\u3005\u306a\u4eba\u304c\u89e3\u8aac\u3092\u304b\u3044\u3066\u3044\u3066\u53c2\u8003\u306b\u3059\u308b\u60c5\u5831\u304cWeb\u306b\u591a\u304f\u5b58\u5728\u3059\u308b\u304b\u3089\u3067\u3059\u3002 \u305d\u308c\u3089\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u3001\u3088\u3044\u65b9\u6cd5\uff08\u4eee\u8aac\uff09\u3092\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u6b20\u640d\u5024\u3092\u51e6\u7406\u3059\u308b"},{"location":"kaggle/#_8","text":"\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306f\u3001\u6570\u5024\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3001\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u6027\u5225\u306f\u6b21\u306e\u3088\u3046\u306b0, 1\u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3059\u3002 train[\"Sex\"] = train[\"Sex\"].map({\"male\": 0, \"female\": 1}) test[\"Sex\"] = test[\"Sex\"].map({\"male\": 0, \"female\": 1}) \u8aac\u660e\u5909\u6570\u3001\u76ee\u7684\u5909\u6570\u3092\u9078\u3073\u307e\u3059\u3002 X_train = train[[\"Pclass\", \"Sex\", \"Fare\"]] y_train = train[\"Survived\"] X_test = test[[\"Pclass\", \"Sex\", \"Fare\"]]","title":"\u8aac\u660e\u5909\u6570"},{"location":"kaggle/#_9","text":"\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9078\u3073\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\uff12\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u306a\u306e\u3067\u3001 \u5206\u985e\u5668(Classifier) \u306e\u4e2d\u304b\u3089\u9078\u3073\u307e\u3059\u3002 \u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u30c7\u30fc\u30bf\u306e\u6b63\u5ba4\u306b\u5bfe\u3057\u3066\u3001\u5f97\u610f/\u4e0d\u5f97\u610f\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u6700\u521d\u306e\u3046\u3061\u306f\u5168\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u8272\u3005\u8a66\u3057\u3066\u307f\u305f\u65b9\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002 \u3053\u3053\u3067\u306f\u3001\u6c7a\u5b9a\u6728\u3092\u8868\u793a\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3001 DecisionTreeClassifier \u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002 from sklearn.tree import DecisionTreeClassifier,plot_tree model = DecisionTreeClassifier(max_depth=3) model.fit(X_train, y_train) Warning \u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u6b20\u640d\u5024\u304c\u3042\u308b\u3068\uff1a ValueError: Input contains NaN, infinity or a value too large \u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3067\u3057\u3063\u304b\u308a\u3068\u3001\u53d6\u308a\u9664\u304d\u307e\u3057\u3087\u3046\u3002 \u3055\u3066\u3001\u6c7a\u5b9a\u6728\u306e\u3044\u3044\u3068\u3053\u308d\u306f\u3001\u3069\u3046\u3044\u3046\u904e\u7a0b\u3067\u5206\u985e\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u898b\u3048\u308b\u5316\u3057\u3084\u3059\u3044\u3068\u3053\u308d\u3067\u3059\u3002 plt.figure(figsize=(15,10)) plot_tree(model,feature_names=X_train.columns,filled=True, rounded=True, proportion=True) plt.show() \u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u3001\u6b63\u89e3\u7387\u3092\u8a08\u7b97\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u6b63\u89e3\u304c\u306a\u3044\u306e\u3067\u8a08\u7b97\u3067\u304d\u307e\u305b\u3093\u3002\uff09 model.score(X_train, y_train) \u826f\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\uff08maxdepth\u3092\u6df1\u304f\u3059\u308b\u3068\u3001\u3082\u3063\u3068\u7cbe\u5ea6\u306f\u9ad8\u304f\u306a\u308a\u307e\u3059\u3002\uff09","title":"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9078\u3076"},{"location":"kaggle/#_10","text":"\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089\u4e88\u6e2c\u5024\u3092\u6c42\u3081\u3066\u3001\u63d0\u51fa\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002 # Fare \u306e\u524d\u51e6\u7406\u3092\u5fd8\u308c\u306a\u3044\u3067 # X_test[\"Fare\"].fillna(X_test[\"Fare\"].mean(), inplace=True) y_pred = model.predict(X_test) Warning \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u6b20\u640d\u5024\u304c\u3042\u308b\u3068\uff1a ValueError: Input contains NaN, infinity or a value too large \u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3067\u3057\u3063\u304b\u308a\u3068\u3001\u53d6\u308a\u9664\u304d\u307e\u3057\u3087\u3046\u3002 Pandas\u3092\u4f7f\u3063\u3066\u8868\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3057\u3001CSV\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 data = pd.DataFrame({'PassengerId': test['PassengerId'], 'Survived': y_pred}) data.head() data.to_csv(\"result.csv\", index=False) !head result.csv Warning \u4e88\u6e2c\u7d50\u679c\u306a\u306e\u3067.. Survived \u306e\u30ab\u30e9\u30e0\u306e\u5024\u306f\u3001\u4f5c\u6210\u3057\u305f\u4e88\u6e2c\u30e2\u30c7\u30eb\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002 \u4e00\u81f4\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u6307\u5b9a\u3055\u308c\u305fCSV\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u305f\u3089\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u63d0\u51fa\u3057\u307e\u3059\u3002 \u3057\u3070\u3057\u5f85\u3064\u3068\u3001\u30b9\u30b3\u30a2\uff08\u6b63\u89e3\u7387\uff09\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002","title":"\u63d0\u51fa\u30c7\u30fc\u30bf\u306e\u4f5c\u6210"},{"location":"kaggle/#_11","text":"","title":"\u904e\u5b66\u7fd2\u3092\u9632\u3050\u306b\u306f"},{"location":"kaggle/#_12","text":"\u6b21\u56de\u304b\u3089Pandas \u3092\u7528\u3044\u3066\u3001\u3088\u308a\u672c\u683c\u7684\u306a\u30c7\u30fc\u30bf\u5206\u6790\u3092\u59cb\u3081\u307e\u3059\u3002","title":"\u30c7\u30fc\u30bf\u5206\u6790\u306e\u6e96\u5099"},{"location":"kaggle/#_13","text":"\u4e16\u306e\u4e2d\u306e\u30c7\u30fc\u30bf\u306f\u3001\u30c7\u30fc\u30bf\u5024\u304c\u6b20\u3051\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u4eca\u56de\u306e\u7df4\u7fd2\u30c7\u30fc\u30bf\u3067\u306f\u3001 NaN \u3068\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u5024\u304c\u3001\u6b20\u640d\u5024\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u4ef6\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u306f\u3001\u76ee\u8996\u3067\u307f\u3064\u304b\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u304c\u3001 \u30c7\u30fc\u30bf\u4ef6\u6570\u304c\u591a\u304f\u306a\u308b\u3068\u3001\u624b\u4f5c\u696d\u3067\u63a2\u3059\u306e\u306f\u7121\u7406\u3067\u3059\u3002 \u6b20\u640d\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 data.isnull().sum() \u6b20\u640d\u5024\u304c\u898b\u3064\u304b\u3063\u305f\u3068\u304d\u306f\u3001 \u6b20\u640d\u5024\u3092\u51e6\u7406\u3059\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u3068\u3057\u3066\u306f\uff1a dropna() \uff1a\u30c7\u30fc\u30bf\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u884c\u3084\u5217\u3092\u524a\u9664\u3059\u308b fillna() \uff1a\u30c7\u30fc\u30bf\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u8981\u7d20\u3092\u5225\u306e\u5024\u3067\u7a74\u57cb\u3081\u3059\u308b \u3069\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u304b\u306f\u3001\u30c7\u30fc\u30bf\u5206\u6790\u306e\u76ee\u7684\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002 \u4eca\u56de\u306f\u3001\u30e1\u30f3\u30d0\u30fc\u3092\u6d88\u3057\u3066\u3057\u307e\u3063\u305f\u3089\u3001\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u3001 __\u6b20\u640d\u5024\u306e\u5024\u3092\u5e73\u5747\u5024\u3067\u88dc\u5b8c\u3059\u308b__\u3053\u3068\u3067\u5bfe\u5fdc\u3057\u3066\u307f\u307e\u3059\u3002 data.fillna(data.mean(), inplace=True) data Note \u6b20\u640d\u5024\u306e\u88dc\u5b8c \u30c7\u30fc\u30bf\u5206\u6790\u3067\u306f\u3001\u6b20\u640d\u5024\u306f\u4f55\u304b\u306e\u5acc\u304c\u3089\u305b\u304b\u3068\u601d\u3046\u307b\u3069\u3001\u983b\u7e41\u306b\u751f\u3058\u307e\u3059\u3002 \u8272\u3005\u306a\u88dc\u5b8c\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u9069\u5207\u306a\u65b9\u6cd5\u3092\u9078\u3093\u3067\u304f\u3060\u3055\u3044\u3002 data['\u4f53\u91cd'].fillna(50.0) # \u4f53\u91cd\u306e\u6b20\u640d\u5024\u309250.0\u3067\u7a74\u57cb\u3081 data['\u4f53\u91cd'].fillna(data['\u4f53\u91cd'].mean()) # \u4f53\u91cd\u306e\u6b20\u640d\u5024\u3092\u4f53\u91cd\u306e\u5e73\u5747\u5024\u3067\u7a74\u57cb\u3081 data['\u4f53\u91cd'].fillna(data['\u4f53\u91cd'].median()) # \u4f53\u91cd\u306e\u6b20\u640d\u5024\u3092\u4f53\u91cd\u306e\u4e2d\u592e\u5024\u3067\u7a74\u57cb\u3081 data['\u4f53\u91cd'].fillna(data['\u4f53\u91cd'].mode()) # \u4f53\u91cd\u306e\u6b20\u640d\u5024\u3092\u4f53\u91cd\u306e\u6700\u983b\u5024\u3067\u7a74\u57cb\u3081","title":"\u6b20\u640d\u5024\u306e\u30c1\u30a7\u30c3\u30af"},{"location":"kaggle/#_14","text":"\u3069\u3061\u3089\u304b\u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3057\u3066\u3001\u30b3\u30f3\u30da\u306b\u53c2\u52a0\u3057\u3066\u307f\u3088\u3046\u3002 **\u6f14\u7fd2\uff08Kaggle\uff09** Kaggle \u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3057\u3001 \u300c\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u751f\u5b58\u8005\u300d\u306e\u30b3\u30f3\u30da\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u3066\u307f\u3088\u3046\u3002","title":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af"},{"location":"kmean/","text":"\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u307f\u3088\u3046 # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\uff08clustering\uff09\u3068\u306f\u3001\u30c7\u30fc\u30bf\u9593\u306e\u985e\u4f3c\u5ea6\u306b\u3082\u3068\u3065\u3044\u3066\u3001\u30c7\u30fc\u30bf\u3092\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u5206\u6790\u306e\u306f\u3058\u3081\u306b\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u628a\u63e1\u3059\u308b\u305f\u3081\u306b\u6d3b\u7528\u3055\u308c\u307e\u3059\u3002 \u307e\u305f\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u3082 \u6559\u5e2b\u306a\u3057\u5b66\u7fd2 \u3068\u3057\u3066\u91cd\u8981\u3067\u3059\u3002 \u4eca\u56de\u306f\u3001\u4ee3\u8868\u7684\u306a\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30cf\u30f3\u30ba\u30aa\u30f3\u6f14\u7fd2\u3057\u306a\u304c\u3089\u3001 \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3046\u6280\u6cd5\u3092\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6e96\u5099 import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns try: import japanize_matplotlib #\u65e5\u672c\u8a9e\u5316 matplotlib except ModuleNotFoundError: !pip install japanize_matplotlib import japanize_matplotlib sns.set(font=\"IPAexGothic\") #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0 # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3068\u306f\u3001\u30c7\u30fc\u30bf\u9593\u306e\u985e\u4f3c\u5ea6\u306b\u3082\u3068\u3065\u3044\u3066\u3001\u30c7\u30fc\u30bf\u3092\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306b\u3088\u3063\u3066\u3067\u304d\u305f\u3001\u4f3c\u305f\u3082\u306e\u540c\u58eb\u304c\u96c6\u307e\u3063\u305f\u30b0\u30eb\u30fc\u30d7\u306e\u3053\u3068\u3092\u30af\u30e9\u30b9\u30bf\u3068\u547c\u3073\u307e\u3059\u3002 \u6d3b\u7528\u4f8b \u9867\u5ba2\u306e\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3 \u5b66\u751f\u3092\u30b0\u30eb\u30fc\u30d7\u5206\u3051 \u30c6\u30ad\u30b9\u30c8\u30de\u30a4\u30cb\u30f3\u30b0 \u753b\u50cf\u306e\u5206\u985e \u300c\u30c7\u30fc\u30bf\u9593\u306e\u985e\u4f3c\u5ea6\u306b\u3082\u3068\u3065\u3044\u3066\u30c7\u30fc\u30bf\u3092\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b\u300d\u3068\u3044\u3046\u7279\u5fb4\u306e\u6d3b\u304b\u3057\u65b9\u6b21\u7b2c\u3067\u3001\u3055\u307e\u3056\u307e\u306a\u554f\u984c\u306b\u5fdc\u7528\u3067\u304d\u307e\u3059\u3002 K-means\u6cd5 (K-\u5e73\u5747\u6cd5) # K-means\u6cd5 \u306f\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u6700\u3082\u5e83\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u624b\u6cd5\u3067\u3059\u3002 \u975e\u968e\u5c64\u578b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u3067\u3042\u308a\u3001\u30af\u30e9\u30b9\u30bf\u306e\u5e73\u5747\u3092\u7528\u3044\u3001\u4e0e\u3048\u3089\u308c\u305f\u30af\u30e9\u30b9\u30bf\u6570 k \u500b\u306b\u5206\u985e\u3057\u307e\u3059\u3002 \u539f\u7406\uff1ak-means\u6cd5\u306f\u3001 n \u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092 k \u500b\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5206\u5272\u3059\u308b\u3002 \u30e9\u30f3\u30c0\u30e0\u306b k \u500b\u30af\u30e9\u30b9\u30bf\u306e\u91cd\u5fc3\u70b9\uff08 n \u6b21\u5143\u30d9\u30af\u30c8\u30eb\uff09 V_{1},\\dotsc ,V_{k} \u3092\u304a\u304f \u5404\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3001\u30af\u30e9\u30b9\u30bf\u3068\u6700\u3082\u8fd1\u3044\u3082\u306e\u3092\u30af\u30e9\u30b9\u30bf\u6240\u5c5e\u3068\u3059\u308b\u3002 \u5168\u3066\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u30af\u30e9\u30b9\u30bf\u756a\u53f7\u304c\u6c7a\u307e\u3063\u305f\u306e\u3061\u3001\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u30bf\u306e\u91cd\u5fc3\uff08\u5e73\u5747\uff09\u3092\u8a08\u7b97\u3057\u3001\u65b0\u3057\u3044\u30af\u30e9\u30b9\u30bf\u306e\u91cd\u5fc3\u70b9\u3068\u3068\u3059\u308b\u3002 \u91cd\u5fc3\u79fb\u52d5\u8ddd\u96e2\u304c\u5341\u5206\u306b\u5c0f\u3055\u304f\u306a\u308b\u307e\u3067\u30012 \u3068 3 \u3092\u7e70\u308a\u8fd4\u3059\u3002 {\\displaystyle \\operatorname {arg\\,min} _{V_{1},\\dotsc ,V_{k}}\\sum _{i=1}^{n}\\min _{j}\\left\\|x_{i}-V_{j}\\right\\|^{2}} \u7d50\u679c\u306f\u3001\u6700\u521d\u306e\u30af\u30e9\u30b9\u30bf\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5272\u308a\u632f\u308a\u306b\u5927\u304d\u304f\u4f9d\u5b58\u3057\u307e\u3059\u3002\u4f55\u5ea6\u304b\u7e70\u308a\u8fd4\u3057\u3066\u884c\u3063\u3066\u6700\u826f\u306e\u7d50\u679c\u3092\u9078\u629e\u3059\u308b\u624b\u6cd5\u3084\u3001 k-means++\u6cd5 \u306e\u3088\u3046\u306b\u6700\u521d\u306e\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u70b9\u306e\u632f\u308a\u65b9\u3092\u5de5\u592b\u3059\u308b\u624b\u6cd5\u306a\u3069\u304c\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 sklearn \u3067\u306f\u3001KMeans \u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u5229\u7528\u3067\u304d\u307e\u3059\u3002 ``` title=\"\"thon from sklearn.cluster import KMeans model = KMeans(n_clusters=3) ### \u4e3b\u6210\u5206\u5206\u6790(PCA) **\u4e3b\u6210\u5206\u5206\u6790\uff08principal component analysis; PCA\uff09** \u306f\u3001\u76f8\u95a2\u306e\u3042\u308b\u591a\u6570\u306e\u5909\u6570\u304b\u3089\u76f8\u95a2\u306e\u306a\u3044\u5c11\u6570\u3067\u5168\u4f53\u306e\u3070\u3089\u3064\u304d\u3092\u6700\u3082\u3088\u304f\u8868\u3059\u4e3b\u6210\u5206\u3068\u547c\u3070\u308c\u308b\u5909\u6570\u3092\u5408\u6210\u3059\u308b\u591a\u5909\u91cf\u89e3\u6790\u306e\u4e00\u624b\u6cd5\u3067\u3059\u3002 \u539f\u7406\uff1a\u4e3b\u6210\u5206\u3092\u4e0e\u3048\u308b\u5909\u63db\u306f\u3001\u7b2c\u4e00\u4e3b\u6210\u5206\u306e\u5206\u6563\u3092\u6700\u5927\u5316\u3057\u3001\u89b3\u6e2c\u5024\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u8aac\u660e\u80fd\u529b\u3092\u53ef\u80fd\u306a\u9650\u308a\u4e3b\u6210\u5206\u306b\u6301\u305f\u305b\u307e\u3059\u3002\u7d9a\u304f\u4e3b\u6210\u5206\u306f\u305d\u308c\u307e\u3067\u306b\u6c7a\u5b9a\u3057\u305f\u4e3b\u6210\u5206\u3068\u76f4\u4ea4\u3059\u308b\u3068\u3044\u3046\u62d8\u675f\u6761\u4ef6\u306e\u4e0b\u3067\u5206\u6563\u3092\u6700\u5927\u5316\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u9078\u3073\u307e\u3059\u3002 <img src=\"https://upload.wikimedia.org/wikipedia/commons/f/f5/GaussianScatterPCA.svg\" width=\"50%\" align=\"center\" /> \u7528\u9014\uff1a\u4e3b\u6210\u5206\u5206\u6790\u306f\u3001**\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u3092\u524a\u6e1b\u3059\u308b**\u3068\u304d\u306e\u5b9a\u756a\u7684\u624b\u6cd5\u3067\u3059\u3002\u7279\u306b\u3001\u6b21\u5143\u6570\u306e\u591a\u3044\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u304d\u3001\u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u3063\u3066\u3088\u308a\uff12\u6b21\u5143\u3084\uff13\u6b21\u5143\u306b\u96c6\u7d04\u3059\u308b\u3053\u3068\u3067\u53ef\u8996\u5316\u304c\u5bb9\u6613\u306b\u306a\u308a\u307e\u3059\u3002 sklearn \u3067\u306f\u3001PCA\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u5229\u7528\u3067\u304d\u307e\u3059\u3002 ``` title=\"\"thon from sklearn.decomposition import PCA model = PCA(n_components=2) \u8eab\u9577\u3068\u4f53\u91cd\u304b\u3089\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0 # \u3053\u3053\u304b\u3089\u306f\u3001sklearn \u30e2\u30b8\u30e5\u30fc\u30eb\u306e K-means\u6cd5\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3044\u306a\u304c\u3089\u3001 \u5b9f\u969b\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u7528\u610f\u3068\u78ba\u8a8d # \u30c7\u30fc\u30bf\u306f\u3001\u7b2c\uff14\u56de\u76ee\u306e\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u3067\u4f5c\u6210\u3057\u305f\u30b9\u30dd\u30fc\u30c4\u9078\u624b\u306e\u8eab\u9577\u3068\u4f53\u91cd\u3092\u96c6\u8a08\u3057\u305f\u8868\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u307f\u307e\u3059\u3002 \u81ea\u5206\u3067\u96c6\u8a08\u3057\u305f\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u304c\u3001 \u4e00\u5fdc\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3082\u3067\u304d\u307e\u3059\u3002 !wget https://KuramitsuLab.github.io/data/bmi.csv \u307e\u305a\u3001pandas\u3092\u4f7f\u3063\u3066\u8868\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 data = pd.read_csv('bmi.csv') data.head() \u6563\u5e03\u56f3\u3067\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d # \u8eab\u9577\u3068\u4f53\u91cd\u306e\u5206\u5e03\u306e\u69d8\u5b50\u3092\u6563\u5e03\u56f3\u3068\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u8868\u793a\u3057\u3066\u898b\u307e\u3057\u3087\u3046\u3002 \u6563\u5e03\u56f3 \u30c7\u30fc\u30bf\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u8077\u696d\u3068\u3057\u3066\u30af\u30e9\u30b9\u5206\u985e\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001 \u8077\u696d\u3054\u3068\u306b\u8272\u5206\u3051\u3057\u3066\u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002 \u5f8c\u304b\u3089\u3001K-means\u6cd5\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3082\u63cf\u753b\u3057\u307e\u3059\u306e\u3067\u3001\u6bd4\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002 colors = ['blue', 'red', 'green'] ax = None for i, group in enumerate(data.groupby('\u8077\u696d')): ax = group[1].plot(kind='scatter', x='\u8eab\u9577', y='\u4f53\u91cd', alpha=0.3, c=colors[int(i)], ax=ax) \u91cd\u306a\u308a\u5177\u5408\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u307f\u3066\u898b\u307e\u3057\u3087\u3046\u3002 \u8eab\u9577\u306f\u3001\u5168\u3066\u306e\u8272\u304c\u91cd\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u4f53\u91cd\u306f\u3001\u91cd\u306a\u3063\u3066\u3044\u306a\u3044\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002 for i, group in enumerate(data.groupby('\u8077\u696d')): group[1]['\u8eab\u9577'].plot(kind='hist', alpha=0.5, bins=20, title='\u8eab\u9577') for i, group in enumerate(data.groupby('\u8077\u696d')): group[1]['\u4f53\u91cd'].plot(kind='hist', alpha=0.5, bins=20, title='\u4f53\u91cd') \uff13\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u985e # K-means \u6cd5\u306f\u3001\u5148\u306b\u30af\u30e9\u30b9\u30bf\u30fc\u6570\uff08\u30b0\u30eb\u30fc\u30d7\u6570\uff09\u3092\u6307\u5b9a\u3057\u3066\u3001\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3092\u3057\u307e\u3059\u3002 \u30af\u30e9\u30b9\u30bf\u6570: \uff13\u7a2e\u985e\u306e\u8077\u696d\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3001\uff13\u30b0\u30eb\u30fc\u30d7 \u521d\u671f\u72b6\u614b: random \uff08\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3001K-means++\u6cd5\u306b\u306a\u308b\uff09 \u307e\u305a\u3001\u521d\u671f\u5024\u3092\u4e0e\u3048\u3066\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\u3002 from sklearn.cluster import KMeans model = KMeans(init='random', n_clusters=3) model \u4eca\u56de\u306f\u3001\u8868\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001 \u8eab\u9577 \u3068 \u4f53\u91cd \u306e\uff12\u5c5e\u6027\u3001\u3064\u307e\u308a\uff12\u6b21\u5143\u30c7\u30fc\u30bf\u3092\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002 \u5b9f\u969b\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u3001\u30c7\u30fc\u30bf\u3092\u30d5\u30a3\u30c3\u30c8(fit)\u3055\u305b\u308b\u3053\u3068\u3067\u3001\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002 model.fit(data[['\u8eab\u9577', '\u4f53\u91cd']]) \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u304c\u6e08\u3093\u3060\u3089\u3001\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u60f3\u306e\u5f62\u3067\u3001\u30af\u30e9\u30b9\u30bf\u756a\u53f7\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30af\u30e9\u30b9\u30bf\u756a\u53f7\u306f\u30010\u304b\u3089 k-1 \u306e\u756a\u53f7\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002 model.predict([(170, 80)]) \u8868\u30c7\u30fc\u30bf\u306b\u5404\u8eab\u9577\u3068\u4f53\u91cd\u304b\u3089\u5206\u985e\u3055\u308c\u308b\u30af\u30e9\u30b9\u30bf\u3092\u5c5e\u6027\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 data['\u30af\u30e9\u30b9\u30bf'] = model.predict(data[['\u8eab\u9577', '\u4f53\u91cd']]) data.head() \u30af\u30e9\u30b9\u30bf \u3054\u3068\u306b\u8272\u5206\u3051\u3057\u3066\u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 ax=None plt.figure(figsize=(5,5)) for i, gd in enumerate(data.groupby('\u30af\u30e9\u30b9\u30bf')): ax = gd[1].plot(kind='scatter', x='\u8eab\u9577', y='\u4f53\u91cd', c=colors[i], alpha=0.3, ax=ax) \u5fc5\u305a\u3057\u3082\u8077\u696d\u3054\u3068\u306e\u5206\u5e03\u3068\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u5206\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\uff13\u3064\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u985e\u3055\u308c\u305f\u69d8\u5b50\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002 Warning \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3068\u30af\u30e9\u30b9\u5206\u985e \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u3001\u30af\u30e9\u30b9\u5206\u985e\u304c\u76ee\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u8077\u696d\u7b49\u306e\u30af\u30e9\u30b9\u5206\u985e\u3068\u7570\u306a\u3063\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\u6563\u5e03\u56f3\u3092\u307f\u308b\u3068\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u5883\u754c\u306b\u66d6\u6627\u306a\u3068\u3053\u308d\u304c\u306a\u304f\u3001\u7dba\u9e97\u306b\u5206\u985e\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002 \u30a8\u30eb\u30dc\u30fc\u6cd5: \u9069\u5207\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u8abf\u3079\u308b # \u30a8\u30eb\u30dc\u30fc\u6cd5\u306f\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u91cd\u5fc3\u70b9\u3068\u6240\u5c5e\u30c7\u30fc\u30bf\u70b9\u306e\u8ddd\u96e2\u306e\u7dcf\u548c\u306b\u7740\u76ee\u3057\u3066\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u4e8b\u524d\u306b\u898b\u7a4d\u3082\u308b\u624b\u6cd5\u3067\u3059\u3002 \u8ddd\u96e2\u306e\u7dcf\u548c\u306e\u6c42\u3081\u65b9 print(model.inertia_) \u30af\u30e9\u30b9\u30bf\u6570\u30921\u304b\u308910\u307e\u3067\u5927\u304d\u304f\u3057\u306a\u304c\u3089\u3001\u7dcf\u548c\u306e\u5909\u5316\u3092\u30b0\u30e9\u30d5\u5316\u3057\u3066\u307f\u307e\u3059\u3002 dist = [] for i in range(1, 11): km = KMeans(init='random', n_clusters=i) km.fit(data[['\u8eab\u9577', '\u4f53\u91cd']]) dist.append(km.inertia_) plt.xlabel('\u30af\u30e9\u30b9\u30bf\u6570') plt.ylabel('\u8ddd\u96e2\u306e\u7dcf\u548c') plt.plot(range(1, 11), dist, marker='+') \u30af\u30e9\u30b9\u30bf\u30fc\u6570\u304c\u9069\u5207\u306b\u306a\u308b\u307e\u3067\u306f\u3001\u7dcf\u548c\u306f\u76f8\u5fdc\u306b\u6e1b\u5c11\u3059\u308b\u3053\u3068\u304c\u671f\u5f85\u3067\u304d\u307e\u3059\u3002 \u4e00\u65b9\u3001\u3044\u3063\u305f\u3093\u9069\u5207\u306a\u6570\u3092\u8d85\u3048\u3066\u3057\u307e\u3046\u3068\u3001\u7dcf\u548c\u306e\u6e1b\u5c11\u306f\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306f2 \u304b 3\u306e\u8fba\u308a\u304c\u9069\u5207\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3068\u3044\u3048\u307e\u3059\u3002 Note \u30a8\u30eb\u30dc\u30fc\u6cd5\u306e\u7531\u6765 \u9069\u5207\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u304c\u30a8\u30eb\u30dc\u30fc\uff08\u8098\uff09\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u3068\u3053\u308d\u304b\u3089 \u30af\u30e9\u30b9\u30bf\u30fc\u6570\uff12\u306e\u6563\u5e03\u56f3\u3092\u8abf\u3079\u3066\u307f\u3088\u3046 model = KMeans(init='random', n_clusters=2) model.fit(data[['\u8eab\u9577', '\u4f53\u91cd']]) data['\u30af\u30e9\u30b9\u30bf\u30fc'] = model.predict(data[['\u8eab\u9577', '\u4f53\u91cd']]) ax=None plt.figure(figsize=(5,5)) for i, gd in enumerate(data.groupby('\u30af\u30e9\u30b9\u30bf\u30fc')): ax = gd[1].plot(kind='scatter', x='\u8eab\u9577', y='\u4f53\u91cd', c=colors[i], alpha=0.3, ax=ax) \u4e73\u304c\u3093\u30c7\u30fc\u30bf\u3068\u4e3b\u6210\u5206\u5206\u6790 # \u4e73\u304c\u3093\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001Breast Cancer Wisconsin (Diagnostic) Data Set\u306b\u7531\u6765\u3057\u3001 \u4e73\u817a\u816b\u7624\u306e\u7a7f\u523a\u5438\u5f15\u7d30\u80de\u8a3a\u306e\u30c7\u30b8\u30bf\u30eb\u753b\u50cf\u304b\u3089\u8a08\u7b97\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 1993 W.N. Street, W.H. Wolberg and O.L. Mangasarian Nuclear feature extraction for breast tumor diagnosis IS&T/SPIE 1993 International Symposium on Electronic Imaging: Science and Technology, volume 1905, pages 861-870, San Jose, CA, 1993. (abstract) Figure2 \u56f3\u4e2d\u4e00\u90e8\u3092\u5f15\u7528 \u4e73\u304c\u3093\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u4e3b\u6210\u5206\u5206\u6790\u3082\u8a66\u3057\u3066\u3044\u304d\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u7528\u610f !wget https://KuramitsuLab.github.io/data/cancer_ja.csv \u30aa\u30ea\u30b8\u30ca\u30eb\u30c7\u30fc\u30bf\u3092\u65e5\u672c\u8a9e\u5316\u3057\u305f\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002 \u826f\u6027\u306f 1 \u3001\u60aa\u6027\u306f 0 \u306e\u30d5\u30e9\u30b0\u304c\u3064\u3044\u3066\u3044\u307e\u3059\u3002 import pandas as pd data = pd.read_csv('cancer_ja.csv') data.head() \u30c7\u30fc\u30bf\u306e\u7406\u89e3 # \u30c7\u30fc\u30bf\u306e\u7d71\u8a08\u91cf\u3092\u8abf\u3079\u305f\u308a\u3001\u53ef\u8996\u5316\u3057\u3066\u3001\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u6349\u3048\u307e\u3057\u3087\u3046\u3002 Warning Let's try \u826f\u6027\u304c\u3093\u3068\u60aa\u6027\u304c\u3093\u306e\u5206\u5e03\u306b\u6cd5\u5247\u6027\u304c\u3042\u308b\u304b\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046 \u826f\u6027\u304b\u60aa\u6027\u304b\u3067\u8272\u5206\u3051\u3057\u3066\u3001\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\u5c5e\u6027\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u81ea\u7531\u306b\u5909\u3048\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 colors = ['red', 'green'] plt.figure(figsize=(5,5)) ax=None for i, gd in enumerate(data.groupby('\u826f\u6027')): ax = gd[1].plot(kind='scatter', x='\u5e73\u5747\u534a\u5f84', y='\u5e73\u5747\u5bc6\u96c6\u5ea6', c=colors[i], alpha=0.3, ax=ax) \u4e09\u6b21\u5143\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Axes3D \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u7528\u3044\u307e\u3059\u3002 from mpl_toolkits.mplot3d import Axes3D fig = plt.figure(figsize=(8,8)) ax = Axes3D(fig) ax.set_xlabel(\"\u5e73\u5747\u534a\u5f84\") ax.set_ylabel(\"\u5e73\u5747\u5bc6\u96c6\u5ea6\") ax.set_zlabel(\"\u5e73\u5747\u51f9\u90e8\") for i, gd in enumerate(data.groupby('\u826f\u6027')): ax.plot(gd[1]['\u5e73\u5747\u534a\u5f84'],gd[1]['\u5e73\u5747\u5bc6\u96c6\u5ea6'],gd[1]['\u5e73\u5747\u51f9\u90e8'],marker=\"o\",linestyle='None',c=colors[i], alpha=0.3) \u6b21\u5143\u524a\u6e1b # \u4e73\u304c\u3093\u30c7\u30fc\u30bf\u306f\u300130\u6b21\u5143\u306e\u5909\u6570\u304b\u3089\u306a\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u6b8b\u3057\u306a\u304c\u3089\u6b21\u5143\u3092\u524a\u6e1b\u3057\u3001\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002 \u3053\u306e\u3068\u304d\u3001\u6d3b\u7528\u3059\u308b\u306e\u304c \u4e3b\u6210\u5206\u5206\u6790(PCA) \u3067\u3059\u3002 \u4e3b\u6210\u5206\u5206\u6790(PCA)\u306b\u3088\u308b2\u6b21\u5143\u3078\u306e\u5727\u7e2e from sklearn.decomposition import PCA data_x = data[data.columns[1:]] pca = PCA(n_components=2) pca.fit(data_x) print('\u56fa\u6709\u30d9\u30af\u30c8\u30eb: ', pca.components_) print('\u5206\u6563:', pca.explained_variance_) print('\u5206\u6563\u5272\u5408:', pca.explained_variance_ratio_) \u4e3b\u6210\u5206\u5206\u6790\u306e\u7d50\u679c \u56fa\u6709\u30d9\u30af\u30c8\u30eb : pca.components_ : \u65b0\u3057\u3044\u7279\u5fb4\u7a7a\u9593\u306e\u8ef8\u306e\u5411\u304d \u5404\u4e3b\u6210\u5206\u306e\u5206\u6563 : pca.explained_variance_ \u5404\u4e3b\u6210\u5206\u306e\u6301\u3064\u5206\u6563\u5272\u5408 : pca.explained_variance_ratio_ : \u7b2c\u4e00\u4e3b\u6210\u5206\u306798%\u306e\u60c5\u5831\u3092\u4fdd\u6301 \u3055\u3066\u3001\u4e3b\u6210\u5206\u5206\u6790\u306e\u7d50\u679c\u3092\u7528\u3044\u3066\u4e73\u304c\u3093\u30c7\u30fc\u30bf\u3092\u5909\u63db\u3057\u307e\u3057\u3087\u3046\u3002 data_pca = pca.transform(data_x) #\u3000\u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u308b\u5909\u63db print('data_std(shape):', data_x.shape) print('data_pca(shape):', data_pca.shape) 30\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u304c2\u6b21\u5143\u306b\u524a\u6e1b\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002 \u306a\u304a\u3001 transform() \u3067\u5f97\u3089\u308c\u308b\u30c7\u30fc\u30bf\u306f\u3001 NumPy\u306e2\u6b21\u5143\u914d\u5217\u306a\u306e\u3067\u3001\u8868\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3057\u3066\u3001 data_pca \u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002 pd.DataFrame(data_pca, columns=['pc1', 'pc2']).head() data_pca = pd.concat([pd.DataFrame(data_pca, columns=['pc1', 'pc2']), data], axis=1) data_pca.head() \u7b2c\u4e00\u4e3b\u6210\u5206(pc1)\u3092x\u8ef8\u3001\u7b2c\u4e8c\u4e3b\u6210\u5206(pc2)\u3092y\u8ef8\u3068\u3057\u3066\u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002 plt.figure(figsize=(5,5)) ax=None for i, gd in enumerate(data_pca.groupby('\u826f\u6027')): ax = gd[1].plot(kind='scatter', x='pc1', y='pc2', c=colors[i], alpha=0.3, ax=ax) \u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff1a\u6a19\u6e96\u5316 # \u4e73\u304c\u3093\u30c7\u30fc\u30bf\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u5c5e\u6027\u304c\u542b\u307e\u308c\u3066\u304a\u308a\u3001\u5358\u4f4d\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u6700\u5927\u5024\u3084\u6700\u5c0f\u5024\u3082\u5927\u304d\u304f\u3070\u3089\u3064\u3044\u3066\u3044\u307e\u3059\u3002 data.describe() \u30c7\u30fc\u30bf\u5206\u6790\u3067\u306f\u3001\u5927\u304d\u306a\u5024\u306e\u5c5e\u6027\u304c\u3042\u308b\u3068\u3001\u5206\u6790\u7d50\u679c\u306f\u5c0f\u3055\u306a\u5024\u306e\u5c5e\u6027\u306e\u5f71\u97ff\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u5f71\u97ff\u3092\u6392\u9664\u3059\u308b\u305f\u3081\u3001\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff08\u6a19\u6e96\u5316\uff09\u306f\u5e38\u5957\u624b\u6bb5\u3067\u3059\u3002 \u6a19\u6e96\u5316 : \u30b5\u30f3\u30d7\u30eb\u5024 x \u304b\u3089\u5e73\u5747 \\bar{x} \u3092\u5f15\u304d\u3001\u6a19\u6e96\u504f\u5dee \\sigma \u3067\u5272\u308b z = \\frac{x - \\bar{x}}{\\sigma} sklearn\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u3001StandardScaler \u30af\u30e9\u30b9\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4f7f\u7528\u6cd5\u306f\u3001PCA\u30af\u30e9\u30b9\u3068\u540c\u3058\u3067\u3001\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3057\u3001\u305d\u306e\u5f8c\u3001\u5909\u63db\u3057\u307e\u3059\u3002 StandardScaler\u306b\u3088\u308b\u6a19\u6e96\u5316 from sklearn.preprocessing import StandardScaler sc = StandardScaler() # print(data.columns) \u30ab\u30e9\u30e0\u540d sc.fit(data[data.columns[1:]]) # \u6a19\u6e96\u5316 data_std = sc.transform(data[data.columns[1:]]) pd.DataFrame(data_std, columns=data.columns[1:]).head() \u6a19\u6e96\u5316\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3001\u4e3b\u6210\u5206\u5206\u6790\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 from sklearn.decomposition import PCA pca = PCA(n_components=2) pca.fit(data_std) data_pca = pca.transform(data_std) print('data_std(shape):', data_std.shape) print('data_pca(shape):', data_pca.shape) data = pd.concat([pd.DataFrame(data_pca, columns=['pc1', 'pc2']), data], axis=1) data.head() plt.figure(figsize=(5,5)) ax=None for i, gd in enumerate(data.groupby('\u826f\u6027')): ax = gd[1].plot(kind='scatter', x='pc1', y='pc2', c=colors[i], alpha=0.3, ax=ax) Let's try \u6a19\u6e96\u5316\u3057\u305f\u4e73\u304c\u3093\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3066\u3001k-means\u6cd5\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u307f\u3088\u3046\u3002 ## \u30b3\u30fc\u30b9\u30ef\u30fc\u30af !!! example **\u4f8b\u984c\uff08\u6210\u7e3e\u8868\uff09** \u57fa\u672c\u60c5\u5831\u51e6\u7406\u3067\u304a\u306a\u3058\u307f\u306e\u6210\u7e3e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u3001\uff13\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u5272\u3057\u3066\u307f\u3088\u3046\u3002 1. \u6210\u7e3e\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b (\u5c5e\u6027\u540d: `\u6210\u7e3eG`) 2. k-means \u6cd5\u3067\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u985e\u3059\u308b (\u5c5e\u6027\u540d: `K\u5e73\u5747G`) 3. \u82f1\u6570\u56fd\u793e\u7406\u3092\u3001\u7406\u7cfb/\u6587\u7cfb\u79d1\u76ee\u306e\uff12\u6b21\u5143\u306b\u6e1b\u3089\u3057\u3001k-means\u6cd5\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b 4. \u4e3b\u6210\u5206\u5206\u6790\u3092\u7528\u3044\u3066\uff12\u6b21\u5143\u306b\u524a\u6e1b\u3057\u305f\u306e\u3061\u3001k-means\u6cd5\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b \u305d\u308c\u305e\u308c\u306e\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u306e\u7d50\u679c\u3092\u6563\u5e03\u56f3\u3067\u30b0\u30e9\u30d5\u5316\u3057\u3001\u7279\u5fb4\u306a\u3069\u6c17\u3065\u3044\u305f\u3053\u3068\u3092\u8b70\u8ad6\u3057\u3066\u307f\u3088\u3046\u3002 __\u30c7\u30fc\u30bf__ \u6b21\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089CSV\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u4f5c\u696d\u3057\u307e\u3057\u3087\u3046\u3002 %%file \u6210\u7e3e.csv \u540d\u524d,\u82f1,\u6570,\u56fd,\u793e,\u7406 \u4f50\u85e4,84,45,77,69,48 \u9234\u6728,75,69,65,77,69 \u9ad8\u6a4b,69,81,45,82,79 \u7530\u4e2d,92,75,83,79,62 \u4f0a\u85e4,62,91,68,61,93 \u6e21\u8fba,54,63,48,52,50 \u5c71\u672c,48,53,71,83,45 \u4e2d\u6751,77,85,62,55,82 \u5c0f\u6797,82,88,89,79,85 \u52a0\u85e4,47,48,57,53,63 \u5409\u7530,75,36,85,73,51 \u5c71\u7530,66,73,79,65,66 \u4f50\u3005\u6728,64,95,48,59,91 \u5c71\u53e3,73,86,52,70,77 \u677e\u672c,55,75,63,67,80","title":"\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u307f\u3088\u3046"},{"location":"kmean/#_1","text":"\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\uff08clustering\uff09\u3068\u306f\u3001\u30c7\u30fc\u30bf\u9593\u306e\u985e\u4f3c\u5ea6\u306b\u3082\u3068\u3065\u3044\u3066\u3001\u30c7\u30fc\u30bf\u3092\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u5206\u6790\u306e\u306f\u3058\u3081\u306b\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u628a\u63e1\u3059\u308b\u305f\u3081\u306b\u6d3b\u7528\u3055\u308c\u307e\u3059\u3002 \u307e\u305f\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u3082 \u6559\u5e2b\u306a\u3057\u5b66\u7fd2 \u3068\u3057\u3066\u91cd\u8981\u3067\u3059\u3002 \u4eca\u56de\u306f\u3001\u4ee3\u8868\u7684\u306a\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30cf\u30f3\u30ba\u30aa\u30f3\u6f14\u7fd2\u3057\u306a\u304c\u3089\u3001 \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3046\u6280\u6cd5\u3092\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6e96\u5099 import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns try: import japanize_matplotlib #\u65e5\u672c\u8a9e\u5316 matplotlib except ModuleNotFoundError: !pip install japanize_matplotlib import japanize_matplotlib sns.set(font=\"IPAexGothic\") #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a","title":"\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u307f\u3088\u3046"},{"location":"kmean/#_2","text":"\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3068\u306f\u3001\u30c7\u30fc\u30bf\u9593\u306e\u985e\u4f3c\u5ea6\u306b\u3082\u3068\u3065\u3044\u3066\u3001\u30c7\u30fc\u30bf\u3092\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306b\u3088\u3063\u3066\u3067\u304d\u305f\u3001\u4f3c\u305f\u3082\u306e\u540c\u58eb\u304c\u96c6\u307e\u3063\u305f\u30b0\u30eb\u30fc\u30d7\u306e\u3053\u3068\u3092\u30af\u30e9\u30b9\u30bf\u3068\u547c\u3073\u307e\u3059\u3002 \u6d3b\u7528\u4f8b \u9867\u5ba2\u306e\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3 \u5b66\u751f\u3092\u30b0\u30eb\u30fc\u30d7\u5206\u3051 \u30c6\u30ad\u30b9\u30c8\u30de\u30a4\u30cb\u30f3\u30b0 \u753b\u50cf\u306e\u5206\u985e \u300c\u30c7\u30fc\u30bf\u9593\u306e\u985e\u4f3c\u5ea6\u306b\u3082\u3068\u3065\u3044\u3066\u30c7\u30fc\u30bf\u3092\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b\u300d\u3068\u3044\u3046\u7279\u5fb4\u306e\u6d3b\u304b\u3057\u65b9\u6b21\u7b2c\u3067\u3001\u3055\u307e\u3056\u307e\u306a\u554f\u984c\u306b\u5fdc\u7528\u3067\u304d\u307e\u3059\u3002","title":"\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0"},{"location":"kmean/#k-means-k-","text":"K-means\u6cd5 \u306f\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u6700\u3082\u5e83\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u624b\u6cd5\u3067\u3059\u3002 \u975e\u968e\u5c64\u578b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u3067\u3042\u308a\u3001\u30af\u30e9\u30b9\u30bf\u306e\u5e73\u5747\u3092\u7528\u3044\u3001\u4e0e\u3048\u3089\u308c\u305f\u30af\u30e9\u30b9\u30bf\u6570 k \u500b\u306b\u5206\u985e\u3057\u307e\u3059\u3002 \u539f\u7406\uff1ak-means\u6cd5\u306f\u3001 n \u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092 k \u500b\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5206\u5272\u3059\u308b\u3002 \u30e9\u30f3\u30c0\u30e0\u306b k \u500b\u30af\u30e9\u30b9\u30bf\u306e\u91cd\u5fc3\u70b9\uff08 n \u6b21\u5143\u30d9\u30af\u30c8\u30eb\uff09 V_{1},\\dotsc ,V_{k} \u3092\u304a\u304f \u5404\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3001\u30af\u30e9\u30b9\u30bf\u3068\u6700\u3082\u8fd1\u3044\u3082\u306e\u3092\u30af\u30e9\u30b9\u30bf\u6240\u5c5e\u3068\u3059\u308b\u3002 \u5168\u3066\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u30af\u30e9\u30b9\u30bf\u756a\u53f7\u304c\u6c7a\u307e\u3063\u305f\u306e\u3061\u3001\u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u30bf\u306e\u91cd\u5fc3\uff08\u5e73\u5747\uff09\u3092\u8a08\u7b97\u3057\u3001\u65b0\u3057\u3044\u30af\u30e9\u30b9\u30bf\u306e\u91cd\u5fc3\u70b9\u3068\u3068\u3059\u308b\u3002 \u91cd\u5fc3\u79fb\u52d5\u8ddd\u96e2\u304c\u5341\u5206\u306b\u5c0f\u3055\u304f\u306a\u308b\u307e\u3067\u30012 \u3068 3 \u3092\u7e70\u308a\u8fd4\u3059\u3002 {\\displaystyle \\operatorname {arg\\,min} _{V_{1},\\dotsc ,V_{k}}\\sum _{i=1}^{n}\\min _{j}\\left\\|x_{i}-V_{j}\\right\\|^{2}} \u7d50\u679c\u306f\u3001\u6700\u521d\u306e\u30af\u30e9\u30b9\u30bf\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5272\u308a\u632f\u308a\u306b\u5927\u304d\u304f\u4f9d\u5b58\u3057\u307e\u3059\u3002\u4f55\u5ea6\u304b\u7e70\u308a\u8fd4\u3057\u3066\u884c\u3063\u3066\u6700\u826f\u306e\u7d50\u679c\u3092\u9078\u629e\u3059\u308b\u624b\u6cd5\u3084\u3001 k-means++\u6cd5 \u306e\u3088\u3046\u306b\u6700\u521d\u306e\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u70b9\u306e\u632f\u308a\u65b9\u3092\u5de5\u592b\u3059\u308b\u624b\u6cd5\u306a\u3069\u304c\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 sklearn \u3067\u306f\u3001KMeans \u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u5229\u7528\u3067\u304d\u307e\u3059\u3002 ``` title=\"\"thon from sklearn.cluster import KMeans model = KMeans(n_clusters=3) ### \u4e3b\u6210\u5206\u5206\u6790(PCA) **\u4e3b\u6210\u5206\u5206\u6790\uff08principal component analysis; PCA\uff09** \u306f\u3001\u76f8\u95a2\u306e\u3042\u308b\u591a\u6570\u306e\u5909\u6570\u304b\u3089\u76f8\u95a2\u306e\u306a\u3044\u5c11\u6570\u3067\u5168\u4f53\u306e\u3070\u3089\u3064\u304d\u3092\u6700\u3082\u3088\u304f\u8868\u3059\u4e3b\u6210\u5206\u3068\u547c\u3070\u308c\u308b\u5909\u6570\u3092\u5408\u6210\u3059\u308b\u591a\u5909\u91cf\u89e3\u6790\u306e\u4e00\u624b\u6cd5\u3067\u3059\u3002 \u539f\u7406\uff1a\u4e3b\u6210\u5206\u3092\u4e0e\u3048\u308b\u5909\u63db\u306f\u3001\u7b2c\u4e00\u4e3b\u6210\u5206\u306e\u5206\u6563\u3092\u6700\u5927\u5316\u3057\u3001\u89b3\u6e2c\u5024\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u8aac\u660e\u80fd\u529b\u3092\u53ef\u80fd\u306a\u9650\u308a\u4e3b\u6210\u5206\u306b\u6301\u305f\u305b\u307e\u3059\u3002\u7d9a\u304f\u4e3b\u6210\u5206\u306f\u305d\u308c\u307e\u3067\u306b\u6c7a\u5b9a\u3057\u305f\u4e3b\u6210\u5206\u3068\u76f4\u4ea4\u3059\u308b\u3068\u3044\u3046\u62d8\u675f\u6761\u4ef6\u306e\u4e0b\u3067\u5206\u6563\u3092\u6700\u5927\u5316\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u9078\u3073\u307e\u3059\u3002 <img src=\"https://upload.wikimedia.org/wikipedia/commons/f/f5/GaussianScatterPCA.svg\" width=\"50%\" align=\"center\" /> \u7528\u9014\uff1a\u4e3b\u6210\u5206\u5206\u6790\u306f\u3001**\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u3092\u524a\u6e1b\u3059\u308b**\u3068\u304d\u306e\u5b9a\u756a\u7684\u624b\u6cd5\u3067\u3059\u3002\u7279\u306b\u3001\u6b21\u5143\u6570\u306e\u591a\u3044\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u304d\u3001\u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u3063\u3066\u3088\u308a\uff12\u6b21\u5143\u3084\uff13\u6b21\u5143\u306b\u96c6\u7d04\u3059\u308b\u3053\u3068\u3067\u53ef\u8996\u5316\u304c\u5bb9\u6613\u306b\u306a\u308a\u307e\u3059\u3002 sklearn \u3067\u306f\u3001PCA\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u5229\u7528\u3067\u304d\u307e\u3059\u3002 ``` title=\"\"thon from sklearn.decomposition import PCA model = PCA(n_components=2)","title":"K-means\u6cd5 (K-\u5e73\u5747\u6cd5)"},{"location":"kmean/#_3","text":"\u3053\u3053\u304b\u3089\u306f\u3001sklearn \u30e2\u30b8\u30e5\u30fc\u30eb\u306e K-means\u6cd5\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3044\u306a\u304c\u3089\u3001 \u5b9f\u969b\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002","title":"\u8eab\u9577\u3068\u4f53\u91cd\u304b\u3089\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0"},{"location":"kmean/#_4","text":"\u30c7\u30fc\u30bf\u306f\u3001\u7b2c\uff14\u56de\u76ee\u306e\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u3067\u4f5c\u6210\u3057\u305f\u30b9\u30dd\u30fc\u30c4\u9078\u624b\u306e\u8eab\u9577\u3068\u4f53\u91cd\u3092\u96c6\u8a08\u3057\u305f\u8868\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u307f\u307e\u3059\u3002 \u81ea\u5206\u3067\u96c6\u8a08\u3057\u305f\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3057\u3066\u3082\u69cb\u3044\u307e\u305b\u3093\u304c\u3001 \u4e00\u5fdc\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3082\u3067\u304d\u307e\u3059\u3002 !wget https://KuramitsuLab.github.io/data/bmi.csv \u307e\u305a\u3001pandas\u3092\u4f7f\u3063\u3066\u8868\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002 data = pd.read_csv('bmi.csv') data.head()","title":"\u30c7\u30fc\u30bf\u7528\u610f\u3068\u78ba\u8a8d"},{"location":"kmean/#_5","text":"\u8eab\u9577\u3068\u4f53\u91cd\u306e\u5206\u5e03\u306e\u69d8\u5b50\u3092\u6563\u5e03\u56f3\u3068\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u8868\u793a\u3057\u3066\u898b\u307e\u3057\u3087\u3046\u3002 \u6563\u5e03\u56f3 \u30c7\u30fc\u30bf\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u8077\u696d\u3068\u3057\u3066\u30af\u30e9\u30b9\u5206\u985e\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001 \u8077\u696d\u3054\u3068\u306b\u8272\u5206\u3051\u3057\u3066\u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002 \u5f8c\u304b\u3089\u3001K-means\u6cd5\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3082\u63cf\u753b\u3057\u307e\u3059\u306e\u3067\u3001\u6bd4\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002 colors = ['blue', 'red', 'green'] ax = None for i, group in enumerate(data.groupby('\u8077\u696d')): ax = group[1].plot(kind='scatter', x='\u8eab\u9577', y='\u4f53\u91cd', alpha=0.3, c=colors[int(i)], ax=ax) \u91cd\u306a\u308a\u5177\u5408\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u307f\u3066\u898b\u307e\u3057\u3087\u3046\u3002 \u8eab\u9577\u306f\u3001\u5168\u3066\u306e\u8272\u304c\u91cd\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u4f53\u91cd\u306f\u3001\u91cd\u306a\u3063\u3066\u3044\u306a\u3044\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002 for i, group in enumerate(data.groupby('\u8077\u696d')): group[1]['\u8eab\u9577'].plot(kind='hist', alpha=0.5, bins=20, title='\u8eab\u9577') for i, group in enumerate(data.groupby('\u8077\u696d')): group[1]['\u4f53\u91cd'].plot(kind='hist', alpha=0.5, bins=20, title='\u4f53\u91cd')","title":"\u6563\u5e03\u56f3\u3067\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d"},{"location":"kmean/#3","text":"K-means \u6cd5\u306f\u3001\u5148\u306b\u30af\u30e9\u30b9\u30bf\u30fc\u6570\uff08\u30b0\u30eb\u30fc\u30d7\u6570\uff09\u3092\u6307\u5b9a\u3057\u3066\u3001\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3092\u3057\u307e\u3059\u3002 \u30af\u30e9\u30b9\u30bf\u6570: \uff13\u7a2e\u985e\u306e\u8077\u696d\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3001\uff13\u30b0\u30eb\u30fc\u30d7 \u521d\u671f\u72b6\u614b: random \uff08\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3001K-means++\u6cd5\u306b\u306a\u308b\uff09 \u307e\u305a\u3001\u521d\u671f\u5024\u3092\u4e0e\u3048\u3066\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\u3002 from sklearn.cluster import KMeans model = KMeans(init='random', n_clusters=3) model \u4eca\u56de\u306f\u3001\u8868\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001 \u8eab\u9577 \u3068 \u4f53\u91cd \u306e\uff12\u5c5e\u6027\u3001\u3064\u307e\u308a\uff12\u6b21\u5143\u30c7\u30fc\u30bf\u3092\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002 \u5b9f\u969b\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u3001\u30c7\u30fc\u30bf\u3092\u30d5\u30a3\u30c3\u30c8(fit)\u3055\u305b\u308b\u3053\u3068\u3067\u3001\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002 model.fit(data[['\u8eab\u9577', '\u4f53\u91cd']]) \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u304c\u6e08\u3093\u3060\u3089\u3001\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u60f3\u306e\u5f62\u3067\u3001\u30af\u30e9\u30b9\u30bf\u756a\u53f7\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30af\u30e9\u30b9\u30bf\u756a\u53f7\u306f\u30010\u304b\u3089 k-1 \u306e\u756a\u53f7\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002 model.predict([(170, 80)]) \u8868\u30c7\u30fc\u30bf\u306b\u5404\u8eab\u9577\u3068\u4f53\u91cd\u304b\u3089\u5206\u985e\u3055\u308c\u308b\u30af\u30e9\u30b9\u30bf\u3092\u5c5e\u6027\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 data['\u30af\u30e9\u30b9\u30bf'] = model.predict(data[['\u8eab\u9577', '\u4f53\u91cd']]) data.head() \u30af\u30e9\u30b9\u30bf \u3054\u3068\u306b\u8272\u5206\u3051\u3057\u3066\u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 ax=None plt.figure(figsize=(5,5)) for i, gd in enumerate(data.groupby('\u30af\u30e9\u30b9\u30bf')): ax = gd[1].plot(kind='scatter', x='\u8eab\u9577', y='\u4f53\u91cd', c=colors[i], alpha=0.3, ax=ax) \u5fc5\u305a\u3057\u3082\u8077\u696d\u3054\u3068\u306e\u5206\u5e03\u3068\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u5206\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\uff13\u3064\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u985e\u3055\u308c\u305f\u69d8\u5b50\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002 Warning \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3068\u30af\u30e9\u30b9\u5206\u985e \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u3001\u30af\u30e9\u30b9\u5206\u985e\u304c\u76ee\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u8077\u696d\u7b49\u306e\u30af\u30e9\u30b9\u5206\u985e\u3068\u7570\u306a\u3063\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\u6563\u5e03\u56f3\u3092\u307f\u308b\u3068\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u5883\u754c\u306b\u66d6\u6627\u306a\u3068\u3053\u308d\u304c\u306a\u304f\u3001\u7dba\u9e97\u306b\u5206\u985e\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002","title":"\uff13\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u985e"},{"location":"kmean/#_6","text":"\u30a8\u30eb\u30dc\u30fc\u6cd5\u306f\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u91cd\u5fc3\u70b9\u3068\u6240\u5c5e\u30c7\u30fc\u30bf\u70b9\u306e\u8ddd\u96e2\u306e\u7dcf\u548c\u306b\u7740\u76ee\u3057\u3066\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u4e8b\u524d\u306b\u898b\u7a4d\u3082\u308b\u624b\u6cd5\u3067\u3059\u3002 \u8ddd\u96e2\u306e\u7dcf\u548c\u306e\u6c42\u3081\u65b9 print(model.inertia_) \u30af\u30e9\u30b9\u30bf\u6570\u30921\u304b\u308910\u307e\u3067\u5927\u304d\u304f\u3057\u306a\u304c\u3089\u3001\u7dcf\u548c\u306e\u5909\u5316\u3092\u30b0\u30e9\u30d5\u5316\u3057\u3066\u307f\u307e\u3059\u3002 dist = [] for i in range(1, 11): km = KMeans(init='random', n_clusters=i) km.fit(data[['\u8eab\u9577', '\u4f53\u91cd']]) dist.append(km.inertia_) plt.xlabel('\u30af\u30e9\u30b9\u30bf\u6570') plt.ylabel('\u8ddd\u96e2\u306e\u7dcf\u548c') plt.plot(range(1, 11), dist, marker='+') \u30af\u30e9\u30b9\u30bf\u30fc\u6570\u304c\u9069\u5207\u306b\u306a\u308b\u307e\u3067\u306f\u3001\u7dcf\u548c\u306f\u76f8\u5fdc\u306b\u6e1b\u5c11\u3059\u308b\u3053\u3068\u304c\u671f\u5f85\u3067\u304d\u307e\u3059\u3002 \u4e00\u65b9\u3001\u3044\u3063\u305f\u3093\u9069\u5207\u306a\u6570\u3092\u8d85\u3048\u3066\u3057\u307e\u3046\u3068\u3001\u7dcf\u548c\u306e\u6e1b\u5c11\u306f\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306f2 \u304b 3\u306e\u8fba\u308a\u304c\u9069\u5207\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3068\u3044\u3048\u307e\u3059\u3002 Note \u30a8\u30eb\u30dc\u30fc\u6cd5\u306e\u7531\u6765 \u9069\u5207\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u304c\u30a8\u30eb\u30dc\u30fc\uff08\u8098\uff09\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u3068\u3053\u308d\u304b\u3089 \u30af\u30e9\u30b9\u30bf\u30fc\u6570\uff12\u306e\u6563\u5e03\u56f3\u3092\u8abf\u3079\u3066\u307f\u3088\u3046 model = KMeans(init='random', n_clusters=2) model.fit(data[['\u8eab\u9577', '\u4f53\u91cd']]) data['\u30af\u30e9\u30b9\u30bf\u30fc'] = model.predict(data[['\u8eab\u9577', '\u4f53\u91cd']]) ax=None plt.figure(figsize=(5,5)) for i, gd in enumerate(data.groupby('\u30af\u30e9\u30b9\u30bf\u30fc')): ax = gd[1].plot(kind='scatter', x='\u8eab\u9577', y='\u4f53\u91cd', c=colors[i], alpha=0.3, ax=ax)","title":"\u30a8\u30eb\u30dc\u30fc\u6cd5: \u9069\u5207\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u8abf\u3079\u308b"},{"location":"kmean/#_7","text":"\u4e73\u304c\u3093\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001Breast Cancer Wisconsin (Diagnostic) Data Set\u306b\u7531\u6765\u3057\u3001 \u4e73\u817a\u816b\u7624\u306e\u7a7f\u523a\u5438\u5f15\u7d30\u80de\u8a3a\u306e\u30c7\u30b8\u30bf\u30eb\u753b\u50cf\u304b\u3089\u8a08\u7b97\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002 1993 W.N. Street, W.H. Wolberg and O.L. Mangasarian Nuclear feature extraction for breast tumor diagnosis IS&T/SPIE 1993 International Symposium on Electronic Imaging: Science and Technology, volume 1905, pages 861-870, San Jose, CA, 1993. (abstract) Figure2 \u56f3\u4e2d\u4e00\u90e8\u3092\u5f15\u7528 \u4e73\u304c\u3093\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u4e3b\u6210\u5206\u5206\u6790\u3082\u8a66\u3057\u3066\u3044\u304d\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u7528\u610f !wget https://KuramitsuLab.github.io/data/cancer_ja.csv \u30aa\u30ea\u30b8\u30ca\u30eb\u30c7\u30fc\u30bf\u3092\u65e5\u672c\u8a9e\u5316\u3057\u305f\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002 \u826f\u6027\u306f 1 \u3001\u60aa\u6027\u306f 0 \u306e\u30d5\u30e9\u30b0\u304c\u3064\u3044\u3066\u3044\u307e\u3059\u3002 import pandas as pd data = pd.read_csv('cancer_ja.csv') data.head()","title":"\u4e73\u304c\u3093\u30c7\u30fc\u30bf\u3068\u4e3b\u6210\u5206\u5206\u6790"},{"location":"kmean/#_8","text":"\u30c7\u30fc\u30bf\u306e\u7d71\u8a08\u91cf\u3092\u8abf\u3079\u305f\u308a\u3001\u53ef\u8996\u5316\u3057\u3066\u3001\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u6349\u3048\u307e\u3057\u3087\u3046\u3002 Warning Let's try \u826f\u6027\u304c\u3093\u3068\u60aa\u6027\u304c\u3093\u306e\u5206\u5e03\u306b\u6cd5\u5247\u6027\u304c\u3042\u308b\u304b\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046 \u826f\u6027\u304b\u60aa\u6027\u304b\u3067\u8272\u5206\u3051\u3057\u3066\u3001\u5206\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\u5c5e\u6027\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u81ea\u7531\u306b\u5909\u3048\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 colors = ['red', 'green'] plt.figure(figsize=(5,5)) ax=None for i, gd in enumerate(data.groupby('\u826f\u6027')): ax = gd[1].plot(kind='scatter', x='\u5e73\u5747\u534a\u5f84', y='\u5e73\u5747\u5bc6\u96c6\u5ea6', c=colors[i], alpha=0.3, ax=ax) \u4e09\u6b21\u5143\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u305f\u3044\u3068\u304d\u306f\u3001 Axes3D \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u7528\u3044\u307e\u3059\u3002 from mpl_toolkits.mplot3d import Axes3D fig = plt.figure(figsize=(8,8)) ax = Axes3D(fig) ax.set_xlabel(\"\u5e73\u5747\u534a\u5f84\") ax.set_ylabel(\"\u5e73\u5747\u5bc6\u96c6\u5ea6\") ax.set_zlabel(\"\u5e73\u5747\u51f9\u90e8\") for i, gd in enumerate(data.groupby('\u826f\u6027')): ax.plot(gd[1]['\u5e73\u5747\u534a\u5f84'],gd[1]['\u5e73\u5747\u5bc6\u96c6\u5ea6'],gd[1]['\u5e73\u5747\u51f9\u90e8'],marker=\"o\",linestyle='None',c=colors[i], alpha=0.3)","title":"\u30c7\u30fc\u30bf\u306e\u7406\u89e3"},{"location":"kmean/#_9","text":"\u4e73\u304c\u3093\u30c7\u30fc\u30bf\u306f\u300130\u6b21\u5143\u306e\u5909\u6570\u304b\u3089\u306a\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u6b8b\u3057\u306a\u304c\u3089\u6b21\u5143\u3092\u524a\u6e1b\u3057\u3001\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002 \u3053\u306e\u3068\u304d\u3001\u6d3b\u7528\u3059\u308b\u306e\u304c \u4e3b\u6210\u5206\u5206\u6790(PCA) \u3067\u3059\u3002 \u4e3b\u6210\u5206\u5206\u6790(PCA)\u306b\u3088\u308b2\u6b21\u5143\u3078\u306e\u5727\u7e2e from sklearn.decomposition import PCA data_x = data[data.columns[1:]] pca = PCA(n_components=2) pca.fit(data_x) print('\u56fa\u6709\u30d9\u30af\u30c8\u30eb: ', pca.components_) print('\u5206\u6563:', pca.explained_variance_) print('\u5206\u6563\u5272\u5408:', pca.explained_variance_ratio_) \u4e3b\u6210\u5206\u5206\u6790\u306e\u7d50\u679c \u56fa\u6709\u30d9\u30af\u30c8\u30eb : pca.components_ : \u65b0\u3057\u3044\u7279\u5fb4\u7a7a\u9593\u306e\u8ef8\u306e\u5411\u304d \u5404\u4e3b\u6210\u5206\u306e\u5206\u6563 : pca.explained_variance_ \u5404\u4e3b\u6210\u5206\u306e\u6301\u3064\u5206\u6563\u5272\u5408 : pca.explained_variance_ratio_ : \u7b2c\u4e00\u4e3b\u6210\u5206\u306798%\u306e\u60c5\u5831\u3092\u4fdd\u6301 \u3055\u3066\u3001\u4e3b\u6210\u5206\u5206\u6790\u306e\u7d50\u679c\u3092\u7528\u3044\u3066\u4e73\u304c\u3093\u30c7\u30fc\u30bf\u3092\u5909\u63db\u3057\u307e\u3057\u3087\u3046\u3002 data_pca = pca.transform(data_x) #\u3000\u4e3b\u6210\u5206\u5206\u6790\u306b\u3088\u308b\u5909\u63db print('data_std(shape):', data_x.shape) print('data_pca(shape):', data_pca.shape) 30\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u304c2\u6b21\u5143\u306b\u524a\u6e1b\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002 \u306a\u304a\u3001 transform() \u3067\u5f97\u3089\u308c\u308b\u30c7\u30fc\u30bf\u306f\u3001 NumPy\u306e2\u6b21\u5143\u914d\u5217\u306a\u306e\u3067\u3001\u8868\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3057\u3066\u3001 data_pca \u3068\u3057\u3066\u304a\u304d\u307e\u3059\u3002 pd.DataFrame(data_pca, columns=['pc1', 'pc2']).head() data_pca = pd.concat([pd.DataFrame(data_pca, columns=['pc1', 'pc2']), data], axis=1) data_pca.head() \u7b2c\u4e00\u4e3b\u6210\u5206(pc1)\u3092x\u8ef8\u3001\u7b2c\u4e8c\u4e3b\u6210\u5206(pc2)\u3092y\u8ef8\u3068\u3057\u3066\u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002 plt.figure(figsize=(5,5)) ax=None for i, gd in enumerate(data_pca.groupby('\u826f\u6027')): ax = gd[1].plot(kind='scatter', x='pc1', y='pc2', c=colors[i], alpha=0.3, ax=ax)","title":"\u6b21\u5143\u524a\u6e1b"},{"location":"kmean/#_10","text":"\u4e73\u304c\u3093\u30c7\u30fc\u30bf\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u5c5e\u6027\u304c\u542b\u307e\u308c\u3066\u304a\u308a\u3001\u5358\u4f4d\u304c\u7570\u306a\u308a\u307e\u3059\u3002\u6700\u5927\u5024\u3084\u6700\u5c0f\u5024\u3082\u5927\u304d\u304f\u3070\u3089\u3064\u3044\u3066\u3044\u307e\u3059\u3002 data.describe() \u30c7\u30fc\u30bf\u5206\u6790\u3067\u306f\u3001\u5927\u304d\u306a\u5024\u306e\u5c5e\u6027\u304c\u3042\u308b\u3068\u3001\u5206\u6790\u7d50\u679c\u306f\u5c0f\u3055\u306a\u5024\u306e\u5c5e\u6027\u306e\u5f71\u97ff\u304c\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u5f71\u97ff\u3092\u6392\u9664\u3059\u308b\u305f\u3081\u3001\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff08\u6a19\u6e96\u5316\uff09\u306f\u5e38\u5957\u624b\u6bb5\u3067\u3059\u3002 \u6a19\u6e96\u5316 : \u30b5\u30f3\u30d7\u30eb\u5024 x \u304b\u3089\u5e73\u5747 \\bar{x} \u3092\u5f15\u304d\u3001\u6a19\u6e96\u504f\u5dee \\sigma \u3067\u5272\u308b z = \\frac{x - \\bar{x}}{\\sigma} sklearn\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u3001StandardScaler \u30af\u30e9\u30b9\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4f7f\u7528\u6cd5\u306f\u3001PCA\u30af\u30e9\u30b9\u3068\u540c\u3058\u3067\u3001\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3057\u3001\u305d\u306e\u5f8c\u3001\u5909\u63db\u3057\u307e\u3059\u3002 StandardScaler\u306b\u3088\u308b\u6a19\u6e96\u5316 from sklearn.preprocessing import StandardScaler sc = StandardScaler() # print(data.columns) \u30ab\u30e9\u30e0\u540d sc.fit(data[data.columns[1:]]) # \u6a19\u6e96\u5316 data_std = sc.transform(data[data.columns[1:]]) pd.DataFrame(data_std, columns=data.columns[1:]).head() \u6a19\u6e96\u5316\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3001\u4e3b\u6210\u5206\u5206\u6790\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 from sklearn.decomposition import PCA pca = PCA(n_components=2) pca.fit(data_std) data_pca = pca.transform(data_std) print('data_std(shape):', data_std.shape) print('data_pca(shape):', data_pca.shape) data = pd.concat([pd.DataFrame(data_pca, columns=['pc1', 'pc2']), data], axis=1) data.head() plt.figure(figsize=(5,5)) ax=None for i, gd in enumerate(data.groupby('\u826f\u6027')): ax = gd[1].plot(kind='scatter', x='pc1', y='pc2', c=colors[i], alpha=0.3, ax=ax) Let's try \u6a19\u6e96\u5316\u3057\u305f\u4e73\u304c\u3093\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3066\u3001k-means\u6cd5\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u307f\u3088\u3046\u3002 ## \u30b3\u30fc\u30b9\u30ef\u30fc\u30af !!! example **\u4f8b\u984c\uff08\u6210\u7e3e\u8868\uff09** \u57fa\u672c\u60c5\u5831\u51e6\u7406\u3067\u304a\u306a\u3058\u307f\u306e\u6210\u7e3e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u3001\uff13\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u5272\u3057\u3066\u307f\u3088\u3046\u3002 1. \u6210\u7e3e\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b (\u5c5e\u6027\u540d: `\u6210\u7e3eG`) 2. k-means \u6cd5\u3067\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u985e\u3059\u308b (\u5c5e\u6027\u540d: `K\u5e73\u5747G`) 3. \u82f1\u6570\u56fd\u793e\u7406\u3092\u3001\u7406\u7cfb/\u6587\u7cfb\u79d1\u76ee\u306e\uff12\u6b21\u5143\u306b\u6e1b\u3089\u3057\u3001k-means\u6cd5\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b 4. \u4e3b\u6210\u5206\u5206\u6790\u3092\u7528\u3044\u3066\uff12\u6b21\u5143\u306b\u524a\u6e1b\u3057\u305f\u306e\u3061\u3001k-means\u6cd5\u3067\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3059\u308b \u305d\u308c\u305e\u308c\u306e\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u306e\u7d50\u679c\u3092\u6563\u5e03\u56f3\u3067\u30b0\u30e9\u30d5\u5316\u3057\u3001\u7279\u5fb4\u306a\u3069\u6c17\u3065\u3044\u305f\u3053\u3068\u3092\u8b70\u8ad6\u3057\u3066\u307f\u3088\u3046\u3002 __\u30c7\u30fc\u30bf__ \u6b21\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089CSV\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u4f5c\u696d\u3057\u307e\u3057\u3087\u3046\u3002 %%file \u6210\u7e3e.csv \u540d\u524d,\u82f1,\u6570,\u56fd,\u793e,\u7406 \u4f50\u85e4,84,45,77,69,48 \u9234\u6728,75,69,65,77,69 \u9ad8\u6a4b,69,81,45,82,79 \u7530\u4e2d,92,75,83,79,62 \u4f0a\u85e4,62,91,68,61,93 \u6e21\u8fba,54,63,48,52,50 \u5c71\u672c,48,53,71,83,45 \u4e2d\u6751,77,85,62,55,82 \u5c0f\u6797,82,88,89,79,85 \u52a0\u85e4,47,48,57,53,63 \u5409\u7530,75,36,85,73,51 \u5c71\u7530,66,73,79,65,66 \u4f50\u3005\u6728,64,95,48,59,91 \u5c71\u53e3,73,86,52,70,77 \u677e\u672c,55,75,63,67,80","title":"\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff1a\u6a19\u6e96\u5316"},{"location":"lunch/","text":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af # Example \u6f14\u7fd2\uff08\u30e9\u30f3\u30c1\u30dc\u30c3\u30af\u30b9\uff09 \u30ab\u30d5\u30a7\u30d5\u30ed\u30a2\u3067\u8ca9\u58f2\u3055\u308c\u3066\u3044\u308b\u304a\u5f01\u5f53\u306e\u8ca9\u58f2\u6570\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3057\u3066\u3001 \u8ca9\u58f2\u6570 y \u3092\u5897\u3084\u3059\u305f\u3081\u3001\u7279\u5fb4\u3092\u3064\u304b\u3093\u3067\u307f\u3088\u3046\u3002 \u5c5e\u6027 \u8aac\u660e datetid \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u65e5\u4ed8 y \u8ca9\u58f2\u6570 week \u66dc\u65e5\uff08\u6708\uff5e\u91d1\uff09 soldout \u5b8c\u58f2\u30d5\u30e9\u30b0\uff080:\u5b8c\u58f2\u305b\u305a\u30011:\u5b8c\u58f2\uff09 name \u30e1\u30a4\u30f3\u30e1\u30cb\u30e5\u30fc kcal \u304a\u304b\u305a\u306e\u30ab\u30ed\u30ea\u30fc\uff08kcal\uff09 remarks \u7279\u8a18\u4e8b\u9805 event \u793e\u5185\u30a4\u30d9\u30f3\u30c8 payday \u7d66\u6599\u65e5\u30d5\u30e9\u30b0\uff081:\u7d66\u6599\u65e5\uff09 weather \u5929\u6c17 precipitation \u964d\u6c34\u91cf temperature \u6c17\u6e29 \u8ca9\u58f2\u6570 y \u306e\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u5c5e\u6027\u306f\uff1f \u8ca9\u58f2\u6570 y \u30c7\u30fc\u30bf\u306e\u5165\u624b\u65b9\u6cd5 SIGNATE\u793e\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf \u3092 \u5229\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306e\u5165\u624b\u6cd5\u306e\u8a73\u7d30\u306f\u6388\u696d\u4e2d\u306b\u7d39\u4ecb\u3057\u307e\u3059\u3002","title":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\uff12"},{"location":"lunch/#_1","text":"Example \u6f14\u7fd2\uff08\u30e9\u30f3\u30c1\u30dc\u30c3\u30af\u30b9\uff09 \u30ab\u30d5\u30a7\u30d5\u30ed\u30a2\u3067\u8ca9\u58f2\u3055\u308c\u3066\u3044\u308b\u304a\u5f01\u5f53\u306e\u8ca9\u58f2\u6570\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3057\u3066\u3001 \u8ca9\u58f2\u6570 y \u3092\u5897\u3084\u3059\u305f\u3081\u3001\u7279\u5fb4\u3092\u3064\u304b\u3093\u3067\u307f\u3088\u3046\u3002 \u5c5e\u6027 \u8aac\u660e datetid \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u65e5\u4ed8 y \u8ca9\u58f2\u6570 week \u66dc\u65e5\uff08\u6708\uff5e\u91d1\uff09 soldout \u5b8c\u58f2\u30d5\u30e9\u30b0\uff080:\u5b8c\u58f2\u305b\u305a\u30011:\u5b8c\u58f2\uff09 name \u30e1\u30a4\u30f3\u30e1\u30cb\u30e5\u30fc kcal \u304a\u304b\u305a\u306e\u30ab\u30ed\u30ea\u30fc\uff08kcal\uff09 remarks \u7279\u8a18\u4e8b\u9805 event \u793e\u5185\u30a4\u30d9\u30f3\u30c8 payday \u7d66\u6599\u65e5\u30d5\u30e9\u30b0\uff081:\u7d66\u6599\u65e5\uff09 weather \u5929\u6c17 precipitation \u964d\u6c34\u91cf temperature \u6c17\u6e29 \u8ca9\u58f2\u6570 y \u306e\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u5c5e\u6027\u306f\uff1f \u8ca9\u58f2\u6570 y \u30c7\u30fc\u30bf\u306e\u5165\u624b\u65b9\u6cd5 SIGNATE\u793e\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf \u3092 \u5229\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306e\u5165\u624b\u6cd5\u306e\u8a73\u7d30\u306f\u6388\u696d\u4e2d\u306b\u7d39\u4ecb\u3057\u307e\u3059\u3002","title":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af"},{"location":"mnist/","text":"\u624b\u66f8\u304d\u6587\u5b57\u306e\u8a8d\u8b58(MNIST) # MNIST \u306f\u3001\u300c0\u300d~\u300c9\u300d\u306e\u624b\u66f8\u304d\u6570\u5b57\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002 Yann LeCun \u3089\u306b\u3088\u3063\u3066\u3001\u624b\u66f8\u304d\u6587\u5b57\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e NIST \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u62bd\u51fa\uff06\u52a0\u5de5\u3057\u3066\u3001 \u6a5f\u68b0\u5b66\u7fd2\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u7528\u306b\u4f5c\u6210\u3055\u308c\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u3053\u306f\u3001\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570 (X)\u3001\u30e9\u30d9\u30eb\u3092\u76ee\u7684\u5909\u6570 (y) \u3068\u3057\u3066\u3001\u591a\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3068\u3057\u3066\u3001 \u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002 \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6e96\u5099 import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try : import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError : import os os . system ( 'pip3 install japanize_matplotlib' ) import japanize_matplotlib sns . set ( font = \"IPAexGothic\" ) #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a MNIST \u30c7\u30fc\u30bf # MNIST\u306f\u3001sklearn \u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u305d\u3053\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 MNIST\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 from sklearn.datasets import fetch_openml mnist = fetch_openml ( 'mnist_784' , as_frame = False ) MNIST\u30c7\u30fc\u30bf\u306f\u3001 mnist \u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002 mnist.data : \u753b\u50cf\u30c7\u30fc\u30bf 70000\u4ef6 mnist.shape : \u30e9\u30d9\u30eb 70000\u4ef6 ```py\u3000title=\"\u753b\u50cf\u30c7\u30fc\u30bf\u3068\u30e9\u30d9\u30eb\u306e\u6b21\u5143\u3092\u78ba\u8a8d\u3059\u308b\" print('\u753b\u50cf\u30c7\u30fc\u30bf', mnist.data.shape, type(mnist.data)) print('\u30e9\u30d9\u30eb', mnist.target.shape, type(mnist.target)) \u753b\u50cf\u30c7\u30fc\u30bf (70000, 784) \u30e9\u30d9\u30eb (70000,) !!! note \"\u30e9\u30d9\u30eb\" \u6a5f\u68b0\u5b66\u7fd2\u696d\u754c\u3067\u306f\u3001\u30af\u30e9\u30b9\u5206\u985e\u306e\u76ee\u7684\u5909\u6570\uff08\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\uff09\u306e\u3053\u3068\u3092\u30e9\u30d9\u30eb\u3068\u547c\u3073\u307e\u3059\u3002 \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 0~255 \u968e\u8abf\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 784\u8981\u7d20\u306e\u914d\u5217\u306f\u307f\u306b\u304f\u3044\u306e\u3067\u300128x28\u306e\uff12\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3057\u3001 \u5024\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\uff08\u3046\u3063\u3059\u3089\u3068\u6570\u5b57\u304c\u898b\u307e\u305b\u3093\u304b\uff1f\uff09 ```py title=\"2\u6b21\u5143\u914d\u5217(28x28)\u306b\u5909\u63db\u3057\u3066\u8868\u793a\" d = mnist.data[0].reshape([28,28]) for y in range(28): for x in range(28): print(f'{int(d[y,x]):3d}', end=' ') print() Matplotlib\u3092\u7528\u3044\u308b\u3068\u3001\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u3067\u30010\u304c\u9ed2\u3067\u767d\u304c255\u306a\u306e\u3067\u3001\u6587\u5b57\u304c\u767d\u304f\u306a\u308a\u307e\u3059\u3002 Matplotlib\u3067\u753b\u50cf\u3068\u3057\u3066\u8868\u793a plt . imshow ( mnist . data [ 0 ] . reshape ( 28 , 28 ), cmap = plt . cm . gray ) W = 16 # \u6a2a\u306b\u4e26\u3079\u308b\u500b\u6570 H = 8 # \u7e26\u306b\u4e26\u3079\u308b\u500b\u6570 fig = plt . figure () fig . subplots_adjust ( left = 0 , right = 1 , bottom = 0 , top = 1.0 , hspace = 0.05 , wspace = 0.05 ) for i in range ( W * H ): ax = fig . add_subplot ( H , W , i + 1 , xticks = [], yticks = []) ax . imshow ( mnist . data . values [ i ] . reshape (( 28 , 28 )), cmap = plt . cm . gray ) plt . show () \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6e96\u5099 # MNIST\u306e\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u3068\u304d\u306f\u3001 \u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u300128x28\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306e\u753b\u50cf\u3092 784\u6b21\u5143\u306e\u591a\u6b21\u5143\u30c7\u30fc\u30bf \u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002 \u307e\u305a\u30010\u301c255\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u306e\u5024\u30920.0\u301c1.0\u306e\u7bc4\u56f2\u306b\u6b63\u898f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6e96\u5099 X = mnist . data . reshape ( 70000 , 784 ) / 255 # [0,1]\u3067\u6b63\u898f\u5316 y = mnist . target . astype ( int ) \u4eca\u56de\u3082\u307e\u305a\u3001\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3059\u308b\u306e\u3067\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272 from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 10000 , random . state = 0 , stratify = mnist . target ) print ( '\u8a13\u7df4\u30c7\u30fc\u30bf\u6570:' , len ( X_train )) print ( '\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570:' , len ( X_test )) \u5c64\u5316 \u30e9\u30d9\u30eb\u306e\u5272\u5408\u306f\u6559\u5e2b\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u5747\u4e00\u306b\u306a\u308b\u3088\u3046\u306b\u300cstratify=mnist.target\u300d\u306b\u3088\u308a\u5c64\u5316\u62bd\u51fa\uff08\u6bd4\u4f8b\u914d\u5206\uff09\u3057\u3066\u3044\u307e\u3059\u3002 \u3055\u3066\u3001\u5b66\u7fd2\u306b\u9032\u307f\u307e\u3057\u3087\u3046\u304b\uff1f \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u5206\u5e03 (\u5bc4\u308a\u9053) # \u753b\u50cf\u30c7\u30fc\u30bf(768\u6b21\u5143)\u3092\uff12\u6b21\u5143\u306b\u6b21\u5143\u524a\u6e1b\u3057\u3066\u3001 \u624b\u66f8\u304d\u6587\u5b57\u304c\u3069\u306e\u3088\u3046\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u304b\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002 60000\u500b\u306e\u30c7\u30fc\u30bf\u306f\u591a\u3059\u304e\u308b\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a2000\u679a\u9078\u3093\u3067\u3001PCA\u3067\u4e8c\u6b21\u5143\u306b\u524a\u6e1b\u3057\u307e\u3059\u3002 PCA\u3067\u6b21\u5143\u5727\u7e2e from sklearn.decomposition import PCA model_pca = PCA ( n_components = 2 , random_state = 0 ) pc12 = model_pca . fit_transform ( mnist . data [: 2000 ]) # 2000\u679a\u9078\u3076 \u30e9\u30d9\u30eb\u3068\u4e00\u7dd2\u306b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b df = pd . concat ([ pd . DataFrame ( pc12 , columns = [ 'pc1' , 'pc2' ]), pd . DataFrame ( mnist . target [: 2000 ], columns = [ 'label' ])], axis = 1 ) df . head () \u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6563\u5e03\u56f3\u3092\u63cf\u753b\u3059\u308b plt . figure ( figsize = ( 15 , 15 )) sns . scatterplot ( data = df , x = 'pc1' , y = 'pc2' , hue = 'label' ) plt . show () \u7d50\u69cb\u3001\u3054\u3061\u3083\u3054\u3061\u3083\u306b\u91cd\u306a\u3063\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u7dba\u9e97\u306b\u5206\u985e\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f t-SNE \u6700\u8fd1\u306f\u3001\u6b21\u5143\u524a\u6e1b\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u3001PCA\u3088\u308at-SNE\u304c\u597d\u307e\u308c\u307e\u3059\u3002 PCA\u306e\u4ee3\u308f\u308a\u306bt-SNE\u3067\u6b21\u5143\u524a\u6e1b from sklearn.manifold import TSNE tsne = TSNE ( n_components = 2 , random_state = 0 ) . fit_transform ( mnist . data [: 2000 ]) df = pd . concat ([ pd . DataFrame ( tsne , columns = [ 'pc1' , 'pc2' ]), pd . DataFrame ( mnist . target [: 2000 ], columns = [ 'label' ])], axis = 1 ) plt . figure ( figsize = ( 8 , 8 )) sns . scatterplot ( data = df , x = 'pc1' , y = 'pc2' , hue = 'label' ) plt . show () tSNE\u3068\u306f\u306a\u3093\u305e\u3084 -> \u539f\u8457\u8ad6\u6587 \u6a5f\u68b0\u5b66\u7fd2\u306e\u4e16\u754c\u306f\u3001\u3069\u3093\u3069\u3093\u65b0\u3057\u3044\u6280\u6cd5\u3092\u8a66\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3 # MNIST\u306f\u3001\u7dba\u9e97\u306b\u7dda\u5f62\u5206\u96e2\u3067\u304d\u306a\u3055\u305d\u3046\uff1f\u306a\u306e\u3067\u3001 \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3(MLPClassifier)\u3092\u4f7f\u3063\u3066\u5206\u985e\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002 sklearn \u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u3001 MLPClassifier \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u7528\u3044\u307e\u3059\u3002 MLPClassfier\u306e\u5229\u7528 from sklearn.neural_network import MLPClassifier model = MLPClassifier () \u30d1\u30e9\u30e1\u30fc\u30bf\u30fb\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0 # MLPClassifier \u306f\u3001\u8c4a\u5bcc\u306a\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u539f\u7406 \u3092\u78ba\u8a8d\u3057\u306a\u304c\u3089\u3001\u9069\u5207\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3057\u3087\u3046\u3002 hidden_layer_sizes : \u4e2d\u9593\u5c64\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u4e2d\u9593\u5c64\u304c 3 \u3064 (\u5404\u4e2d\u9593\u5c64\u306e\u30cb\u30e5\u30fc\u30ed\u30f3\u6570\u304c 100 \u500b\u3001200 \u500b\u3001100 \u500b) \u306e 5 \u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092 \u8a2d\u5b9a\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002 hidden_layer_sizes=(100, 200, 100) activation : \u4e2d\u9593\u5c64\u306e\u6d3b\u6027\u5316\u95a2\u6570 identity:\u6052\u7b49\u95a2\u6570 logistic:\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570 tanh:\u53cc\u66f2\u7dda\u6b63\u63a5\u95a2\u6570 relu:\u30e9\u30f3\u30d7\u95a2\u6570 solver : \u91cd\u307f\u306e\u6700\u9069\u5316\u624b\u6cd5 lbfgs:\u6e96\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u306b\u5c5e\u3059 BFGS \u306e\u4e00\u7a2e sgd:\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5 adam:\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u306b\u30e2\u30fc\u30e1\u30f3\u30c8\u3092\u3064\u3051\u308b max_iter : \u30a8\u30dd\u30c3\u30af\u6570 \u5b66\u7fd2\u306e\u4f8b # \u3053\u3053\u3067\u306f\u3001\uff13\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u3001\u6d3b\u6027\u5316\u95a2\u6570\u306f\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3001\u6700\u9069\u5316\u306f\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u3092\u7528\u3044\u3066\u307f\u307e\u3059\u3002 from sklearn.neural_network import MLPClassifier model = MLPClassifier ( hidden_layer_sizes = ( 128 ,), activation = 'logistic' , solver = 'sgd' , max_iter = 20 , verbose = 10 , random_state = 0 ) \u7528\u610f\u3057\u305f\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002 log = model . fit ( X_train , y_train ) Iteration 1, loss = 2.23320721 Iteration 2, loss = 2.06989000 Iteration 3, loss = 1.87448221 Iteration 4, loss = 1.65146930 Iteration 5, loss = 1.43223928 Iteration 6, loss = 1.24331458 Iteration 7, loss = 1.09217506 Iteration 8, loss = 0.97428410 Iteration 9, loss = 0.88245881 Iteration 10, loss = 0.80984222 Iteration 11, loss = 0.75156470 Iteration 12, loss = 0.70398038 Iteration 13, loss = 0.66461657 Iteration 14, loss = 0.63140618 Iteration 15, loss = 0.60303138 Iteration 16, loss = 0.57851333 Iteration 17, loss = 0.55715012 Iteration 18, loss = 0.53832779 Iteration 19, loss = 0.52163356 Iteration 20, loss = 0.50675142 ConvergenceWarning\u3068\u306f Iteration(Epoch\u6570)\u304c\u8db3\u308a\u306a\u3044\u306e\u3067\u3001\u5b66\u7fd2\u304c\u4e0d\u5341\u5206\u3060\u3068\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002 log \u306f\u5b66\u7fd2\u306e\u69d8\u5b50\u3092\u8a18\u9332\u3057\u305f\u30ed\u30b0\u30c7\u30fc\u30bf\u3067\u3059\u3002 \u30b0\u30e9\u30d5\u3067\u8868\u793a\u3057\u3066\u307f\u308b\u3068\u3001\u5b66\u7fd2\u306e\u9032\u6357\u3092\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 plt . plot ( log . loss_curve_ ) plt . xlabel ( 'Epoch\u6570' ) plt . ylabel ( '\u640d\u5931' ) plt . show () \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u306f\u3001 \u640d\u5931 (loss) \u304c\u6e1b\u5c11\u3057\u3066\u3044\u308b\u3068\u304d\u306f\u3001\u307e\u3060\u9806\u8abf\u306b\u5b66\u7fd2\u304c\u9032\u3093\u3067\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 Epoch\u6570\u3068\u904e\u5b66\u7fd2 \u3082\u3046\u5c11\u3057Epoch\u6570\u3092\u5897\u3084\u3057\u305f\u65b9\u304c\u3044\u3044\u3067\u3057\u3087\u3046\u3002 \u3042\u307e\u308a\u5897\u3084\u3057\u3059\u304e\u308b\u3068\u3001\u904e\u5b66\u7fd2\u306b\u306a\u308a\u307e\u3059\u3002 \u5206\u985e\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1 # \u5b66\u7fd2\u6e08\u307f\u306e\u5206\u985e\u30e2\u30c7\u30eb\u304b\u3089\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u3053\u308c\u306f\u3001\u672a\u77e5\u306e\u624b\u66f8\u304d\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u8a8d\u8b58\u3057\u305f\u6587\u5b57\u3068\u306a\u308a\u307e\u3059\u3002 \u3068\u308a\u3042\u3048\u305a\u3001 \u30af\u30e9\u30b9\u5206\u985e\u30e2\u30c7\u30eb\u304c\u3067\u304d\u305f\u3089\u6b63\u89e3\u7387\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002 \u6b63\u89e3\u7387\u3092\u898b\u3066\u307f\u308b print ( '\u6b63\u89e3\u7387(train)' , model . score ( X_train , y_train )) print ( '\u6b63\u89e3\u7387(test)' , model . score ( X_test , y_test )) \u6b63\u89e3\u7387(train) 0.8761166666666667 \u6b63\u89e3\u7387(test) 0.8715 \u3072\u3068\u6614\u524d\u306f\u3001\u30cf\u30ac\u30ad\u306e\u90f5\u4fbf\u756a\u53f7\u3092\u8aad\u307f\u53d6\u3063\u3066\u3001\u81ea\u52d5\u7684\u306b\u4ed5\u5206\u3051\u3059\u308b\u88c5\u7f6e\u3067\u3042\u3063\u3066\u3082\u3001 70%\u306e\u6b63\u78ba\u3055\u3082\u51fa\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u305d\u308c\u306b\u6bd4\u3079\u308b\u3068\u3001\u7d20\u6674\u3089\u3057\u3044\u6b63\u89e3\u7387\u3068\u3044\u3048\u307e\u3059\u3002 \u6df7\u540c\u884c\u5217\u3082\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6df7\u540c\u884c\u5217\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u307f\u308b from sklearn.metrics import confusion_matrix y_pred = model . predict ( X_test ) cm = confusion_matrix ( y_test , y_pred ) sns . heatmap ( cm , annot = True , cmap = 'Reds' ) plt . show () \u5b9f\u969b\u306b\u3069\u306e\u3088\u3046\u306b\u4e88\u60f3\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u753b\u50cf\u3068\u4e88\u6e2c\u5024\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6700\u521d\u306e10\u500b\u3060\u3051\u8868\u793a\u3057\u307f\u308b #fig.subplots_adjust(left=0, right=1, bottom=0, top=1.0, hspace=0.05, wspace=0.05) def plot_mnist ( X , y ): fig = plt . figure () for i in range ( 10 ): ax = fig . add_subplot ( 1 , 10 , i + 1 , xticks = [], yticks = []) ax . imshow ( X [ i ] . reshape (( 28 , 28 )), cmap = plt . cm . gray ) print ( y [: 10 ]) plt . show () plot_mnist ( X_test , y_pred ) [0 4 1 2 4 4 7 1 1 7] Let's try MLPClassfier\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u3066\u3001\u6b63\u89e3\u7387\u304c\u3069\u3046\u5909\u308f\u308b\u304b\u8abf\u3079\u3066\u307f\u3088\u3046\u3002 \u6700\u8fd1\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9a\u756a\u30d1\u30e9\u30e1\u30fc\u30bf \u96a0\u308c\u5c64\u3092\u5897\u3084\u3059 \u6d3b\u6027\u5316\u95a2\u6570: relu \u6700\u9069\u5316: adam PyTorch, TensorFlow, Kelas \u6df1\u5c64\u5b66\u7fd2\u6280\u8853\u306f\u3001\u8fd1\u5e74\u3001\u9ad8\u5ea6\u5316\u3057\u3066\u304d\u3066\u3044\u307e\u3059\u3002 \u3088\u308a\u7d30\u304b\u304f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u6210\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3067\u304d\u308b PyTorch, Tensorflow, Kelas\u306a\u3069\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5c02\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002 \uff08\u305f\u3076\u3093\u3001\u5f8c\u671f\u306e\u60c5\u5831\u30bc\u30df\u3067\u306f\u3001PyTorch\u3092\u4f7f\u3063\u3066\u3001\u3088\u308a\u9ad8\u5ea6\u306a\u5b66\u7fd2\u306b\u6311\u6226\u3057\u307e\u3059\u3002\uff09 \u8208\u5473\u306e\u3042\u308b\u4eba\u306f\u3001 Pytorch\u3084Tensorflow\u306a\u3069\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u3088\u308a\u9ad8\u3044\u6b63\u89e3\u5ea6\u306e\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \uff08\u306a\u304a\u3001\u7814\u7a76\u30ec\u30d9\u30eb\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f7f\u308b\u3068\u304d\u306f\u3001 \u3053\u306e\u3088\u3046\u306a\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\uff09 \u81ea\u5206\u306e\u624b\u66f8\u304d\u6587\u5b57\u3092\u8a8d\u8b58\u3059\u308b\u2b50\ufe0f # \u81ea\u5206\u81ea\u8eab\u3067\u66f8\u3044\u305f\u624b\u66f8\u304d\u6587\u5b57\u3092\u8a8d\u8b58\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u7d19\u3092\u7528\u610f\u3057\u3066\u6570\u5b57\u3092\u66f8\u3044\u3066\u3001\u30b9\u30de\u30db\u3067\u64ae\u5f71\u3057\u307e\u3059\u3002 Tip \u9ed2\u3044\u30de\u30b8\u30c3\u30af\u3084\u30b5\u30a4\u30f3\u30da\u30f3\u306a\u3069\u3067\u592a\u3081\u306b\u306f\u3063\u304d\u308a\u3068\u66f8\u3044\u305f\u65b9\u304c\u3044\u3044\u3067\u3059\u3088\u3002 \uff11\u6587\u5b57\u3060\u3051\u9069\u5f53\u306b\u5207\u308a\u51fa\u3057\u3066\u3001PNG\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 Pillow/PIL \u30e9\u30a4\u30d6\u30e9\u30ea # \u753b\u50cf\u306f\u3001Pillow/PIL \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u3066\u64cd\u4f5c\u3057\u307e\u3059\u3002 \u307e\u305aColab\u4e0a\u3067\u81ea\u5206\u306e\u30d5\u30a1\u30a4\u30eb\uff08\u4f8b. 2.png \uff09\u3092\u8aad\u307f\u8fbc\u3081\u308b\u304b\u3001\u8868\u793a\u3057\u3066\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\u3002 from PIL import Image im = Image . open ( \"2.png\" ) print ( '\u30b5\u30a4\u30ba' , im . size ) im MNIST\u7528\u306e\u30e2\u30c7\u30eb\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306f\u3001 \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306e28x28\u306a\u306e\u3067\u3001Pillow/PIL \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u3066\u5909\u63db\u3057\u307e\u3059\u3002 im = Image . open ( \"2.png\" ) . convert ( 'L' ) . resize (( 28 , 28 )) print ( '\u30b5\u30a4\u30ba' , im . size ) im \u3053\u306ePillow\u753b\u50cf\u30c7\u30fc\u30bf\u3092NumPy\u914d\u5217\u306b\u5909\u63db\u3057\u3001784\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u306b\u3057\u307e\u3059\u3002 myimage = np . array ( im ) . reshape ( 1 , - 1 ) myimage . shape MNIST\u306e\u30e2\u30c7\u30eb\u306f\u3001\u767d\u9ed2\u304c\u53cd\u8ee2\u3057\u3066\u3044\u308b\u753b\u50cf\u3067\u5b66\u7fd2\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u767d\u9ed2\u3092\u53cd\u8ee2\u3055\u305b\u3066\u30010.0\u301c1.0\u306b\u6b63\u898f\u5316\u3057\u307e\u3059\u3002 \u3053\u308c\u3067\u5165\u529b\u30c7\u30fc\u30bf\u306f\u3067\u304d\u307e\u3057\u305f\u3002 myimage = ( 255 - myimage ) / 255 \u305d\u308c\u3067\u306f\u3001\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002(\u6b63\u3057\u304f\u4e88\u60f3\u3067\u304d\u308b\u304b\u306a\uff1f) model . predict ( myimage ) \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3078\u306e\u7d44\u307f\u8fbc\u307f # \u4eba\u5de5\u77e5\u80fd\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u7d44\u307f\u8fbc\u3080\u3068\u304d\u306f\u3001 \u6bce\u56de\u5b66\u7fd2\u3057\u306a\u304f\u3066\u6e08\u3080\u3088\u3046\u306b\u30e2\u30c7\u30eb\u3060\u3051\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3059\u3002 pickle\u5f62\u5f0f Python\u3067\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u4e00\u822c\u7684\u306a\u65b9\u6cd5\u3067\u3059\u3002 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff08\u76f4\u5217\u5316\uff09 \u3068\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306b\u304a\u3044\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30d0\u30a4\u30c8\u5217\u306e\u30c7\u30fc\u30bf\u306b\u8868\u73fe\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u9006\u306b\u3001 \u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff08\u975e\u76f4\u5217\u5316\uff09 \u3068\u306f\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u30d0\u30a4\u30c8\u5217\u304b\u3089\u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5fa9\u5143\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58 import pickle with open ( 'mnist-model.pickle' , mode = 'wb' ) as fp : pickle . dump ( model , fp ) \u4fdd\u5b58\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u5927\u304d\u3055\u306f1.6M\u30d0\u30a4\u30c8\u7a0b\u5ea6\u306b\u306a\u308a\u307e\u3059\u3002 \uff08\u3082\u3061\u308d\u3093\u3001\u5b66\u7fd2\u3057\u305f\u30c7\u30fc\u30bf\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3082\u3088\u308a\u307e\u3059\u3002\uff09 \u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f import pickle with open ( 'mnist-model.pickle' , mode = 'rb' ) as fp : model = pickle . load ( fp ) model . predict ( myimage ) \u7df4\u7fd2 # MNIST\u306f\u3001\u7df4\u7fd2\u7528\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3082\u7c21\u5358\u306b\u9ad8\u3044\u7cbe\u5ea6\u304c\u5f97\u3089\u308c\u308b\u306e\u3067\u3001\u3042\u307e\u308a\u7df4\u7fd2\u306b\u306a\u3089\u306a\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \uff08\u6a5f\u68b0\u5b66\u7fd2\u306e\u9032\u5316\u306f\u6050\u308d\u3057\u3044\u3067\u3059\u306d\u3002\uff09 \u53c2\u8003\u8cc7\u6599 \u3068\u3044\u3046\u308f\u3051\u3067\u3001MNIST\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u306e\u5206\u985e\u30e2\u30c7\u30eb\u3082\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Fashion-MNIST # Fashin-MNIST \u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3001 \u30d5\u30a1\u30c3\u30b7\u30e7\u30f3\u30a2\u30a4\u30c6\u30e0\u306e\u5206\u985e\u3092\u3057\u3066\u307f\u3088\u3046\u3002 \u30c7\u30fc\u30bf\u306e\u5165\u624b\u65b9\u6cd5 from sklearn.datasets import fetch_openml fashion_mnist = fetch_openml ( 'Fashion-MNIST' , as_frame = False ) CIFAR-10 # CIFAR-10\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff08Canadian Institute For Advanced Research)\u306f\u3001\u6b21\u306e\u30e9\u30d9\u30eb\u304c\u3064\u3051\u3089\u308c\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002 \u30e9\u30d9\u30eb\u300c0\u300d\uff1a airplane\uff08\u98db\u884c\u6a5f\uff09 \u30e9\u30d9\u30eb\u300c1\u300d\uff1a automobile\uff08\u81ea\u52d5\u8eca\uff09 \u30e9\u30d9\u30eb\u300c2\u300d\uff1a bird\uff08\u9ce5\uff09 \u30e9\u30d9\u30eb\u300c3\u300d\uff1a cat\uff08\u732b\uff09 \u30e9\u30d9\u30eb\u300c4\u300d\uff1a deer\uff08\u9e7f\uff09 \u30e9\u30d9\u30eb\u300c5\u300d\uff1a dog\uff08\u72ac\uff09 \u30e9\u30d9\u30eb\u300c6\u300d\uff1a frog\uff08\u30ab\u30a8\u30eb\uff09 \u30e9\u30d9\u30eb\u300c7\u300d\uff1a horse\uff08\u99ac\uff09 \u30e9\u30d9\u30eb\u300c8\u300d\uff1a ship\uff08\u8239\uff09 \u30e9\u30d9\u30eb\u300c9\u300d\uff1a truck\uff08\u30c8\u30e9\u30c3\u30af\uff09 Alex Krizhevsky\u6c0f\uff0fVinod Nair\u6c0f\uff0fGeoffrey Hinton\u6c0f\u306b\u3088\u3063\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u8a8d\u8b58\u7528\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u300c80 Million Tiny Images\u300d\u304b\u3089\u53ce\u96c6\u3055\u308c\u3066\u4f5c\u6210\u3055\u308c\u305f\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u7531\u6765\u3057\u3066\u3044\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u5165\u624b\u65b9\u6cd5 from sklearn.datasets import fetch_openml cifar10 = fetch_openml ( 'CIFAR_10' , as_frame = False ) \u30ab\u30e9\u30fc\u753b\u50cf\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3088\u308a\u753b\u50cf\u8a8d\u8b58\u306e\u96f0\u56f2\u6c17\u304c\u697d\u3057\u3081\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002 \u305f\u3060\u3057\u3001\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u308b\u306e\u3067\u3001\u305d\u308d\u305d\u308dPyTorch\u3084Tensorflow, Keras\u3092\u4f7f\u308f\u306a\u3044\u3068\u82e6\u3057\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","title":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\uff14"},{"location":"mnist/#mnist","text":"MNIST \u306f\u3001\u300c0\u300d~\u300c9\u300d\u306e\u624b\u66f8\u304d\u6570\u5b57\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002 Yann LeCun \u3089\u306b\u3088\u3063\u3066\u3001\u624b\u66f8\u304d\u6587\u5b57\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e NIST \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u62bd\u51fa\uff06\u52a0\u5de5\u3057\u3066\u3001 \u6a5f\u68b0\u5b66\u7fd2\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u7528\u306b\u4f5c\u6210\u3055\u308c\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u3053\u306f\u3001\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570 (X)\u3001\u30e9\u30d9\u30eb\u3092\u76ee\u7684\u5909\u6570 (y) \u3068\u3057\u3066\u3001\u591a\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\u3068\u3057\u3066\u3001 \u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002 \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6e96\u5099 import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try : import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError : import os os . system ( 'pip3 install japanize_matplotlib' ) import japanize_matplotlib sns . set ( font = \"IPAexGothic\" ) #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a","title":"\u624b\u66f8\u304d\u6587\u5b57\u306e\u8a8d\u8b58(MNIST)"},{"location":"mnist/#mnist_1","text":"MNIST\u306f\u3001sklearn \u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u305d\u3053\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 MNIST\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 from sklearn.datasets import fetch_openml mnist = fetch_openml ( 'mnist_784' , as_frame = False ) MNIST\u30c7\u30fc\u30bf\u306f\u3001 mnist \u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002 mnist.data : \u753b\u50cf\u30c7\u30fc\u30bf 70000\u4ef6 mnist.shape : \u30e9\u30d9\u30eb 70000\u4ef6 ```py\u3000title=\"\u753b\u50cf\u30c7\u30fc\u30bf\u3068\u30e9\u30d9\u30eb\u306e\u6b21\u5143\u3092\u78ba\u8a8d\u3059\u308b\" print('\u753b\u50cf\u30c7\u30fc\u30bf', mnist.data.shape, type(mnist.data)) print('\u30e9\u30d9\u30eb', mnist.target.shape, type(mnist.target)) \u753b\u50cf\u30c7\u30fc\u30bf (70000, 784) \u30e9\u30d9\u30eb (70000,) !!! note \"\u30e9\u30d9\u30eb\" \u6a5f\u68b0\u5b66\u7fd2\u696d\u754c\u3067\u306f\u3001\u30af\u30e9\u30b9\u5206\u985e\u306e\u76ee\u7684\u5909\u6570\uff08\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\uff09\u306e\u3053\u3068\u3092\u30e9\u30d9\u30eb\u3068\u547c\u3073\u307e\u3059\u3002 \u753b\u50cf\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 0~255 \u968e\u8abf\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 784\u8981\u7d20\u306e\u914d\u5217\u306f\u307f\u306b\u304f\u3044\u306e\u3067\u300128x28\u306e\uff12\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3057\u3001 \u5024\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\uff08\u3046\u3063\u3059\u3089\u3068\u6570\u5b57\u304c\u898b\u307e\u305b\u3093\u304b\uff1f\uff09 ```py title=\"2\u6b21\u5143\u914d\u5217(28x28)\u306b\u5909\u63db\u3057\u3066\u8868\u793a\" d = mnist.data[0].reshape([28,28]) for y in range(28): for x in range(28): print(f'{int(d[y,x]):3d}', end=' ') print() Matplotlib\u3092\u7528\u3044\u308b\u3068\u3001\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u3067\u30010\u304c\u9ed2\u3067\u767d\u304c255\u306a\u306e\u3067\u3001\u6587\u5b57\u304c\u767d\u304f\u306a\u308a\u307e\u3059\u3002 Matplotlib\u3067\u753b\u50cf\u3068\u3057\u3066\u8868\u793a plt . imshow ( mnist . data [ 0 ] . reshape ( 28 , 28 ), cmap = plt . cm . gray ) W = 16 # \u6a2a\u306b\u4e26\u3079\u308b\u500b\u6570 H = 8 # \u7e26\u306b\u4e26\u3079\u308b\u500b\u6570 fig = plt . figure () fig . subplots_adjust ( left = 0 , right = 1 , bottom = 0 , top = 1.0 , hspace = 0.05 , wspace = 0.05 ) for i in range ( W * H ): ax = fig . add_subplot ( H , W , i + 1 , xticks = [], yticks = []) ax . imshow ( mnist . data . values [ i ] . reshape (( 28 , 28 )), cmap = plt . cm . gray ) plt . show ()","title":"MNIST \u30c7\u30fc\u30bf"},{"location":"mnist/#_1","text":"MNIST\u306e\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u3068\u304d\u306f\u3001 \u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u300128x28\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306e\u753b\u50cf\u3092 784\u6b21\u5143\u306e\u591a\u6b21\u5143\u30c7\u30fc\u30bf \u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002 \u307e\u305a\u30010\u301c255\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u306e\u5024\u30920.0\u301c1.0\u306e\u7bc4\u56f2\u306b\u6b63\u898f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6e96\u5099 X = mnist . data . reshape ( 70000 , 784 ) / 255 # [0,1]\u3067\u6b63\u898f\u5316 y = mnist . target . astype ( int ) \u4eca\u56de\u3082\u307e\u305a\u3001\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u3092\u7528\u3044\u3066\u5b66\u7fd2\u3059\u308b\u306e\u3067\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272 from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 10000 , random . state = 0 , stratify = mnist . target ) print ( '\u8a13\u7df4\u30c7\u30fc\u30bf\u6570:' , len ( X_train )) print ( '\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u6570:' , len ( X_test )) \u5c64\u5316 \u30e9\u30d9\u30eb\u306e\u5272\u5408\u306f\u6559\u5e2b\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u5747\u4e00\u306b\u306a\u308b\u3088\u3046\u306b\u300cstratify=mnist.target\u300d\u306b\u3088\u308a\u5c64\u5316\u62bd\u51fa\uff08\u6bd4\u4f8b\u914d\u5206\uff09\u3057\u3066\u3044\u307e\u3059\u3002 \u3055\u3066\u3001\u5b66\u7fd2\u306b\u9032\u307f\u307e\u3057\u3087\u3046\u304b\uff1f","title":"\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u6e96\u5099"},{"location":"mnist/#_2","text":"\u753b\u50cf\u30c7\u30fc\u30bf(768\u6b21\u5143)\u3092\uff12\u6b21\u5143\u306b\u6b21\u5143\u524a\u6e1b\u3057\u3066\u3001 \u624b\u66f8\u304d\u6587\u5b57\u304c\u3069\u306e\u3088\u3046\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u304b\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002 60000\u500b\u306e\u30c7\u30fc\u30bf\u306f\u591a\u3059\u304e\u308b\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a2000\u679a\u9078\u3093\u3067\u3001PCA\u3067\u4e8c\u6b21\u5143\u306b\u524a\u6e1b\u3057\u307e\u3059\u3002 PCA\u3067\u6b21\u5143\u5727\u7e2e from sklearn.decomposition import PCA model_pca = PCA ( n_components = 2 , random_state = 0 ) pc12 = model_pca . fit_transform ( mnist . data [: 2000 ]) # 2000\u679a\u9078\u3076 \u30e9\u30d9\u30eb\u3068\u4e00\u7dd2\u306b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b df = pd . concat ([ pd . DataFrame ( pc12 , columns = [ 'pc1' , 'pc2' ]), pd . DataFrame ( mnist . target [: 2000 ], columns = [ 'label' ])], axis = 1 ) df . head () \u6563\u5e03\u56f3\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6563\u5e03\u56f3\u3092\u63cf\u753b\u3059\u308b plt . figure ( figsize = ( 15 , 15 )) sns . scatterplot ( data = df , x = 'pc1' , y = 'pc2' , hue = 'label' ) plt . show () \u7d50\u69cb\u3001\u3054\u3061\u3083\u3054\u3061\u3083\u306b\u91cd\u306a\u3063\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u7dba\u9e97\u306b\u5206\u985e\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f t-SNE \u6700\u8fd1\u306f\u3001\u6b21\u5143\u524a\u6e1b\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u3001PCA\u3088\u308at-SNE\u304c\u597d\u307e\u308c\u307e\u3059\u3002 PCA\u306e\u4ee3\u308f\u308a\u306bt-SNE\u3067\u6b21\u5143\u524a\u6e1b from sklearn.manifold import TSNE tsne = TSNE ( n_components = 2 , random_state = 0 ) . fit_transform ( mnist . data [: 2000 ]) df = pd . concat ([ pd . DataFrame ( tsne , columns = [ 'pc1' , 'pc2' ]), pd . DataFrame ( mnist . target [: 2000 ], columns = [ 'label' ])], axis = 1 ) plt . figure ( figsize = ( 8 , 8 )) sns . scatterplot ( data = df , x = 'pc1' , y = 'pc2' , hue = 'label' ) plt . show () tSNE\u3068\u306f\u306a\u3093\u305e\u3084 -> \u539f\u8457\u8ad6\u6587 \u6a5f\u68b0\u5b66\u7fd2\u306e\u4e16\u754c\u306f\u3001\u3069\u3093\u3069\u3093\u65b0\u3057\u3044\u6280\u6cd5\u3092\u8a66\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002","title":"\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u5206\u5e03 (\u5bc4\u308a\u9053)"},{"location":"mnist/#_3","text":"MNIST\u306f\u3001\u7dba\u9e97\u306b\u7dda\u5f62\u5206\u96e2\u3067\u304d\u306a\u3055\u305d\u3046\uff1f\u306a\u306e\u3067\u3001 \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3(MLPClassifier)\u3092\u4f7f\u3063\u3066\u5206\u985e\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002 sklearn \u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u3001 MLPClassifier \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u7528\u3044\u307e\u3059\u3002 MLPClassfier\u306e\u5229\u7528 from sklearn.neural_network import MLPClassifier model = MLPClassifier ()","title":"\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3"},{"location":"mnist/#_4","text":"MLPClassifier \u306f\u3001\u8c4a\u5bcc\u306a\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u539f\u7406 \u3092\u78ba\u8a8d\u3057\u306a\u304c\u3089\u3001\u9069\u5207\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3057\u3087\u3046\u3002 hidden_layer_sizes : \u4e2d\u9593\u5c64\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u4e2d\u9593\u5c64\u304c 3 \u3064 (\u5404\u4e2d\u9593\u5c64\u306e\u30cb\u30e5\u30fc\u30ed\u30f3\u6570\u304c 100 \u500b\u3001200 \u500b\u3001100 \u500b) \u306e 5 \u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092 \u8a2d\u5b9a\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002 hidden_layer_sizes=(100, 200, 100) activation : \u4e2d\u9593\u5c64\u306e\u6d3b\u6027\u5316\u95a2\u6570 identity:\u6052\u7b49\u95a2\u6570 logistic:\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570 tanh:\u53cc\u66f2\u7dda\u6b63\u63a5\u95a2\u6570 relu:\u30e9\u30f3\u30d7\u95a2\u6570 solver : \u91cd\u307f\u306e\u6700\u9069\u5316\u624b\u6cd5 lbfgs:\u6e96\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u306b\u5c5e\u3059 BFGS \u306e\u4e00\u7a2e sgd:\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5 adam:\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u306b\u30e2\u30fc\u30e1\u30f3\u30c8\u3092\u3064\u3051\u308b max_iter : \u30a8\u30dd\u30c3\u30af\u6570","title":"\u30d1\u30e9\u30e1\u30fc\u30bf\u30fb\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0"},{"location":"mnist/#_5","text":"\u3053\u3053\u3067\u306f\u3001\uff13\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u3001\u6d3b\u6027\u5316\u95a2\u6570\u306f\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3001\u6700\u9069\u5316\u306f\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u3092\u7528\u3044\u3066\u307f\u307e\u3059\u3002 from sklearn.neural_network import MLPClassifier model = MLPClassifier ( hidden_layer_sizes = ( 128 ,), activation = 'logistic' , solver = 'sgd' , max_iter = 20 , verbose = 10 , random_state = 0 ) \u7528\u610f\u3057\u305f\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002 log = model . fit ( X_train , y_train ) Iteration 1, loss = 2.23320721 Iteration 2, loss = 2.06989000 Iteration 3, loss = 1.87448221 Iteration 4, loss = 1.65146930 Iteration 5, loss = 1.43223928 Iteration 6, loss = 1.24331458 Iteration 7, loss = 1.09217506 Iteration 8, loss = 0.97428410 Iteration 9, loss = 0.88245881 Iteration 10, loss = 0.80984222 Iteration 11, loss = 0.75156470 Iteration 12, loss = 0.70398038 Iteration 13, loss = 0.66461657 Iteration 14, loss = 0.63140618 Iteration 15, loss = 0.60303138 Iteration 16, loss = 0.57851333 Iteration 17, loss = 0.55715012 Iteration 18, loss = 0.53832779 Iteration 19, loss = 0.52163356 Iteration 20, loss = 0.50675142 ConvergenceWarning\u3068\u306f Iteration(Epoch\u6570)\u304c\u8db3\u308a\u306a\u3044\u306e\u3067\u3001\u5b66\u7fd2\u304c\u4e0d\u5341\u5206\u3060\u3068\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002 log \u306f\u5b66\u7fd2\u306e\u69d8\u5b50\u3092\u8a18\u9332\u3057\u305f\u30ed\u30b0\u30c7\u30fc\u30bf\u3067\u3059\u3002 \u30b0\u30e9\u30d5\u3067\u8868\u793a\u3057\u3066\u307f\u308b\u3068\u3001\u5b66\u7fd2\u306e\u9032\u6357\u3092\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 plt . plot ( log . loss_curve_ ) plt . xlabel ( 'Epoch\u6570' ) plt . ylabel ( '\u640d\u5931' ) plt . show () \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u306f\u3001 \u640d\u5931 (loss) \u304c\u6e1b\u5c11\u3057\u3066\u3044\u308b\u3068\u304d\u306f\u3001\u307e\u3060\u9806\u8abf\u306b\u5b66\u7fd2\u304c\u9032\u3093\u3067\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 Epoch\u6570\u3068\u904e\u5b66\u7fd2 \u3082\u3046\u5c11\u3057Epoch\u6570\u3092\u5897\u3084\u3057\u305f\u65b9\u304c\u3044\u3044\u3067\u3057\u3087\u3046\u3002 \u3042\u307e\u308a\u5897\u3084\u3057\u3059\u304e\u308b\u3068\u3001\u904e\u5b66\u7fd2\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u5b66\u7fd2\u306e\u4f8b"},{"location":"mnist/#_6","text":"\u5b66\u7fd2\u6e08\u307f\u306e\u5206\u985e\u30e2\u30c7\u30eb\u304b\u3089\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u3053\u308c\u306f\u3001\u672a\u77e5\u306e\u624b\u66f8\u304d\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u8a8d\u8b58\u3057\u305f\u6587\u5b57\u3068\u306a\u308a\u307e\u3059\u3002 \u3068\u308a\u3042\u3048\u305a\u3001 \u30af\u30e9\u30b9\u5206\u985e\u30e2\u30c7\u30eb\u304c\u3067\u304d\u305f\u3089\u6b63\u89e3\u7387\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002 \u6b63\u89e3\u7387\u3092\u898b\u3066\u307f\u308b print ( '\u6b63\u89e3\u7387(train)' , model . score ( X_train , y_train )) print ( '\u6b63\u89e3\u7387(test)' , model . score ( X_test , y_test )) \u6b63\u89e3\u7387(train) 0.8761166666666667 \u6b63\u89e3\u7387(test) 0.8715 \u3072\u3068\u6614\u524d\u306f\u3001\u30cf\u30ac\u30ad\u306e\u90f5\u4fbf\u756a\u53f7\u3092\u8aad\u307f\u53d6\u3063\u3066\u3001\u81ea\u52d5\u7684\u306b\u4ed5\u5206\u3051\u3059\u308b\u88c5\u7f6e\u3067\u3042\u3063\u3066\u3082\u3001 70%\u306e\u6b63\u78ba\u3055\u3082\u51fa\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u305d\u308c\u306b\u6bd4\u3079\u308b\u3068\u3001\u7d20\u6674\u3089\u3057\u3044\u6b63\u89e3\u7387\u3068\u3044\u3048\u307e\u3059\u3002 \u6df7\u540c\u884c\u5217\u3082\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6df7\u540c\u884c\u5217\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u307f\u308b from sklearn.metrics import confusion_matrix y_pred = model . predict ( X_test ) cm = confusion_matrix ( y_test , y_pred ) sns . heatmap ( cm , annot = True , cmap = 'Reds' ) plt . show () \u5b9f\u969b\u306b\u3069\u306e\u3088\u3046\u306b\u4e88\u60f3\u3055\u308c\u3066\u3044\u308b\u304b\u3001\u753b\u50cf\u3068\u4e88\u6e2c\u5024\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6700\u521d\u306e10\u500b\u3060\u3051\u8868\u793a\u3057\u307f\u308b #fig.subplots_adjust(left=0, right=1, bottom=0, top=1.0, hspace=0.05, wspace=0.05) def plot_mnist ( X , y ): fig = plt . figure () for i in range ( 10 ): ax = fig . add_subplot ( 1 , 10 , i + 1 , xticks = [], yticks = []) ax . imshow ( X [ i ] . reshape (( 28 , 28 )), cmap = plt . cm . gray ) print ( y [: 10 ]) plt . show () plot_mnist ( X_test , y_pred ) [0 4 1 2 4 4 7 1 1 7] Let's try MLPClassfier\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u3066\u3001\u6b63\u89e3\u7387\u304c\u3069\u3046\u5909\u308f\u308b\u304b\u8abf\u3079\u3066\u307f\u3088\u3046\u3002 \u6700\u8fd1\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9a\u756a\u30d1\u30e9\u30e1\u30fc\u30bf \u96a0\u308c\u5c64\u3092\u5897\u3084\u3059 \u6d3b\u6027\u5316\u95a2\u6570: relu \u6700\u9069\u5316: adam PyTorch, TensorFlow, Kelas \u6df1\u5c64\u5b66\u7fd2\u6280\u8853\u306f\u3001\u8fd1\u5e74\u3001\u9ad8\u5ea6\u5316\u3057\u3066\u304d\u3066\u3044\u307e\u3059\u3002 \u3088\u308a\u7d30\u304b\u304f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u6210\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3067\u304d\u308b PyTorch, Tensorflow, Kelas\u306a\u3069\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5c02\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002 \uff08\u305f\u3076\u3093\u3001\u5f8c\u671f\u306e\u60c5\u5831\u30bc\u30df\u3067\u306f\u3001PyTorch\u3092\u4f7f\u3063\u3066\u3001\u3088\u308a\u9ad8\u5ea6\u306a\u5b66\u7fd2\u306b\u6311\u6226\u3057\u307e\u3059\u3002\uff09 \u8208\u5473\u306e\u3042\u308b\u4eba\u306f\u3001 Pytorch\u3084Tensorflow\u306a\u3069\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u69cb\u7bc9\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u3088\u308a\u9ad8\u3044\u6b63\u89e3\u5ea6\u306e\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \uff08\u306a\u304a\u3001\u7814\u7a76\u30ec\u30d9\u30eb\u306e\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f7f\u308b\u3068\u304d\u306f\u3001 \u3053\u306e\u3088\u3046\u306a\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\uff09","title":"\u5206\u985e\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1"},{"location":"mnist/#_7","text":"\u81ea\u5206\u81ea\u8eab\u3067\u66f8\u3044\u305f\u624b\u66f8\u304d\u6587\u5b57\u3092\u8a8d\u8b58\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u7d19\u3092\u7528\u610f\u3057\u3066\u6570\u5b57\u3092\u66f8\u3044\u3066\u3001\u30b9\u30de\u30db\u3067\u64ae\u5f71\u3057\u307e\u3059\u3002 Tip \u9ed2\u3044\u30de\u30b8\u30c3\u30af\u3084\u30b5\u30a4\u30f3\u30da\u30f3\u306a\u3069\u3067\u592a\u3081\u306b\u306f\u3063\u304d\u308a\u3068\u66f8\u3044\u305f\u65b9\u304c\u3044\u3044\u3067\u3059\u3088\u3002 \uff11\u6587\u5b57\u3060\u3051\u9069\u5f53\u306b\u5207\u308a\u51fa\u3057\u3066\u3001PNG\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u81ea\u5206\u306e\u624b\u66f8\u304d\u6587\u5b57\u3092\u8a8d\u8b58\u3059\u308b\u2b50\ufe0f"},{"location":"mnist/#pillowpil","text":"\u753b\u50cf\u306f\u3001Pillow/PIL \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u3066\u64cd\u4f5c\u3057\u307e\u3059\u3002 \u307e\u305aColab\u4e0a\u3067\u81ea\u5206\u306e\u30d5\u30a1\u30a4\u30eb\uff08\u4f8b. 2.png \uff09\u3092\u8aad\u307f\u8fbc\u3081\u308b\u304b\u3001\u8868\u793a\u3057\u3066\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\u3002 from PIL import Image im = Image . open ( \"2.png\" ) print ( '\u30b5\u30a4\u30ba' , im . size ) im MNIST\u7528\u306e\u30e2\u30c7\u30eb\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306f\u3001 \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306e28x28\u306a\u306e\u3067\u3001Pillow/PIL \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u3066\u5909\u63db\u3057\u307e\u3059\u3002 im = Image . open ( \"2.png\" ) . convert ( 'L' ) . resize (( 28 , 28 )) print ( '\u30b5\u30a4\u30ba' , im . size ) im \u3053\u306ePillow\u753b\u50cf\u30c7\u30fc\u30bf\u3092NumPy\u914d\u5217\u306b\u5909\u63db\u3057\u3001784\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u306b\u3057\u307e\u3059\u3002 myimage = np . array ( im ) . reshape ( 1 , - 1 ) myimage . shape MNIST\u306e\u30e2\u30c7\u30eb\u306f\u3001\u767d\u9ed2\u304c\u53cd\u8ee2\u3057\u3066\u3044\u308b\u753b\u50cf\u3067\u5b66\u7fd2\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u767d\u9ed2\u3092\u53cd\u8ee2\u3055\u305b\u3066\u30010.0\u301c1.0\u306b\u6b63\u898f\u5316\u3057\u307e\u3059\u3002 \u3053\u308c\u3067\u5165\u529b\u30c7\u30fc\u30bf\u306f\u3067\u304d\u307e\u3057\u305f\u3002 myimage = ( 255 - myimage ) / 255 \u305d\u308c\u3067\u306f\u3001\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002(\u6b63\u3057\u304f\u4e88\u60f3\u3067\u304d\u308b\u304b\u306a\uff1f) model . predict ( myimage )","title":"Pillow/PIL \u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"mnist/#_8","text":"\u4eba\u5de5\u77e5\u80fd\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u7d44\u307f\u8fbc\u3080\u3068\u304d\u306f\u3001 \u6bce\u56de\u5b66\u7fd2\u3057\u306a\u304f\u3066\u6e08\u3080\u3088\u3046\u306b\u30e2\u30c7\u30eb\u3060\u3051\u3001\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3059\u3002 pickle\u5f62\u5f0f Python\u3067\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u4e00\u822c\u7684\u306a\u65b9\u6cd5\u3067\u3059\u3002 \u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff08\u76f4\u5217\u5316\uff09 \u3068\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306b\u304a\u3044\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30d0\u30a4\u30c8\u5217\u306e\u30c7\u30fc\u30bf\u306b\u8868\u73fe\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u9006\u306b\u3001 \u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff08\u975e\u76f4\u5217\u5316\uff09 \u3068\u306f\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u30d0\u30a4\u30c8\u5217\u304b\u3089\u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5fa9\u5143\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58 import pickle with open ( 'mnist-model.pickle' , mode = 'wb' ) as fp : pickle . dump ( model , fp ) \u4fdd\u5b58\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u5927\u304d\u3055\u306f1.6M\u30d0\u30a4\u30c8\u7a0b\u5ea6\u306b\u306a\u308a\u307e\u3059\u3002 \uff08\u3082\u3061\u308d\u3093\u3001\u5b66\u7fd2\u3057\u305f\u30c7\u30fc\u30bf\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3082\u3088\u308a\u307e\u3059\u3002\uff09 \u30e2\u30c7\u30eb\u306e\u8aad\u307f\u8fbc\u307f import pickle with open ( 'mnist-model.pickle' , mode = 'rb' ) as fp : model = pickle . load ( fp ) model . predict ( myimage )","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3078\u306e\u7d44\u307f\u8fbc\u307f"},{"location":"mnist/#_9","text":"MNIST\u306f\u3001\u7df4\u7fd2\u7528\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3082\u7c21\u5358\u306b\u9ad8\u3044\u7cbe\u5ea6\u304c\u5f97\u3089\u308c\u308b\u306e\u3067\u3001\u3042\u307e\u308a\u7df4\u7fd2\u306b\u306a\u3089\u306a\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \uff08\u6a5f\u68b0\u5b66\u7fd2\u306e\u9032\u5316\u306f\u6050\u308d\u3057\u3044\u3067\u3059\u306d\u3002\uff09 \u53c2\u8003\u8cc7\u6599 \u3068\u3044\u3046\u308f\u3051\u3067\u3001MNIST\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u306e\u5206\u985e\u30e2\u30c7\u30eb\u3082\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u7df4\u7fd2"},{"location":"mnist/#fashion-mnist","text":"Fashin-MNIST \u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u3001 \u30d5\u30a1\u30c3\u30b7\u30e7\u30f3\u30a2\u30a4\u30c6\u30e0\u306e\u5206\u985e\u3092\u3057\u3066\u307f\u3088\u3046\u3002 \u30c7\u30fc\u30bf\u306e\u5165\u624b\u65b9\u6cd5 from sklearn.datasets import fetch_openml fashion_mnist = fetch_openml ( 'Fashion-MNIST' , as_frame = False )","title":"Fashion-MNIST"},{"location":"mnist/#cifar-10","text":"CIFAR-10\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff08Canadian Institute For Advanced Research)\u306f\u3001\u6b21\u306e\u30e9\u30d9\u30eb\u304c\u3064\u3051\u3089\u308c\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002 \u30e9\u30d9\u30eb\u300c0\u300d\uff1a airplane\uff08\u98db\u884c\u6a5f\uff09 \u30e9\u30d9\u30eb\u300c1\u300d\uff1a automobile\uff08\u81ea\u52d5\u8eca\uff09 \u30e9\u30d9\u30eb\u300c2\u300d\uff1a bird\uff08\u9ce5\uff09 \u30e9\u30d9\u30eb\u300c3\u300d\uff1a cat\uff08\u732b\uff09 \u30e9\u30d9\u30eb\u300c4\u300d\uff1a deer\uff08\u9e7f\uff09 \u30e9\u30d9\u30eb\u300c5\u300d\uff1a dog\uff08\u72ac\uff09 \u30e9\u30d9\u30eb\u300c6\u300d\uff1a frog\uff08\u30ab\u30a8\u30eb\uff09 \u30e9\u30d9\u30eb\u300c7\u300d\uff1a horse\uff08\u99ac\uff09 \u30e9\u30d9\u30eb\u300c8\u300d\uff1a ship\uff08\u8239\uff09 \u30e9\u30d9\u30eb\u300c9\u300d\uff1a truck\uff08\u30c8\u30e9\u30c3\u30af\uff09 Alex Krizhevsky\u6c0f\uff0fVinod Nair\u6c0f\uff0fGeoffrey Hinton\u6c0f\u306b\u3088\u3063\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u8a8d\u8b58\u7528\u753b\u50cf\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u300c80 Million Tiny Images\u300d\u304b\u3089\u53ce\u96c6\u3055\u308c\u3066\u4f5c\u6210\u3055\u308c\u305f\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u7531\u6765\u3057\u3066\u3044\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306e\u5165\u624b\u65b9\u6cd5 from sklearn.datasets import fetch_openml cifar10 = fetch_openml ( 'CIFAR_10' , as_frame = False ) \u30ab\u30e9\u30fc\u753b\u50cf\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3088\u308a\u753b\u50cf\u8a8d\u8b58\u306e\u96f0\u56f2\u6c17\u304c\u697d\u3057\u3081\u308b\u30c7\u30fc\u30bf\u3067\u3059\u3002 \u305f\u3060\u3057\u3001\u30c7\u30fc\u30bf\u306e\u6b21\u5143\u304c\u5927\u304d\u304f\u306a\u308a\u3059\u304e\u308b\u306e\u3067\u3001\u305d\u308d\u305d\u308dPyTorch\u3084Tensorflow, Keras\u3092\u4f7f\u308f\u306a\u3044\u3068\u82e6\u3057\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002","title":"CIFAR-10"},{"location":"nlp/","text":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306b\u3080\u3051\u3066 # \u753b\u50cf\u8a8d\u8b58\u306f\u3001\u3082\u3068\u3082\u3068\u753b\u50cf\u30c7\u30fc\u30bf\u304c\u591a\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u3001\u3088\u304f\u4f3c\u305f\u753b\u50cf\u304c\u8fd1\u3044\u30d9\u30af\u30c8\u30eb\u3067\u8868\u73fe\u3055\u308c\u308b\u306a\u3069\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u51e6\u7406\u3057\u3084\u3059\u3044\u524d\u63d0\u304c\u6574\u3063\u3066\u3044\u307e\u3057\u305f\u3002 \u4e00\u65b9\u3001\u81ea\u7136\u8a00\u8a9e\u306a\u3069\u306e\u30c6\u30ad\u30b9\u30c8\u306f\u3001\u6587\u5b57\u30b3\u30fc\u30c9\u304c\u8fd1\u304f\u3066\u3082\u610f\u5473\u304c\u8fd1\u3044\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u81ea\u7136\u8a00\u8a9e\u3092\u6a5f\u68b0\u5b66\u7fd2\u3067\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u7279\u5fb4\u91cf\u3092\u591a\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3067\u3046\u307e\u304f\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u9375\u306b\u306a\u308a\u307e\u3059\u3002 AI\u5165\u9580\u306e\u307e\u3068\u3081\u3068\u3057\u3066\u3001\u81ea\u7136\u8a00\u8a9e\u3092\u6a5f\u68b0\u5b66\u7fd2\u3067\u6271\u3046\u65b9\u6cd5\u3092\u307f\u3066\u3044\u304d\u307e\u3059\u3002 \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6e96\u5099 import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try: import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError: !pip install japanize_matplotlib import japanize_matplotlib sns.set(font=\"IPAexGothic\") #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a \u5f62\u614b\u7d20\u89e3\u6790 # \u8a00\u8a9e\u306b\u304a\u3051\u308b\u610f\u5473\u306e\u57fa\u672c\u5358\u4f4d\u306f \u8a9e(word) \u3067\u3059\u3002 \u307e\u305a\u3001\u8a9e\u3092\u53d6\u308a\u51fa\u3059\u65b9\u6cd5\u304b\u3089\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u82f1\u8a9e\u3068\u65e5\u672c\u8a9e # \u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306f\u3001\u8a00\u8a9e\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u96e3\u3057\u3055\u3084\u6271\u3044\u65b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002 (\u82f1\u8a9e\u6587) I bought a book (\u65e5\u672c\u8a9e\u6587) \u79c1\u306f\u672c\u3092\u8cb7\u3063\u305f \u82f1\u8a9e\u306f\u3001\u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u305f\u3082\u306e\u3092\u8a9e\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001Python \u306e\u6a19\u6e96\u6587\u5b57\u5217\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u3067\u3001\u7c21\u5358\u306b\u8a9e\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u82f1\u8a9e\u306e\u5b57\u53e5\u89e3\u6790 s = \"I bought a book\" s.split() \u65e5\u672c\u8a9e\u3067\u306f\u3001\u307e\u305a\u8a9e\u306e\u533a\u5207\u308a\u3092\u5224\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u3053\u306e\u8a9e\u306e\u533a\u5207\u308a\u3092\u5224\u5b9a\u3059\u308b\u306e\u304c \u304b\u306a\u308a\u306e\u96e3\u51e6\u7406 \u3068\u306a\u308a\u307e\u3059\u3002 \u305d\u3053\u3067\u3001\u5c02\u7528\u306e\u30c4\u30fc\u30eb/\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002 \u5f62\u614b\u7d20\u89e3\u6790\u30c4\u30fc\u30eb/\u30e9\u30a4\u30d6\u30e9\u30ea \u65e5\u672c\u8a9e\u6587\u304b\u3089\u3001\u8a9e\u306e\u533a\u5207\u308a\u3092\u6c7a\u5b9a\u3059\u308b\u30c4\u30fc\u30eb/\u30e9\u30a4\u30d6\u30e9\u30ea spaCy/GINZA # spaCy \u306f\u3001Explosion AI \u793e\u306e\u958b\u767a\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002 2019 \u5e74\u306b\u3001 \u30ea\u30af\u30eb\u30fc\u30c8 AI \u7814\u7a76\u6240\u3068\u56fd\u7acb\u8a00\u8a9e\u7814\u7a76\u6240\u306e\u7814\u7a76\u6210\u679c\u3067\u3042\u308b GiNZA \u304c\u767b\u5834\u3057\u3001\u5b9f\u7528\u7684\u306a\u65e5\u672c\u8a9e\u51e6\u7406\u304c\u624b\u8efd\u306b\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u307e\u305a\u306f\u3001GiNZA \u306e\u5c0e\u5165\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002 pip install ginza \u3092\u5165\u529b\u3059\u308b\u3060\u3051\u3067\u3001 \u5f62\u614b\u7d20\u89e3\u6790\u3082\u542b\u3081\u3001\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306b\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u307e\u3068\u3081\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002 Colab\u4e0a\u3067Ginza\u306e\u6e96\u5099 ! pip install ginza import pkg_resources , imp imp . reload ( pkg_resources ) \u65e5\u672c\u8a9e\u6587\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u6b21\u306e\u901a\u308a\u3001\u4f7f\u3044\u307e\u3059\u3002 \u5f62\u614b\u7d20\u89e3\u6790\u306b\u3088\u308b\u5b57\u53e5\u89e3\u6790 import spacy nlp = spacy . load ( 'ja_ginza' ) doc = nlp ( \"\u79c1\u306f\u672c\u3092\u8cb7\u3063\u305f\" ) #\u5f62\u614b\u7d20\u89e3\u6790 for word in doc : print ( word . i , word . orth_ , word . lemma_ , word . pos_ , word . tag_ ) \u5f62\u614b\u7d20\u89e3\u6790\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u305f\u5404\u5b57\u53e5(word)\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u60c5\u5831\u3092\u3082\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u4e2d\u304b\u3089\u5fc5\u8981\u306a\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30d1\u30c6\u30a3 \u60c5\u5831 orth_ \u5165\u529b\u8a9e lemma_ \u539f\u578b pos_ \u54c1\u8a5e(Part of Speech) tag_ \u54c1\u8a5e\u30bf\u30b0 vector \u5358\u8a9e\u30d9\u30af\u30c8\u30eb \u65e5\u672c\u8a9e\u6587\u3092\u5358\u8a9e\u5358\u4f4d\u306b\u5206\u5272\u3059\u308b\u95a2\u6570 wakachi(s) \u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 def wakachi(s): doc = nlp(s) return [word.lemma_ for word in doc] # word.lemma_ \u306f\u6a19\u6e96\u5f62 print(wakachi('\u79c1\u306f\u672c\u3092\u8cb7\u3063\u305f')) (\u6642\u9593\u304c\u3042\u3063\u305f\u3089\uff09Let's try \u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3068\u5f62\u614b\u7d20\u89e3\u6790\u306e\u826f\u3044\u7df4\u7fd2\u554f\u984c\u306f\u3001\u300c\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff11\uff10\uff10\u672c\u30ce\u30c3\u30af\u300d\u306b\u3042\u308a\u307e\u3059\u3002 http://www.cl.ecei.tohoku.ac.jp/nlp100/ Web\u4e0a\u306b\u306f\u3001\u89e3\u8aac\u8a18\u4e8b\u304c\u305f\u304f\u3055\u3093\u63b2\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u89e3\u3044\u3066\u307f\u308b\u3068\u5b9f\u529b\u304c\u3064\u304d\u307e\u3059\u3002 \u30a2\u30f3\u30b1\u30fc\u30c8\u5206\u6790 # \u4e0d\u52d5\u7523\u5c4b\u306b\u3088\u308b\u300c\u307e\u3061\u3065\u304f\u308a\u306b\u95a2\u3059\u308b\u30a2\u30f3\u30b1\u30fc\u30c8\u300d\u306b\u57fa\u3065\u3044\u3066\u3001\u30a2\u30f3\u30b1\u30fc\u30c8\u89e3\u6790\u3092\u8a66\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u306e\u5165\u624b \u672c\u30c7\u30fc\u30bf\u306f\u3001\u4e0b\u5c71\u3089\u306b\u3088\u308b\u300c Python \u5b9f\u8df5\u30c7\u30fc\u30bf\u5206\u6790 100 \u672c\u30ce\u30c3\u30af \u300d\u304b\u3089\u8b1b\u7fa9\u7528\u306b\u7de8\u96c6\u3057\u305f\u3082\u306e\u3092\u5229\u7528\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306eURL https://KuramitsuLab.github.io/df/survey.csv \u30b3\u30e1\u30f3\u30c8\u3092\u773a\u3081\u308b # \u4eca\u307e\u3067\u3001\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u3092\u6271\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001 \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u306f\u3001\u81ea\u7531\u8a18\u8ff0\u5f62\u5f0f\u306e\u30b3\u30e1\u30f3\u30c8\u3001 \u6e80\u8db3\u5ea6(5\u6bb5\u968e\u8a55\u4fa1: 1 \u4e0d\u6e80 - 5 \u6e80\u8db3)\u306a\u3069\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 df = pd.read_csv(\"survey.csv\") df.head() #\u6700\u521d\u306e5\u884c\u3092\u8868\u793a \u307e\u305a\u3001\u30a2\u30f3\u30b1\u30fc\u30c8\u4e2d\u306e\u30b3\u30e1\u30f3\u30c8\u306e\u5206\u91cf\u3092\u628a\u63e1\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6587\u5b57\u6570\u3092\u6570\u3048\u3066\u3001\u65b0\u3057\u3044\u30ab\u30e9\u30e0( \u6587\u5b57\u6570 )\u3092\u4f5c\u3063\u3066\u683c\u7d0d\u3057\u307e\u3059\u3002 \u30b3\u30e1\u30f3\u30c8\u306e\u6587\u5b57\u6570 plt.hist(df[\"\u30b3\u30e1\u30f3\u30c8\"].str.len()) plt.xlabel('\u6587\u5b57\u6570') \u7570\u5e38\u306b\u9577\u3044\u30b3\u30e1\u30f3\u30c8\u3082\u3042\u308a\u307e\u3059\u306d\u3002 \u5358\u8a9e\u30ec\u30d9\u30eb\u306e\u89e3\u6790 # \u30b3\u30e1\u30f3\u30c8\u304b\u3089\u5358\u8a9e\u3092\u62bd\u51fa\u3057\u3066\u3001\u3069\u306e\u3088\u3046\u306a\u5358\u8a9e\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u3053\u3053\u3067\u306f\u3001\u5f62\u614b\u7d20\u89e3\u6790\u306e\u54c1\u8a5e\u60c5\u5831( _pos )\u304b\u3089\u3001\u52d5\u8a5e\u3001\u5f62\u5bb9\u8a5e\u3001\u540d\u8a5e\u3060\u3051\u306b\u7740\u76ee\u3057\u3066\u307f\u307e\u3059\u3002 \u983b\u51fa\u5358\u8a9e\u3092\u898b\u308b words = [] for text in df [ \"\u30b3\u30e1\u30f3\u30c8\" ]: doc = nlp ( text ) for word in doc : # \u52d5\u8a5e(VERB), \u540d\u8a5e(NOUN), \u5f62\u5bb9\u8a5e(ADJ)\u306e\u307f\u62bd\u51fa if word . pos_ == 'VERB' or word . pos_ == 'NOUN' or word . pos_ == 'ADJ' : words . append ( word . lemma_ ) #\u6a19\u6e96\u5f62\u306b\u5909\u63db\u3059\u308b print ( len ( words )) print ( words [: 30 ]) #\u5148\u982d30\u8a9e\u3060\u3051 \u3053\u308c\u3067\u3001\u30b3\u30e1\u30f3\u30c8\u6587\u306e\u4e2d\u3067\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u540d\u8a5e\u3001\u52d5\u8a5e\u3001\u5f62\u5bb9\u8a5e\u3092\u3059\u3079\u3066\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002 !!! note\u3000\u201d\u5358\u8a9e\u3092\u62bd\u51fa\u3059\u308b\u30b3\u30c4\" \u6a19\u6e96\u5f62\u5909\u63db: \u6d3b\u7528\u306e\u3042\u308b\u5358\u8a9e\uff08\u4f8b. \u300c\u8cb7\u3063\u305f\u300d\uff09\u306f\u3001\u8cb7\u3046\u306e\u3088\u3046\u306b\u6a19\u6e96\u5f62\u306b\u5909\u63db\u3059\u308b \u30b9\u30c8\u30c3\u30d7\u30ef\u30fc\u30c9\u9664\u5916 : \u89e3\u6790\u306e\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u4e0d\u8981\u306a\u8a18\u53f7\u3084\u5358\u8a9e\u3092\u53d6\u308a\u9664\u304f \u5358\u8a9e\u306e\u983b\u51fa\u5ea6\u3068\u8996\u899a\u5316 # \u5358\u8a9e\u306e\u62bd\u51fa\u304c\u3067\u304d\u305f\u3089\u3001\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u3057\u3066\u3001\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u51fa\u5ea6\u304b\u3089\u8abf\u3079\u3066\u3044\u304d\u307e\u3059\u3002 \u3053\u3053\u306f\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u308a\u3001 value_counts() \u3067\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002 pd.DataFrame({\"words\":words}).value_counts() \u30ef\u30fc\u30c9\u30af\u30e9\u30a6\u30c9\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u8996\u899a\u7684\u306b\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\u3061\u3087\u3063\u3068\u5bc4\u308a\u9053\u3092\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u307e\u305a\u3001\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\uff08\u3053\u308c\u304c\u306a\u3044\u3068\u6587\u5b57\u5316\u3051\u3057\u307e\u3059\u3002\uff09 Colab\u4e0a\u3067\u306eIPA\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb !apt-get -y install fonts-ipafont-gothic ## !pip install wordcloud from wordcloud import WordCloud fpath = '/usr/share/fonts/truetype/fonts-japanese-gothic.ttf' #fpath = 'fonts-japanese-gothic.ttf' word_chain = ' '.join(words) model = WordCloud(width=800, height=600, background_color='white', colormap='bone', font_path=fpath) W = model.generate(' '.join(words)) plt.imshow(W) plt.axis('off') plt.show() \u30a2\u30f3\u30b1\u30fc\u30c8\u306e\u6e80\u8db3\u5ea6\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u3066\u3044\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u898b\u3048\u3066\u304d\u307e\u3057\u305f\u3002 \u3057\u304b\u3057\u3001\u307e\u3060\u3069\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u30d7\u30e9\u30b9\u306e\u8a55\u4fa1\u306a\u306e\u304b\u3001\u30de\u30a4\u30ca\u30b9\u306e\u8a55\u4fa1\u306a\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002 \u6e80\u8db3\u5ea6\u306e\u9ad8\u3044\u30ad\u30fc\u30ef\u30fc\u30c9 # \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306e\u7d20\u6674\u3089\u3057\u3044\u70b9\u306f\u3001\u4e0d\u52d5\u7523\u306e\u6e80\u8db3\u5ea6\u304c 5 \u6bb5\u968e\u8a55\u4fa1\u3067\u56de\u7b54\u3055\u308c\u3066\u3044\u308b\u70b9\u3067\u3059\u3002 \u5404\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u3053\u306e5\u6bb5\u968e\u8a55\u4fa1\u3092\u7d10\u4ed8\u3051\u3066\u307f\u308b\u3068\u3001\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u6e80\u8db3\u5ea6\u304c\u898b\u3048\u3066\u6765\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u30b3\u30e1\u30f3\u30c8\u5185\u306e\u5358\u8a9e\u3068\u6e80\u8db3\u5ea6\u3092\u30da\u30a2\u306b\u3057\u3066\u53d6\u308a\u51fa\u3057\u3066\u307f\u307e\u3059\u3002 words = [] scores = [] for text, score in zip(df[\"\u30b3\u30e1\u30f3\u30c8\"], df[\"\u6e80\u8db3\u5ea6\"]): doc = nlp(text) for word in doc: if word.pos_ in ['VERB', 'NOUN', 'ADJ']: words.append(word.lemma_) scores.append(score) print(words[:30]) print(scores[:30]) Pandas \u3092\u4f7f\u3063\u3066\u8868\u30c7\u30fc\u30bf\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u51fa\u73fe\u6570 1\u56de\u306e\u30ab\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u3001 groupby \u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u6e80\u8db3\u5ea6\u306f\u5e73\u5747\u5024( np.nean )\u3092\u3068\u3063\u3066\u3001\u96c6\u8a08\u3057\u307e\u3059\u3002 keyword = pd.DataFrame({\"\u30ad\u30fc\u30ef\u30fc\u30c9\": words, \"\u6e80\u8db3\u5ea6\": scores, \"\u51fa\u73fe\u6570\": [1]*len(words)}) keyword.groupby('\u30ad\u30fc\u30ef\u30fc\u30c9').agg({'\u6e80\u8db3\u5ea6': np.mean, '\u51fa\u73fe\u6570': sum}).sort_values(by='\u51fa\u73fe\u6570') Let's try \u6e80\u8db3\u5ea6\u306e\u9ad8\u3044\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u6e80\u8db3\u5ea6\u306e\u4f4e\u3044\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u30c8\u30c3\u30d7 5\u3092\u51fa\u3057\u3066\u307f\u3088\u3046 \u4eca\u56de\u306e\u5206\u6790\u306f\u3001\u51fa\u73fe\u983b\u5ea6\u306e\u3042\u307e\u308a\u306b\u4f4e\u3044\u5358\u8a9e\u3092\u9664\u5916\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3002 \u3053\u306e\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8(\u5206\u6790\u8005)\u306e\u30bb\u30f3\u30b9\u3067\u3001\u7d50\u679c\u306f\u5c11\u3057\u5909\u308f\u308a\u307e\u3059\u3002 \u6975\u6027\u8f9e\u66f8\u3068\u30bb\u30f3\u30c6\u30a3\u30e1\u30f3\u30c8\u89e3\u6790 \u6975\u6027\u8f9e\u66f8\u306f\u3001\u3042\u308b\u5358\u8a9e\u304c\u4e00\u822c\u7684\u306b\u30cd\u30ac\u30c6\u30a3\u30d6\u306a\u306e\u304b\u3001 \u30dd\u30b8\u30c6\u30a3\u30d6\u306a\u306e\u304b\u3092\u3001-1\uff08\u30cd\u30ac\u30c6\u30a3\u30d6\uff09\u304b\u30891\uff08\u30dd\u30b8\u30c6\u30a3\u30d6\uff09\u307e\u3067\u306e\u30b9\u30b3\u30a2\u306e\u5f62\u3067\u8868\u73fe\u3057\u305f\u3082\u306e\u3067\u3059\u3002 \u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8 \uff1a\u6771\u5317\u5927\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4\u304c\u516c\u958b \u5358\u8a9e\u611f\u60c5\u6975\u6027\u5bfe\u5fdc\u8868 \uff1a\u6771\u5de5\u5927\u306e\u9ad8\u6751\u6559\u6388\u304c\u516c\u958b \u30bb\u30f3\u30c6\u30a3\u30e1\u30f3\u30c8\u5206\u6790\u306a\u3069\u306b\u4fbf\u5229\u3067\u3059\u3002\uff08\u4eca\u56de\u306e\u6e80\u8db3\u3092\u6975\u6027\u8f9e\u66f8\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\uff09 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af # \u4eca\u56de\u306e\u30a2\u30f3\u30b1\u30fc\u30c8\u3067\u306f\u3001\u81ea\u7531\u5f62\u5f0f\u306e\u30b3\u30e1\u30f3\u30c8\u3068\u6e80\u8db3\u5ea6\u3092\u540c\u6642\u306b\u56de\u7b54\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u305f\u305f\u3081\u3001\u6e80 \u8db3\u5ea6\u306e\u9ad8\u3044\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u62bd\u51fa\u3067\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u30b3\u30e1\u30f3\u30c8\u6587\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u30b3\u30e1\u30f3\u30c8\u9593 \u306e\u985e\u4f3c\u5ea6\u304c\u6c42\u3081\u3089\u308c\u308b\u3053\u3068\u3082\u898b\u3048\u3066\u304d\u307e\u3057\u305f\u3002 \u7591\u554f\uff08\u6587\u66f8\u304b\u3089\u306e\u6e80\u8db3\u5ea6\uff09 \u6e80\u8db3\u5ea6\u306f\u4e88\u6e2c\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u304b? \u3053\u308c\u306f\u3001\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30fc\u30c8\u304b\u3089(\u63a1\u7528\u5f8c\u306e)\u6e80\u8db3\u5ea6\u306f\u4e88\u60f3\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u304b?\u3068\u540c\u3058\u8cea\u554f\u306b\u306a\u308a\u307e\u3059\u3002 \u7686\u3055\u3093\u306f AI \u304c\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30fc\u30c8\u3092\u5224\u5b9a\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u5642\u3092\u805e\u3044\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u306d\u3002 \u6f14\u7fd2\uff08\u30a8\u30f3\u30c8\u30ea\u30b7\u30fc\u30c8\uff09 \u4f01\u696d\u304c\u3069\u306e\u3088\u3046\u306b AI \u3092\u6d3b\u7528\u3057\u3066\u3001\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30fc\u30c8\u3092\u5206\u6790\u3057\u3066\u3044\u308b\u304b\u8003\u5bdf\u3057\u3066\u307f\u3088\u3046\u3002 \uff08\u53ef\u80fd\u3067\u3042\u308c\u3070\u3001\u4eca\u56de\u306e\u30b3\u30e1\u30f3\u30c8\u6587\u304b\u3089\u6e80\u8db3\u5ea6\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u307f\u3088\u3046\u3002\uff09 \u4eca\u307e\u3067\u5b66\u3093\u3067\u304d\u305f\u77e5\u8b58\u3092\u7dcf\u52d5\u54e1\u3057\u3066\u3001\u3082\u3057\u8db3\u308a\u306a\u304b\u3063\u305f\u3089\u8ffd\u52a0\u3067\u8abf\u67fb\u3057\u3066\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"},{"location":"nlp/#_1","text":"\u753b\u50cf\u8a8d\u8b58\u306f\u3001\u3082\u3068\u3082\u3068\u753b\u50cf\u30c7\u30fc\u30bf\u304c\u591a\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u3001\u3088\u304f\u4f3c\u305f\u753b\u50cf\u304c\u8fd1\u3044\u30d9\u30af\u30c8\u30eb\u3067\u8868\u73fe\u3055\u308c\u308b\u306a\u3069\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u51e6\u7406\u3057\u3084\u3059\u3044\u524d\u63d0\u304c\u6574\u3063\u3066\u3044\u307e\u3057\u305f\u3002 \u4e00\u65b9\u3001\u81ea\u7136\u8a00\u8a9e\u306a\u3069\u306e\u30c6\u30ad\u30b9\u30c8\u306f\u3001\u6587\u5b57\u30b3\u30fc\u30c9\u304c\u8fd1\u304f\u3066\u3082\u610f\u5473\u304c\u8fd1\u3044\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u81ea\u7136\u8a00\u8a9e\u3092\u6a5f\u68b0\u5b66\u7fd2\u3067\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u7279\u5fb4\u91cf\u3092\u591a\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3067\u3046\u307e\u304f\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u9375\u306b\u306a\u308a\u307e\u3059\u3002 AI\u5165\u9580\u306e\u307e\u3068\u3081\u3068\u3057\u3066\u3001\u81ea\u7136\u8a00\u8a9e\u3092\u6a5f\u68b0\u5b66\u7fd2\u3067\u6271\u3046\u65b9\u6cd5\u3092\u307f\u3066\u3044\u304d\u307e\u3059\u3002 \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6e96\u5099 import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try: import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError: !pip install japanize_matplotlib import japanize_matplotlib sns.set(font=\"IPAexGothic\") #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a","title":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306b\u3080\u3051\u3066"},{"location":"nlp/#_2","text":"\u8a00\u8a9e\u306b\u304a\u3051\u308b\u610f\u5473\u306e\u57fa\u672c\u5358\u4f4d\u306f \u8a9e(word) \u3067\u3059\u3002 \u307e\u305a\u3001\u8a9e\u3092\u53d6\u308a\u51fa\u3059\u65b9\u6cd5\u304b\u3089\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002","title":"\u5f62\u614b\u7d20\u89e3\u6790"},{"location":"nlp/#_3","text":"\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306f\u3001\u8a00\u8a9e\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u96e3\u3057\u3055\u3084\u6271\u3044\u65b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002 (\u82f1\u8a9e\u6587) I bought a book (\u65e5\u672c\u8a9e\u6587) \u79c1\u306f\u672c\u3092\u8cb7\u3063\u305f \u82f1\u8a9e\u306f\u3001\u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u305f\u3082\u306e\u3092\u8a9e\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001Python \u306e\u6a19\u6e96\u6587\u5b57\u5217\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u3067\u3001\u7c21\u5358\u306b\u8a9e\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u82f1\u8a9e\u306e\u5b57\u53e5\u89e3\u6790 s = \"I bought a book\" s.split() \u65e5\u672c\u8a9e\u3067\u306f\u3001\u307e\u305a\u8a9e\u306e\u533a\u5207\u308a\u3092\u5224\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u3053\u306e\u8a9e\u306e\u533a\u5207\u308a\u3092\u5224\u5b9a\u3059\u308b\u306e\u304c \u304b\u306a\u308a\u306e\u96e3\u51e6\u7406 \u3068\u306a\u308a\u307e\u3059\u3002 \u305d\u3053\u3067\u3001\u5c02\u7528\u306e\u30c4\u30fc\u30eb/\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002 \u5f62\u614b\u7d20\u89e3\u6790\u30c4\u30fc\u30eb/\u30e9\u30a4\u30d6\u30e9\u30ea \u65e5\u672c\u8a9e\u6587\u304b\u3089\u3001\u8a9e\u306e\u533a\u5207\u308a\u3092\u6c7a\u5b9a\u3059\u308b\u30c4\u30fc\u30eb/\u30e9\u30a4\u30d6\u30e9\u30ea","title":"\u82f1\u8a9e\u3068\u65e5\u672c\u8a9e"},{"location":"nlp/#spacyginza","text":"spaCy \u306f\u3001Explosion AI \u793e\u306e\u958b\u767a\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002 2019 \u5e74\u306b\u3001 \u30ea\u30af\u30eb\u30fc\u30c8 AI \u7814\u7a76\u6240\u3068\u56fd\u7acb\u8a00\u8a9e\u7814\u7a76\u6240\u306e\u7814\u7a76\u6210\u679c\u3067\u3042\u308b GiNZA \u304c\u767b\u5834\u3057\u3001\u5b9f\u7528\u7684\u306a\u65e5\u672c\u8a9e\u51e6\u7406\u304c\u624b\u8efd\u306b\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u307e\u305a\u306f\u3001GiNZA \u306e\u5c0e\u5165\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002 pip install ginza \u3092\u5165\u529b\u3059\u308b\u3060\u3051\u3067\u3001 \u5f62\u614b\u7d20\u89e3\u6790\u3082\u542b\u3081\u3001\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306b\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u307e\u3068\u3081\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002 Colab\u4e0a\u3067Ginza\u306e\u6e96\u5099 ! pip install ginza import pkg_resources , imp imp . reload ( pkg_resources ) \u65e5\u672c\u8a9e\u6587\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u6b21\u306e\u901a\u308a\u3001\u4f7f\u3044\u307e\u3059\u3002 \u5f62\u614b\u7d20\u89e3\u6790\u306b\u3088\u308b\u5b57\u53e5\u89e3\u6790 import spacy nlp = spacy . load ( 'ja_ginza' ) doc = nlp ( \"\u79c1\u306f\u672c\u3092\u8cb7\u3063\u305f\" ) #\u5f62\u614b\u7d20\u89e3\u6790 for word in doc : print ( word . i , word . orth_ , word . lemma_ , word . pos_ , word . tag_ ) \u5f62\u614b\u7d20\u89e3\u6790\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u305f\u5404\u5b57\u53e5(word)\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u60c5\u5831\u3092\u3082\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u4e2d\u304b\u3089\u5fc5\u8981\u306a\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u3002 \u30d7\u30ed\u30d1\u30c6\u30a3 \u60c5\u5831 orth_ \u5165\u529b\u8a9e lemma_ \u539f\u578b pos_ \u54c1\u8a5e(Part of Speech) tag_ \u54c1\u8a5e\u30bf\u30b0 vector \u5358\u8a9e\u30d9\u30af\u30c8\u30eb \u65e5\u672c\u8a9e\u6587\u3092\u5358\u8a9e\u5358\u4f4d\u306b\u5206\u5272\u3059\u308b\u95a2\u6570 wakachi(s) \u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 def wakachi(s): doc = nlp(s) return [word.lemma_ for word in doc] # word.lemma_ \u306f\u6a19\u6e96\u5f62 print(wakachi('\u79c1\u306f\u672c\u3092\u8cb7\u3063\u305f')) (\u6642\u9593\u304c\u3042\u3063\u305f\u3089\uff09Let's try \u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3068\u5f62\u614b\u7d20\u89e3\u6790\u306e\u826f\u3044\u7df4\u7fd2\u554f\u984c\u306f\u3001\u300c\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\uff11\uff10\uff10\u672c\u30ce\u30c3\u30af\u300d\u306b\u3042\u308a\u307e\u3059\u3002 http://www.cl.ecei.tohoku.ac.jp/nlp100/ Web\u4e0a\u306b\u306f\u3001\u89e3\u8aac\u8a18\u4e8b\u304c\u305f\u304f\u3055\u3093\u63b2\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u89e3\u3044\u3066\u307f\u308b\u3068\u5b9f\u529b\u304c\u3064\u304d\u307e\u3059\u3002","title":"spaCy/GINZA"},{"location":"nlp/#_4","text":"\u4e0d\u52d5\u7523\u5c4b\u306b\u3088\u308b\u300c\u307e\u3061\u3065\u304f\u308a\u306b\u95a2\u3059\u308b\u30a2\u30f3\u30b1\u30fc\u30c8\u300d\u306b\u57fa\u3065\u3044\u3066\u3001\u30a2\u30f3\u30b1\u30fc\u30c8\u89e3\u6790\u3092\u8a66\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u306e\u5165\u624b \u672c\u30c7\u30fc\u30bf\u306f\u3001\u4e0b\u5c71\u3089\u306b\u3088\u308b\u300c Python \u5b9f\u8df5\u30c7\u30fc\u30bf\u5206\u6790 100 \u672c\u30ce\u30c3\u30af \u300d\u304b\u3089\u8b1b\u7fa9\u7528\u306b\u7de8\u96c6\u3057\u305f\u3082\u306e\u3092\u5229\u7528\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306eURL https://KuramitsuLab.github.io/df/survey.csv","title":"\u30a2\u30f3\u30b1\u30fc\u30c8\u5206\u6790"},{"location":"nlp/#_5","text":"\u4eca\u307e\u3067\u3001\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u3092\u6271\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001 \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u306f\u3001\u81ea\u7531\u8a18\u8ff0\u5f62\u5f0f\u306e\u30b3\u30e1\u30f3\u30c8\u3001 \u6e80\u8db3\u5ea6(5\u6bb5\u968e\u8a55\u4fa1: 1 \u4e0d\u6e80 - 5 \u6e80\u8db3)\u306a\u3069\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 df = pd.read_csv(\"survey.csv\") df.head() #\u6700\u521d\u306e5\u884c\u3092\u8868\u793a \u307e\u305a\u3001\u30a2\u30f3\u30b1\u30fc\u30c8\u4e2d\u306e\u30b3\u30e1\u30f3\u30c8\u306e\u5206\u91cf\u3092\u628a\u63e1\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u6587\u5b57\u6570\u3092\u6570\u3048\u3066\u3001\u65b0\u3057\u3044\u30ab\u30e9\u30e0( \u6587\u5b57\u6570 )\u3092\u4f5c\u3063\u3066\u683c\u7d0d\u3057\u307e\u3059\u3002 \u30b3\u30e1\u30f3\u30c8\u306e\u6587\u5b57\u6570 plt.hist(df[\"\u30b3\u30e1\u30f3\u30c8\"].str.len()) plt.xlabel('\u6587\u5b57\u6570') \u7570\u5e38\u306b\u9577\u3044\u30b3\u30e1\u30f3\u30c8\u3082\u3042\u308a\u307e\u3059\u306d\u3002","title":"\u30b3\u30e1\u30f3\u30c8\u3092\u773a\u3081\u308b"},{"location":"nlp/#_6","text":"\u30b3\u30e1\u30f3\u30c8\u304b\u3089\u5358\u8a9e\u3092\u62bd\u51fa\u3057\u3066\u3001\u3069\u306e\u3088\u3046\u306a\u5358\u8a9e\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u3053\u3053\u3067\u306f\u3001\u5f62\u614b\u7d20\u89e3\u6790\u306e\u54c1\u8a5e\u60c5\u5831( _pos )\u304b\u3089\u3001\u52d5\u8a5e\u3001\u5f62\u5bb9\u8a5e\u3001\u540d\u8a5e\u3060\u3051\u306b\u7740\u76ee\u3057\u3066\u307f\u307e\u3059\u3002 \u983b\u51fa\u5358\u8a9e\u3092\u898b\u308b words = [] for text in df [ \"\u30b3\u30e1\u30f3\u30c8\" ]: doc = nlp ( text ) for word in doc : # \u52d5\u8a5e(VERB), \u540d\u8a5e(NOUN), \u5f62\u5bb9\u8a5e(ADJ)\u306e\u307f\u62bd\u51fa if word . pos_ == 'VERB' or word . pos_ == 'NOUN' or word . pos_ == 'ADJ' : words . append ( word . lemma_ ) #\u6a19\u6e96\u5f62\u306b\u5909\u63db\u3059\u308b print ( len ( words )) print ( words [: 30 ]) #\u5148\u982d30\u8a9e\u3060\u3051 \u3053\u308c\u3067\u3001\u30b3\u30e1\u30f3\u30c8\u6587\u306e\u4e2d\u3067\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u540d\u8a5e\u3001\u52d5\u8a5e\u3001\u5f62\u5bb9\u8a5e\u3092\u3059\u3079\u3066\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002 !!! note\u3000\u201d\u5358\u8a9e\u3092\u62bd\u51fa\u3059\u308b\u30b3\u30c4\" \u6a19\u6e96\u5f62\u5909\u63db: \u6d3b\u7528\u306e\u3042\u308b\u5358\u8a9e\uff08\u4f8b. \u300c\u8cb7\u3063\u305f\u300d\uff09\u306f\u3001\u8cb7\u3046\u306e\u3088\u3046\u306b\u6a19\u6e96\u5f62\u306b\u5909\u63db\u3059\u308b \u30b9\u30c8\u30c3\u30d7\u30ef\u30fc\u30c9\u9664\u5916 : \u89e3\u6790\u306e\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u4e0d\u8981\u306a\u8a18\u53f7\u3084\u5358\u8a9e\u3092\u53d6\u308a\u9664\u304f","title":"\u5358\u8a9e\u30ec\u30d9\u30eb\u306e\u89e3\u6790"},{"location":"nlp/#_7","text":"\u5358\u8a9e\u306e\u62bd\u51fa\u304c\u3067\u304d\u305f\u3089\u3001\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u3068\u3057\u3066\u3001\u5358\u8a9e\u306e\u51fa\u73fe\u983b\u51fa\u5ea6\u304b\u3089\u8abf\u3079\u3066\u3044\u304d\u307e\u3059\u3002 \u3053\u3053\u306f\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u308a\u3001 value_counts() \u3067\u8abf\u3079\u3066\u307f\u307e\u3057\u3087\u3046\u3002 pd.DataFrame({\"words\":words}).value_counts() \u30ef\u30fc\u30c9\u30af\u30e9\u30a6\u30c9\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u8996\u899a\u7684\u306b\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\u3061\u3087\u3063\u3068\u5bc4\u308a\u9053\u3092\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u307e\u305a\u3001\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\uff08\u3053\u308c\u304c\u306a\u3044\u3068\u6587\u5b57\u5316\u3051\u3057\u307e\u3059\u3002\uff09 Colab\u4e0a\u3067\u306eIPA\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb !apt-get -y install fonts-ipafont-gothic ## !pip install wordcloud from wordcloud import WordCloud fpath = '/usr/share/fonts/truetype/fonts-japanese-gothic.ttf' #fpath = 'fonts-japanese-gothic.ttf' word_chain = ' '.join(words) model = WordCloud(width=800, height=600, background_color='white', colormap='bone', font_path=fpath) W = model.generate(' '.join(words)) plt.imshow(W) plt.axis('off') plt.show() \u30a2\u30f3\u30b1\u30fc\u30c8\u306e\u6e80\u8db3\u5ea6\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u3066\u3044\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u898b\u3048\u3066\u304d\u307e\u3057\u305f\u3002 \u3057\u304b\u3057\u3001\u307e\u3060\u3069\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u30d7\u30e9\u30b9\u306e\u8a55\u4fa1\u306a\u306e\u304b\u3001\u30de\u30a4\u30ca\u30b9\u306e\u8a55\u4fa1\u306a\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002","title":"\u5358\u8a9e\u306e\u983b\u51fa\u5ea6\u3068\u8996\u899a\u5316"},{"location":"nlp/#_8","text":"\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306e\u7d20\u6674\u3089\u3057\u3044\u70b9\u306f\u3001\u4e0d\u52d5\u7523\u306e\u6e80\u8db3\u5ea6\u304c 5 \u6bb5\u968e\u8a55\u4fa1\u3067\u56de\u7b54\u3055\u308c\u3066\u3044\u308b\u70b9\u3067\u3059\u3002 \u5404\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u3053\u306e5\u6bb5\u968e\u8a55\u4fa1\u3092\u7d10\u4ed8\u3051\u3066\u307f\u308b\u3068\u3001\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u6e80\u8db3\u5ea6\u304c\u898b\u3048\u3066\u6765\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u30b3\u30e1\u30f3\u30c8\u5185\u306e\u5358\u8a9e\u3068\u6e80\u8db3\u5ea6\u3092\u30da\u30a2\u306b\u3057\u3066\u53d6\u308a\u51fa\u3057\u3066\u307f\u307e\u3059\u3002 words = [] scores = [] for text, score in zip(df[\"\u30b3\u30e1\u30f3\u30c8\"], df[\"\u6e80\u8db3\u5ea6\"]): doc = nlp(text) for word in doc: if word.pos_ in ['VERB', 'NOUN', 'ADJ']: words.append(word.lemma_) scores.append(score) print(words[:30]) print(scores[:30]) Pandas \u3092\u4f7f\u3063\u3066\u8868\u30c7\u30fc\u30bf\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u51fa\u73fe\u6570 1\u56de\u306e\u30ab\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u3001 groupby \u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u6e80\u8db3\u5ea6\u306f\u5e73\u5747\u5024( np.nean )\u3092\u3068\u3063\u3066\u3001\u96c6\u8a08\u3057\u307e\u3059\u3002 keyword = pd.DataFrame({\"\u30ad\u30fc\u30ef\u30fc\u30c9\": words, \"\u6e80\u8db3\u5ea6\": scores, \"\u51fa\u73fe\u6570\": [1]*len(words)}) keyword.groupby('\u30ad\u30fc\u30ef\u30fc\u30c9').agg({'\u6e80\u8db3\u5ea6': np.mean, '\u51fa\u73fe\u6570': sum}).sort_values(by='\u51fa\u73fe\u6570') Let's try \u6e80\u8db3\u5ea6\u306e\u9ad8\u3044\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u6e80\u8db3\u5ea6\u306e\u4f4e\u3044\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u30c8\u30c3\u30d7 5\u3092\u51fa\u3057\u3066\u307f\u3088\u3046 \u4eca\u56de\u306e\u5206\u6790\u306f\u3001\u51fa\u73fe\u983b\u5ea6\u306e\u3042\u307e\u308a\u306b\u4f4e\u3044\u5358\u8a9e\u3092\u9664\u5916\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3002 \u3053\u306e\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8(\u5206\u6790\u8005)\u306e\u30bb\u30f3\u30b9\u3067\u3001\u7d50\u679c\u306f\u5c11\u3057\u5909\u308f\u308a\u307e\u3059\u3002 \u6975\u6027\u8f9e\u66f8\u3068\u30bb\u30f3\u30c6\u30a3\u30e1\u30f3\u30c8\u89e3\u6790 \u6975\u6027\u8f9e\u66f8\u306f\u3001\u3042\u308b\u5358\u8a9e\u304c\u4e00\u822c\u7684\u306b\u30cd\u30ac\u30c6\u30a3\u30d6\u306a\u306e\u304b\u3001 \u30dd\u30b8\u30c6\u30a3\u30d6\u306a\u306e\u304b\u3092\u3001-1\uff08\u30cd\u30ac\u30c6\u30a3\u30d6\uff09\u304b\u30891\uff08\u30dd\u30b8\u30c6\u30a3\u30d6\uff09\u307e\u3067\u306e\u30b9\u30b3\u30a2\u306e\u5f62\u3067\u8868\u73fe\u3057\u305f\u3082\u306e\u3067\u3059\u3002 \u65e5\u672c\u8a9e\u8a55\u4fa1\u6975\u6027\u8f9e\u66f8 \uff1a\u6771\u5317\u5927\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4\u304c\u516c\u958b \u5358\u8a9e\u611f\u60c5\u6975\u6027\u5bfe\u5fdc\u8868 \uff1a\u6771\u5de5\u5927\u306e\u9ad8\u6751\u6559\u6388\u304c\u516c\u958b \u30bb\u30f3\u30c6\u30a3\u30e1\u30f3\u30c8\u5206\u6790\u306a\u3069\u306b\u4fbf\u5229\u3067\u3059\u3002\uff08\u4eca\u56de\u306e\u6e80\u8db3\u3092\u6975\u6027\u8f9e\u66f8\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\uff09","title":"\u6e80\u8db3\u5ea6\u306e\u9ad8\u3044\u30ad\u30fc\u30ef\u30fc\u30c9"},{"location":"nlp/#_9","text":"\u4eca\u56de\u306e\u30a2\u30f3\u30b1\u30fc\u30c8\u3067\u306f\u3001\u81ea\u7531\u5f62\u5f0f\u306e\u30b3\u30e1\u30f3\u30c8\u3068\u6e80\u8db3\u5ea6\u3092\u540c\u6642\u306b\u56de\u7b54\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u305f\u305f\u3081\u3001\u6e80 \u8db3\u5ea6\u306e\u9ad8\u3044\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u62bd\u51fa\u3067\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u30b3\u30e1\u30f3\u30c8\u6587\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u30b3\u30e1\u30f3\u30c8\u9593 \u306e\u985e\u4f3c\u5ea6\u304c\u6c42\u3081\u3089\u308c\u308b\u3053\u3068\u3082\u898b\u3048\u3066\u304d\u307e\u3057\u305f\u3002 \u7591\u554f\uff08\u6587\u66f8\u304b\u3089\u306e\u6e80\u8db3\u5ea6\uff09 \u6e80\u8db3\u5ea6\u306f\u4e88\u6e2c\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u304b? \u3053\u308c\u306f\u3001\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30fc\u30c8\u304b\u3089(\u63a1\u7528\u5f8c\u306e)\u6e80\u8db3\u5ea6\u306f\u4e88\u60f3\u3067\u304d\u308b\u306e\u3067\u3057\u3087\u3046\u304b?\u3068\u540c\u3058\u8cea\u554f\u306b\u306a\u308a\u307e\u3059\u3002 \u7686\u3055\u3093\u306f AI \u304c\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30fc\u30c8\u3092\u5224\u5b9a\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u5642\u3092\u805e\u3044\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u306d\u3002 \u6f14\u7fd2\uff08\u30a8\u30f3\u30c8\u30ea\u30b7\u30fc\u30c8\uff09 \u4f01\u696d\u304c\u3069\u306e\u3088\u3046\u306b AI \u3092\u6d3b\u7528\u3057\u3066\u3001\u30a8\u30f3\u30c8\u30ea\u30fc\u30b7\u30fc\u30c8\u3092\u5206\u6790\u3057\u3066\u3044\u308b\u304b\u8003\u5bdf\u3057\u3066\u307f\u3088\u3046\u3002 \uff08\u53ef\u80fd\u3067\u3042\u308c\u3070\u3001\u4eca\u56de\u306e\u30b3\u30e1\u30f3\u30c8\u6587\u304b\u3089\u6e80\u8db3\u5ea6\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u307f\u3088\u3046\u3002\uff09 \u4eca\u307e\u3067\u5b66\u3093\u3067\u304d\u305f\u77e5\u8b58\u3092\u7dcf\u52d5\u54e1\u3057\u3066\u3001\u3082\u3057\u8db3\u308a\u306a\u304b\u3063\u305f\u3089\u8ffd\u52a0\u3067\u8abf\u67fb\u3057\u3066\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af"},{"location":"nn/","text":"\u30cb\u30e5\u30fc\u30e9\u30eb\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af # \u6df1\u5c64\u5b66\u7fd2\u306f\u30012010\u5e74\u4ee3\u4ee5\u964d\u306e\u4eba\u5de5\u77e5\u80fd\u30d6\u30fc\u30e0\u306e\u7acb\u5f79\u8005\u3067\u3059\u3002 \u6df1\u5c64\u5b66\u7fd2\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u57fa\u790e\u539f\u7406\u3092\u3057\u3063\u304b\u308a\u7406\u89e3\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 \u30cb\u30e5\u30fc\u30e9\u30eb\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u539f\u7406 # \u30cb\u30e5\u30fc\u30e9\u30eb\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(neural network)\u306f\u3001 \u4eba\u9593\u306e\u8133\u306e\u69cb\u9020\u3092\u6a21\u3057\u305f\u4eba\u5de5\u77e5\u80fd\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002 \u30cb\u30e5\u30fc\u30ed\u30f3 # \u4eba\u9593\u306e\u8133\u306f\u3001\u30cb\u30e5\u30fc\u30ed\u30f3(neuron)\u3068\u547c\u3070\u308c\u308b\u795e\u7d4c\u7d30\u80de\u304b\u3089\u69cb\u6210\u3055\u308c\u307e\u3059\u3002 \u30cb\u30e5\u30fc\u30ed\u30f3\u3092\u5358\u7d14\u5316\u3057\u305f\u6570\u7406\u30e2\u30c7\u30eb\u3067\u8003\u3048\u307e\u3059\u3002 \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u91cd\u307f \u3092 w_1, w_2, ..., w_i, .. \u3068\u3059\u308b\u3068\u3001 \u30cb\u30e5\u30fc\u30ed\u30f3\u304b\u3089\u4f1d\u308f\u308b\u4fe1\u53f7\u306e\u7dcf\u91cf \u306f w_1 x_1 + w_2 x_2 + ... + w_i x_i + ... \u3068\u306a\u308a\u307e\u3059\u3002 \u767a\u706b\uff1a\u6b21\u306e\u30cb\u30e5\u30fc\u30ed\u30f3\u306b\u4fe1\u53f7\u3092\u4f1d\u3048\u308b # \u5165\u529b\u306e\u4fe1\u53f7\u91cf\u304c\u3042\u308b\u95be\u5024\uff08\u3057\u304d\u3044\u5024\uff09 \\theta \u3092\u8d85\u3048\u308b\u304b\u3069\u3046\u304b\u3067\u6c7a\u3081\u307e\u3059\u3002 \u767a\u706b (w_1 x_1 + w_2 x_2 + ... + w_i x_i + ... \\ge \\theta) \u767a\u706b\u3057\u306a\u3044 (w_1 x_1 + w_2 x_2 + ... w_i x_i + ... < \\theta) \u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3 # \u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306f\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5358\u7d14\u306a\u6570\u7406\u30e2\u30c7\u30eb\u3067\u3059\u3002 y = f(\\mathbf{w}\\cdot\\mathbf{x}+b) \u5165\u529b : \\mathbf{x} = (x_1, x_2, ..., x_n) \u91cd\u307f : \\mathbf{w} = (w_1, w_2, ..., w_n) \u30d0\u30a4\u30a2\u30b9 : b \u6d3b\u6027\u5316\u95a2\u6570 : f \u6d3b\u6027\u5316\u95a2\u6570\u306f\u3001\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u767a\u706b\u3092\u5b9a\u3081\u308b\u95a2\u6570\u3068\u306a\u308a\u307e\u3059\u3002 \u524d\u306e\u8aac\u660e\u3067\u306f\u3001\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u767a\u706b\u30920,1\u3067\u6c7a\u5b9a\u3057\u3066\u3044\u307e\u3057\u305f\u3002 \u305d\u308c\u3092\u95a2\u6570\u3068\u3057\u3066\u8868\u3059\u3068\u3001\u6b21\u306e\u3088\u3046\u306a \u30b9\u30c6\u30c3\u30d7\u95a2\u6570 \u3068\u306a\u308a\u307e\u3059\u3002 \u30b9\u30c6\u30c3\u30d7\u95a2\u6570 f(x) = \\begin{cases} 1 & (x>0) \\\\ 0 & (x\\le0) \\end{cases} \u3057\u304b\u3057\u3001 \u30b9\u30c6\u30c3\u30d7\u95a2\u6570\u306f\u3001\u767a\u706b\u3057\u305d\u3046\u3060\u3051\u3069\u30ae\u30ea\u30ae\u30ea\u767a\u706b\u3057\u306a\u3044\u306a\u3069\u306e\u4e2d\u9593\u7684\u306a\u72b6\u614b\u304c\u8868\u73fe\u3067\u304d\u307e\u305b\u3093\u3002 \u5358\u7d14\u95a2\u6570\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u306f\u3001\u30b9\u30c6\u30c3\u30d7\u95a2\u6570\u306e\u4ee3\u308f\u308a\u306b\u3001 \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u3082\u7528\u3044\u305f \u6a19\u6e96\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570 \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001 0\u304b\u30891\u306e\u9023\u7d9a\u5024\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u308c\u3067\u30010.49\u306e\u3088\u3046\u306a\u30ae\u30ea\u30ae\u30ea\u767a\u706b\u3057\u306a\u3044\u72b6\u614b\u3082\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 \u6a19\u6e96\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570 \\sigma(x) = \\frac{1}{1+e^{-x}} \u8aa4\u308a\u8a02\u6b63\u5b66\u7fd2\u6cd5 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2\u306f\u3001 \u5165\u529b (x_1, x_2, ..., x_i, ...) \u306b\u5bfe\u3057\u3001\u51fa\u529b y \u3092\u8a08\u7b97\u3057\u307e\u3059\u3002 \u51fa\u529b\u304c\u9593\u9055\u3063\u3066\u3044\u305f\u3089\u3001\u91cd\u307f (w_1, w_2, ..., w_i, ...) \u3092\u8abf\u6574\u3057\u3001 \u6b63\u3057\u3044\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u8fd1\u3065\u3051\u307e\u3059\u3002 \u78ba\u7387\u30e2\u30c7\u30eb\u306e\u5c0e\u5165 # \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u7528\u3044\u308b\u3068\u3001\u78ba\u7387\u7684\u5206\u985e\u30e2\u30c7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002 \u767a\u706b\u3059\u308b\u78ba\u7387 p(C = 1 ~|~ \\mathbf{x}) = \\sigma(\\mathbf{w} \\mathbf{x} + b) \u767a\u706b\u3057\u306a\u3044\u78ba\u7387 p(C = 0~|~ \\mathbf{x}) = 1 - p(C = 1 ~|~ \\mathbf{x}) = 1 - \\sigma(\\mathbf{w} \\mathbf{x} + b) \u78ba\u7387\u5909\u6570 C \u306f\u30010\u304b1\u306a\u306e\u3067\u3001 y = \\mathbf{w} \\mathbf{x} + b \u3068\u304a\u304f\u3068\u3001 \u4e0a\u8a18\u306e\u4e8c\u3064\u306e\u5f0f\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u4e00\u3064\u306e\u5f0f\u3067\u307e\u3068\u3081\u3089\u308c\u307e\u3059\u3002 p(C = t | \\mathbf{x}) = y^t(1-y)^{(1-t)} \u5c24\u5ea6\u95a2\u6570(\u3086\u3046\u3069\u304b\u3093\u3059\u3046\uff09 \u306f\u3001\u3042\u308b\u524d\u63d0\u6761\u4ef6\u306b\u5f93\u3063\u3066\u7d50\u679c\u304c\u51fa\u73fe\u3059\u308b\u5834\u5408\u306b\u3001 \u9006\u306b\u89b3\u5bdf\u7d50\u679c\u304b\u3089\u307f\u3066\u524d\u63d0\u6761\u4ef6\u304c\u300c\u4f55\u3005\u3067\u3042\u3063\u305f\u300d\u3068\u63a8\u6e2c\u3059\u308b\u5c24\u3082\u3089\u3057\u3055\uff08\u3082\u3063\u3068\u3082\u3089\u3057\u3055\uff09\u3092\u95a2\u6570\u3068\u3057\u3066\u8868\u3057\u305f\u3082\u306e\u3067\u3059\u3002 \u5c24\u5ea6\u95a2\u6570 : \\mathbf{w} \u3068 b \u3092\u5c24\u5ea6\u63a8\u5b9a\u3059\u308b\u305f\u3081\u306e\u95a2\u6570 L(\\mathbf{w}, b) = \\prod_{n=1}^{N} p(C = t_n|\\mathbf{x}_n) = \\prod_{n=1}^{N} y_n^{t_n}(1 - y_n)^{1-t_n} \u306a\u304a\u3001\u7a81\u7136\u51fa\u3066\u304d\u305f n=1,...,N \u306f\u30c7\u30fc\u30bf\u306e\u4ef6\u6570\u3067\u3059\u3002 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2 # \u30cb\u30e5\u30fc\u30e9\u30eb\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2\u306f\u3001 \u5c24\u5ea6\u95a2\u6570 L(w, b) \u3092\u6700\u5927\u5316\u3059\u308b\u3088\u3046\u306b w \u3068 b \u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 \u6700\u9069\u5316\u554f\u984c(optimization problem) \u95a2\u6570\u304c\u6700\u5927\u30fb\u6700\u5c0f\u3068\u306a\u308b\u72b6\u614b\u3092\u6c42\u3081\u308b\u554f\u984c\u306e\u3053\u3068\u3002 \u95a2\u6570\u306e\u6700\u5927\u5316\u306f\u3001\u7b26\u53f7\u3092\u53cd\u8ee2\u3059\u308b\u3068\u3001\u6700\u5c0f\u5316\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u306e\u3067\u3001 \u4e00\u822c\u306b\u95a2\u6570\u3092\u6700\u9069\u5316\u3059\u308b\u3068\u306f\u3001\u95a2\u6570\u3092\u6700\u5c0f\u5316\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u308b\u3053\u3068\u3067\u3059\u3002 \u6700\u9069\u5316\u554f\u984c\u3068\u306a\u308c\u3070\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u504f\u5fae\u5206\uff08\u52fe\u914d\uff09\u3092\u6c42\u3081\u3001\u52fe\u914d\u304c 0 \u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3057\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u7a4d\u306e\u5f62\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u504f\u5fae\u5206\u306e\u8a08\u7b97\u304c\u7169\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u4e8b\u524d\u306e\u6e96\u5099\u3068\u3057\u3066\u3001\u5bfe\u6570\u3092\u3068\u3063\u3066\u3001\u548c\u306e\u5f62\u306b\u5909\u5f62\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u8aa4\u5dee\u95a2\u6570(cross-entropy error function) E(\\mathbf{w}, b) = - \\log{L(\\mathbf{w}, b)} = - \\sum_{n=1}^{N} t_n \\log{y_n} + (1 - t_n)\\log{1-y_n} E(\\mathbf{w}, b) \u3092\u6700\u5c0f\u5316\u3059\u308b\u3053\u3068\u304c\u3082\u3068\u3082\u3068\u306e\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u9069\u5316\u306b\u306a\u308a\u307e\u3059\u3002 \u4e00\u822c\u7684\u306b\u306f\u3001 E \u306e\u3053\u3068\u3092 \u8aa4\u5dee\u95a2\u6570(error function) \u3001\u3082\u3057\u304f\u306f\u3001 \u640d\u5931\u95a2\u6570(loss function) \u3068\u547c\u3073\u307e\u3059\u3002 \u52fe\u914d\u964d\u4e0b\u6cd5 # \u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u8aa4\u5dee\u95a2\u6570 E(\\mathbf{w},b) \u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306b\u306f\u3001 \\mathbf{w}, b \u3067\u504f\u5fae\u5206\u3057\u30660\u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u89e3\u6790\u7684\u306b\u3053\u306e\u5024\u3092\u6c42\u3081\u308b\u306e\u306f\u56f0\u96e3\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u3053\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9010\u6b21\u7684\u306b\u66f4\u65b0\u3059\u308b\u3053\u3068\u3067\u3001\u6700\u9069\u5316\u3092\u63a2\u7d22\u3059\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u3068\u3089\u308c\u307e\u3059\u3002 \u52fe\u914d\u964d\u4e0b\u6cd5(gradient descent) \\mathbf{w}^{(k+1)} = \\mathbf{w}^{(k)} - \\eta \\frac{\\partial E(\\mathbf{w}, b)}{\\partial w}\u3000 = \\mathbf{w}^{(k)} - \\eta \\sum_{n=1}^{N}(t_n - y_n)\\mathbf{x}_n b^{(k+1)} = b^{(k)} - \\eta \\frac{\\partial E(\\mathbf{w}, b)}{\\partial b} = b^{(k)} - \\eta \\sum_{n=1}^N (y_n - t_n) (\u76f4\u611f\u7684\u306a\u89e3\u91c8)\uff1a \u4e88\u6e2c\u5024\u3068\u5b9f\u969b\u306e\u5024\u3068\u306e\u8aa4\u5dee(y_n - t_n)\u3092\u7528\u3044\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u76ee\u6a19\u306f\u3001\u300c\u4e88\u6e2c\u5024\u3068\u5b9f\u969b\u306e\u5024\u300d\u306e\u5dee\u3092\u306a\u304f\u3059\u3053\u3068\u306a\u306e\u3067\u3001\u76f4\u611f\u306b\u53cd\u3057\u306a\u3044\u89e3\u91c8\u3068\u306a\u308a\u307e\u3059\u3002 \u5b66\u7fd2\u7387(learning_rate): \\eta(>0) \u5b66\u7fd2\u7387\u306f\u3001\u53ce\u675f\u3057\u3084\u3059\u3055\u3092\u8abf\u6574\u3059\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002 \u901a\u5e38\u306f\u3001 0.1 \u3084 0.01 \u306a\u3069\u306e\u9069\u5f53\u306a\u5c0f\u3055\u3044\u5024\u3092\u4e0e\u3048\u307e\u3059\u3002 \u30cb\u30e5\u30fc\u30e9\u30eb\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u6570\u7406\u3092\u3088\u308a\u6df1\u304f\u307f\u3066\u307f\u305f\u3044\u5834\u5408\u306f\u3001 \u6b21\u306e\u53c2\u8003\u8cc7\u6599\u3082\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u6570\u5b66\u3067\u89e3\u304d\u660e\u304b\u3059\u6df1\u5c64\u5b66\u7fd2\u306e\u539f\u7406 NumPy\u306b\u3088\u308b\u539f\u7406\u306e\u78ba\u8a8d\u2b50\ufe0f\u2b50\ufe0f # NumPy\u3092\u4f7f\u3063\u3066\u3001\u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u539f\u7406\u3092\u5b9f\u88c5\u3057\u306a\u304c\u3089\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u6570\u5f0f\u3082\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u306f \u5c11\u3057Python\u3092\u4f7f\u3063\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u307f\u308b\u3068\u3001\u7406\u89e3\u304c\u6df1\u307e\u308a\u307e\u3059\u3002 (NumPy\u306e\u7df4\u7fd2\u306b\u3082\u306a\u308a\u307e\u3059\u3057\u3002) \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6e96\u5099 import numpy as np import matplotlib.pyplot as plt \u6d3b\u6027\u5316\u95a2\u6570 # \u307e\u305a\u3001\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u767a\u706b\u3092\u8868\u73fe\u3059\u308b\u6d3b\u6027\u5316\u95a2\u6570\u3068\u3057\u3066\u3001 \u30b9\u30c6\u30c3\u30d7\u95a2\u6570\u3068\u6a19\u6e96\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30b9\u30c6\u30c3\u30d7\u95a2\u6570 f(x) = \\begin{cases} 1 & (x>0) \\\\ 0 & (x\\le0) \\end{cases} \u30b9\u30c6\u30c3\u30d7\u95a2\u6570\u3068\u30b0\u30e9\u30d5\u63cf\u753b def step ( x ): return 1 if x > 0 else 0 step = np . frompyfunc ( step , 1 , 1 ) # \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u95a2\u6570\u3078\u5909\u63db x = np . arange ( - 10 , 10 , 0.1 ) y = step ( x ) plt . plot ( x , y ) \u6a19\u6e96\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570 \\sigma(x) = \\frac{1}{1+e^{-x}} \u6a19\u6e96\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3068\u30b0\u30e9\u30d5\u63cf\u753b def sigmoid ( x ): return 1 / ( 1 + np . exp ( - x )) x = np . arange ( - 10 , 10 , 0.1 ) y = sigmoid ( x ) plt . plot ( x , y ) \u52fe\u914d\u964d\u4e0b\u6cd5 # \u52fe\u914d\u964d\u4e0b\u6cd5(GD) \u306f\u3001 \u95a2\u6570 f(x) \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001 f(x) \u3092\u6700\u5c0f\u306b\u3059\u308b\u3088\u3046\u306a x ( {\\mathop{\\rm arg~max}\\limits}_{x}\u3000f(x) \u3068\u3082\u66f8\u304f)\u3092\u6c42\u3081\u308b\u624b\u6cd5\u3067\u3059\u3002 \u6700\u6025\u964d\u4e0b\u6cd5\uff08Gradient descent, steepest descent\uff09\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u539f\u7406 x_{i+1} = x_i - \\eta f'(x_i)\\\\ (x_{i+1}, y_{i+1}) = (x_i, y_i) - \\eta (\\frac{\\partial f(x_i, y_i)}{\\partial x_i}, \\frac{\\partial f(x_i, y_i)}{\\partial y_i}) f'(x_i), \\frac{\\partial f(x_i, y_i)}{\\partial x_i}, \\frac{\\partial f(x_i, y_i)}{\\partial y_i} : \u52fe\u914d \\eta : \u5b66\u7fd2\u7387\uff08\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\uff09 1\u5909\u6570\u306e\u5834\u5408 \u4f8b\u3068\u3057\u3066\u3001\u6b21\u306e\u7c21\u5358\u306a\u653e\u7269\u7dda\u3092\u8003\u3048\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002 f(x) = 3x^4 \u22124x^3 \u221212x^2 +3\\\\ f'(x) = 12x^3 \u2212 12x^2 \u2212 24x \\\\ def f ( x ): return 3 * x ** 4 - 4 * x ** 3 - 12 * x ** 2 + 24 def df ( x ): return 12 * x ** 3 - 12 * x ** 2 - 24 * x def show_grad2 (): x = np . linspace ( - 3 , 4 , 100 ) y = f ( x ) plt . figure ( figsize = ( 6 , 5 )) plt . plot ( x , y ) show_grad2 () eta = 0.001 # \u5b66\u7fd2\u7387 x = np . zeros ( 100 ) x [ 0 ] = 4 # \u521d\u671f\u5024 for i in range ( len ( x ) - 1 ): x [ i + 1 ] = x [ i ] - eta * df ( x [ i ]) # \u52fe\u914d\u964d\u4e0b\u6cd5 show_grad2 () plt . scatter ( x , f ( x ), c = 'red' , alpha = 0.5 ) \u5927\u57df\u6700\u9069\u6027\u3068\u5c40\u6240\u6700\u9069\u6027 \u5c40\u6240\u6700\u9069\u6027\u3068\u306f\u3001\u6700\u9069\u89e3\u306e\u3072\u3068\u3064\u3067\u3042\u308b\u304c\u3001\u5fc5\u305a\u3057\u3082\u6700\u5c0f\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u3002 \uff08\u6700\u5c0f\u3068\u306a\u308b\u6700\u9069\u89e3\u3092\u5927\u57df\u6700\u9069\u89e3\u3068\u547c\u3076\u3002\uff09 \u52fe\u914d\u964d\u4e0b\u6cd5\u306f\u3001\u5927\u57df\u6700\u5c0f\u6027\u306f\u4fdd\u8a3c\u3055\u308c\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001\u4e0a\u306e\u4f8b\u3067\u3082\u521d\u671f\u5024\u3092 x=-3 \u3067\u59cb\u3081\u308b\u3068\u3001\u5c40\u6240\u6700\u9069\u89e3\u306b\u53ce\u675f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u5b66\u7fd2\u7387\u306a\u3069\u3092\u5909\u66f4\u3057\u3066\u3001\u5c71\u3092\u8d85\u3048\u308b\u3088\u3046\u306b\u8abf\u6574\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u8abf\u6574\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570\u304c\u591a\u3044\u306e\u3067\u3001\u591a\u5c11\u3001\u5c40\u6240\u6700\u9069\u89e3\u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u3063\u3066\u3082\u3001\u8a08\u7b97\u306e\u52b9\u7387\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002 2\u5909\u6570\u306e\u5834\u5408 z = x^2 + y^2 ~~~ \\frac{\\partial z}{\\partial x} = 2x ~~\\frac{\\partial z}{\\partial y} = 2y from mpl_toolkits.mplot3d import Axes3D def f ( x , y ): z = x ** 2 + y ** 2 return z def show_grads (): fig = plt . figure ( figsize = ( 8 , 8 )) ax1 = Axes3D ( fig ) x = np . arange ( - 10 , 11 , 2 ) y = np . arange ( - 10 , 11 , 2 ) X , Y = np . meshgrid ( x , y ) Z = f ( X , Y ) ax1 . set_xlabel ( 'x' ) ax1 . set_ylabel ( 'y' ) ax1 . set_zlabel ( 'z' ) ax1 . plot_wireframe ( X , Y , Z , label = 'f(x, y)' ) return ax1 show_grads () plt . show () x = np . zeros ( 100 ) y = np . zeros ( 100 ) x [ 0 ] = - 10 # \u521d\u671f\u5024 y [ 0 ] = 10 # \u521d\u671f\u5024 def dfdx ( x ): return 2 * x def dfdy ( y ): return 2 * y eta = 0.1 # \u5b66\u7fd2\u7387 for i in range ( len ( x ) - 1 ): x [ i + 1 ] = x [ i ] - eta * dfdx ( x [ i ]) # \u52fe\u914d\u964d\u4e0b\u6cd5 y [ i + 1 ] = y [ i ] - eta * dfdy ( y [ i ]) # \u52fe\u914d\u964d\u4e0b\u6cd5 ax1 = show_grads () ax1 . scatter3D ( x , y , f ( x , y ), c = 'red' , alpha = 0.5 ) plt . show () \u6700\u5148\u7aef\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u306f\u3001\u52fe\u914d\u964d\u4e0b\u6cd5\u306b\u5b8c\u6210\u9805(momentum)\u3092\u8ffd\u52a0\u3055\u305b\u305f\u624b\u6cd5\u3001\u3055\u3089\u306b\u9069\u5fdc\u7684\u306b\u5b66\u7fd2\u7387\u3092\u5909\u66f4\u3059\u308bAdaGrad\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u52fe\u914d\u964d\u4e0b\u6cd5(GD): \\mathbf{x}_{i+1} = \\mathbf{x}_i - \\eta \\nabla f Momentum: \\mathbf{x}_{i+1} = \\mathbf{x}_i - \\eta \\nabla f+ \\alpha \\Delta \\mathbf{w} AdaGrad: \\mathbf{x}_{i+1} = \\mathbf{x}_i - \\eta \\frac{1}{\\sqrt{h_i}}\\nabla f , h_{i+1} = h_i + (\\nabla f)^2 wat\u6c0f\u306e\u308f\u304b\u308a\u3084\u3059\u3044\u89e3\u8aac \u3088\u308a\u5f15\u7528 \u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u539f\u7406 # \u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u52d5\u4f5c\u539f\u7406\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3057\u3087\u3046\u3002 \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf x_1 x_2 t 0 0 0 0 1 1 1 0 1 1 1 1 \u5165\u529b(x)\u3068\u51fa\u529b(y) # x = np . array ([[ 0 , 0 ], [ 0 , 1 ], [ 1 , 0 ], [ 1 , 1 ]]) t = np . array ([ 0 , 1 , 1 , 1 ]) print ( 'x.shape' , x . shape ) print ( 't.shape' , t . shape ) DIM = x . shape [ 1 ] #2 w = np . random . normal ( size = ( DIM ,)) b = 0 print ( 'w =' , w ) print ( 'b =' , b ) \u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u6570\u7406\u30e2\u30c7\u30eb # \u6b21\u306f\u3001\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u30e2\u30c7\u30eb\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 y = \\mathbf{w} \\mathbf{x}^T + b \u4eca\u56de\u306e\u5165\u529b\u306f\u3001\uff14\u56de\u5206\u306e\u5165\u529b\u304c \\mathbf{x} \u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u3092\u30d0\u30c3\u30c1\u51e6\u7406\u3068\u3057\u3066\u3001\u4e00\u56de\u3067\u8a08\u7b97\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u30d0\u30c3\u30c1\u51e6\u7406 \u8907\u6570\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u8a08\u7b97\u3059\u308b\u3053\u3068\u3002 \uff08GPU\u306e\u6027\u80fd\u3092\u5f15\u304d\u51fa\u3059\u3068\u304d\u306b\u5fc5\u9808\u306e\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u3002\uff09 y = np . matmul ( w , x . T ) + b print ( 'y = ' , y ) \u6d3b\u6027\u5316\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u3001[0.0, 1.0]\u306e\u7bc4\u56f2\u306b\u3057\u307e\u3059\u3002 y = sigmoid ( np . matmul ( w , x . T ) + b ) print ( 'y = ' , y ) \u5b66\u7fd2\u30e2\u30c7\u30eb # \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u3001\u8aa4\u5dee\u3092\u5c11\u306a\u304f\u3059\u308b\u3088\u3046\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u91cd\u307f\uff09\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001\u5b66\u7fd2\u3057\u307e\u3059\u3002 y \u306f\u3001\u30cb\u30e5\u30fc\u30ed\u30f3\u304b\u3089\u4e88\u60f3\u3055\u308c\u305f\u51fa\u529b\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u6b63\u89e3 t \u3068\u306e\u5dee\u5206\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002 delta = y - t delta \u52fe\u914d\u964d\u4e0b\u6cd5\u30671\u30b9\u30c6\u30c3\u30d7\u3060\u3051\u9032\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \\mathbf{w}^{(k+1)} = = \\mathbf{w}^{(k)} - \\eta \\sum_{n=1}^{N}(t_n - y_n)\\mathbf{x}_n\\\\ b^{(k+1)} == b^{(k)} - \\eta \\sum_{n=1}^N (y_n - t_n) \u7a4d\u306e\u548c\u3092 np.matmul() \u3092\u4f7f\u3063\u3066\u4e00\u5ea6\u306b\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002 eta = 0.1 # \u5b66\u7fd2\u7387 print ( 'BEFORE' ) print ( 'w =' , w ) print ( 'b =' , b ) print ( 'delta =' , delta ) dw = np . matmul ( x . T , delta ) db = delta . sum () w = w - eta * dw b = b - eta * db print ( 'w =' , w ) print ( 'b =' , b ) \u640d\u5931\u95a2\u6570\u306f\u3001\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u8aa4\u5dee\u304b\u3089\u8a08\u7b97\u3057\u307e\u3059\u3002 E(\\mathbf{w}, b) = - \\sum_{n=1}^{N} t_n \\log{y_n} + (1 - t_n)\\log{1-y_n} def compute_loss ( t , y ): return ( - t * np . log ( y ) - ( 1 - t ) * np . log ( 1 - y )) . sum () compute_loss ( t , y ) \u30a8\u30dd\u30c3\u30af(epoch) # \u4f55\u56de\u304b\u7e70\u308a\u8fd4\u3057\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u8aa4\u5dee\u304c\u5c0f\u3055\u304f\u53ce\u675f\u3057\u3066\u3044\u304d\u307e\u3059\u3002 x = np . array ([[ 0 , 0 ], [ 0 , 1 ], [ 1 , 0 ], [ 1 , 1 ]]) t = np . array ([ 0 , 1 , 1 , 1 ]) np . random . seed ( 0 ) #\u4e71\u6570\u3092\u56fa\u5b9a w = np . random . normal ( size = ( x . shape [ 1 ],)) # \u521d\u671f\u306e\u91cd\u307f b = 0 def forward ( y ): return sigmoid ( np . matmul ( w , x . T ) + b ) eta = 0.2 epoch = 100 yloss = [] for i in range ( epoch ): y = forward ( x ) delta = y - t w = w - eta * np . matmul ( x . T , delta ) b = b - eta * delta . sum () loss = compute_loss ( t , y ) if i % 5 == 1 : print ( f 'y[ { i } ]=' , y , f 'loss[ { i } ]' , loss ) yloss . append ( loss ) # \u30b0\u30e9\u30d5\u63cf\u753b\u7528 print ( f '\u6700\u7d42\u4e88\u6e2c\u7d50\u679c: ' , y , 'loss:' , loss ) print ( '\u6b63\u89e3: ' , t ) print ( 'w =' , w , 'b =' , b ) plt . plot ( range ( epoch ), yloss ) \u30a8\u30dd\u30c3\u30af100\u56de\u306e\u4e88\u6e2c\u7d50\u679c\u3068\u6b63\u89e3\u3092\u6bd4\u3079\u3066\u307f\u308b\u3068\u30010.5\u3092\u5883\u754c\u306b\u3057\u3066\u30010\u30681\u306b\u5206\u985e\u3059\u308c\u3070\u3001\u6b63\u89e3\u3068\u7b49\u3057\u3044\u4e88\u6e2c\u304c\u5f97\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u3060\u3001loss \u304c\u5927\u304d\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u30a8\u30dd\u30c3\u30af\u3092\u5897\u3084\u3057\u3066\u5b66\u7fd2\u3055\u305b\u308b\u3053\u3068\u3067\u3088\u308a\u660e\u78ba\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002 \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3068\u6df1\u5c64\u5b66\u7fd2 # \u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306f\u3001\u539f\u7406\u7684\u306b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u7b49\u4fa1\u3067\u3059\u3002 \uff08\u5b9f\u88c5\u3067\u9811\u5f35\u3063\u3066\u3082\uff09 \u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u306a\u554f\u984c \u3057\u304b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 **\u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u306a\u554f\u984c** \u5e7e\u4f55\u5b66\u306b\u304a\u3044\u3066\u3075\u305f\u3064\u306e\u96c6\u5408\u304c\u4e8c\u6b21\u5143\u5e73\u9762\u4e0a\u306b\u3042\u308b\u3068\u304d\u3001\u305d\u308c\u3089\u306e\u96c6\u5408\u3092\u4e00\u672c\u306e\u76f4\u7dda\u3067\u5206\u96e2\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002 __\u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u306a\u4f8b__ \u4e00\u822c\u5316\u3057\u3066\u3001$n$ \u6b21\u5143\u7a7a\u9593\u4e0a\u306e\u3075\u305f\u3064\u306e\u96c6\u5408\u3092 $n \u2212 1$ \u6b21\u5143\u306e\u8d85\u5e73\u9762\u3067 \u5206\u96e2\u3067\u304d\u308b\u3053\u3068\u3082\u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u3068\u547c\u3073\u307e\u3059\u3002 \u9006\u306b\u3001\u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u554f\u984c\u3092\u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u554f\u984c\u3068\u547c\u3073\u307e\u3059\u3002 \u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u554f\u984c # \u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u554f\u984c\u306f\u3001\u65e5\u5e38\u7684\u306b\u5b58\u5728\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u8ad6\u7406\u56de\u8def\u306eXOR\u56de\u8def\u3082\u8a2d\u8a08\u5206\u96e2\u4e0d\u53ef\u80fd\u3067\u3059\u3002 x_1 x_2 t 0 0 0 0 1 1 1 0 1 1 1 0 \u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u4f8b \u8d64\u3044\u90e8\u5206\u304c\u5206\u96e2\u3067\u304d\u3066\u3044\u306a\u3044\u3002 Let's try \u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u5b9f\u88c5\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u3001\u7dda\u5f62\u4e0d\u5206\u96e2\u554f\u984c\u3092\u89e3\u3053\u3046\u3068\u3059\u308b\u3068\u3069\u3046\u306a\u308b\u304b\u8abf\u3079\u3066\u307f\u3088\u3046\u3002 \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3 # \u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u554f\u984c\u3092\u89e3\u304f\u305f\u3081\u306e\u30a2\u30a4\u30c7\u30a3\u30a2\u306f\u3001\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u591a\u5c64\u5316\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \uff13\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u4f8b \u3053\u306e\u3088\u3046\u306b\u591a\u5c64\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u5404\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u5b66\u7fd2\u7d50\u679c\u304c\u7d44\u307f\u5408\u308f\u3055\u3063\u3066\u3001 \u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u554f\u984c\u3067\u3082\u8907\u6570\u306e\u5206\u96e2\u7dda\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u5206\u96e2\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002 \u3055\u3066\u3001\u300c\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3082\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01\u300d\u3068\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001 \u3061\u3087\u3063\u3068\uff11\u56de\u306e\u8b1b\u7fa9\u3067\u306f\u591a\u3059\u304e\u308b\u6c17\u304c\u3057\u307e\u3059\u306e\u3067\u91cd\u8981\u306a\u6982\u5ff5\u3060\u3051\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u9006\u8aa4\u5dee\u4f1d\u642c\u6cd5 \u30cb\u30e5\u30fc\u30ed\u30f3\u306f\u3001\u9806\u65b9\u5411\u306b\u767a\u706b\u3055\u305b\u3066\u3044\u304d\u307e\u3059\u304c\u3001\u5b66\u7fd2\u3092\u52b9\u7387\u3088\u304f\u884c\u3046\u305f\u3081\u3001\u8aa4\u5dee\u3092\u9006\u306b\u4f1d\u642c\u3055\u305b\u307e\u3059\u3002 \u6df1\u5c64\u5b66\u7fd2\u3078 # \u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306f\u3001\uff14\u5c64\u4ee5\u4e0a\u306e\u5c40\u6240\u6700\u9069\u89e3\u3084\u52fe\u914d\u6d88\u5931\u306a\u3069\u306e\u6280\u8853\u7684\u306a\u554f\u984c\u306b\u3088\u3063\u3066\u3001\u5341\u5206\u306b\u5b66\u7fd2\u3055\u305b\u3089\u308c\u305a\u3001\u6027\u80fd\u3082\u82b3\u3057\u304f\u306a\u304f\u30011990\u5e74\u4ee3\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e1\u30a4\u30f3\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u5916\u308c\u3066\u3044\u307e\u3057\u305f\u3002 \u6df1\u5c64\u5b66\u7fd2\u306f\u30012006\u5e74\u306b\u3001\u30b8\u30a7\u30d5\u30ea\u30fc\u30fb\u30d2\u30f3\u30c8\u30f3\u3089\u304c\u30aa\u30fc\u30c8\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u63d0\u6848\u3057\u3001\u591a\u5c64\u3067\u3082\u5341\u5206\u306b\u5b66\u7fd2\u3067\u304d\u308b\u3088\u3046\u306b\u6539\u5584\u3057\u305f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3059\u3002 \u30aa\u30fc\u30c8\u30a8\u30f3\u30b3\u30fc\u30c0 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u7528\u3057\u305f\u6b21\u5143\u5727\u7e2e\u306e\u305f\u3081\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 Nature\u8a8c\u306b\u63b2\u8f09\u3055\u308c\u305fDeep Learning \u306e\u767a\u660e\u8005\u3089\u306e\u8ad6\u6587 https://www.cs.toronto.edu/~hinton/absps/NatureDeepReview.pdf \u30b3\u30fc\u30b9\u30ef\u30fc\u30af # \u4eca\u56de\u306f\u3001\u5c11\u3005\u96e3\u89e3\u306a\u6570\u5f0f\u304c\u51fa\u3066\u3001\u30b3\u30fc\u30c9\u3082\u300c\u3068\u3063\u6563\u3089\u304b\u3063\u305f\u300d\u611f\u3058\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002 \u3053\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u307e\u3068\u3081\u3066\u304a\u304f\u3068\u3001\u518d\u5229\u7528\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 **\u6f14\u7fd2\uff08SinglePerceptron \u30af\u30e9\u30b9\uff09** Python \u8a00\u8a9e\u306e\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3092\u4f7f\u3063\u3066\u3001 \u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u30b3\u30fc\u30c9\u3092 sklearn \u98a8\u306b\u5b66\u7fd2\u3068\u4e88\u6e2c\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30e2\u30c7\u30eb\u751f\u6210\uff1a model = SinglePerceptron(lerning_rate=0.1) \u5b66\u7fd2\uff1a model.fit(X, y) \u4e88\u6e2c\uff1a y_pred = model.predict(X) \u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u306b\u3064\u3044\u3066 \u4eca\u56de\u306e\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u306f\u3001 **\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff08\u8a08\u7b97\u6a5f\u6570\u5b66II)\u306e\u5fa9\u7fd2**\u3067\u3059\u3002 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u7528\u3044\u308b\u3068\u3001\u8907\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3072\u3068\u307e\u3068\u307e\u308a\u306b\u3057\u3066\u3001 \u3088\u308a\u8907\u96d1\u306a\u6df1\u5c64\u5b66\u7fd2\u5411\u3051\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u69cb\u7bc9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 \u672c\u683c\u7684\u306b\u6df1\u5c64\u5b66\u7fd2\u306b\u9032\u307f\u305f\u3044\u3068\u304d\u306f\u3001\u907f\u3051\u3066\u306f\u901a\u308c\u307e\u305b\u3093\u306e\u3067\u3001 \u30af\u30e9\u30b9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u6982\u5ff5\u3092\u3082\u3046\u4e00\u5ea6\u5fa9\u7fd2\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u3088\u308a\u672c\u683c\u7684\u306aAI\u3078"},{"location":"nn/#_1","text":"\u6df1\u5c64\u5b66\u7fd2\u306f\u30012010\u5e74\u4ee3\u4ee5\u964d\u306e\u4eba\u5de5\u77e5\u80fd\u30d6\u30fc\u30e0\u306e\u7acb\u5f79\u8005\u3067\u3059\u3002 \u6df1\u5c64\u5b66\u7fd2\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u57fa\u790e\u539f\u7406\u3092\u3057\u3063\u304b\u308a\u7406\u89e3\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002","title":"\u30cb\u30e5\u30fc\u30e9\u30eb\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af"},{"location":"nn/#_2","text":"\u30cb\u30e5\u30fc\u30e9\u30eb\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(neural network)\u306f\u3001 \u4eba\u9593\u306e\u8133\u306e\u69cb\u9020\u3092\u6a21\u3057\u305f\u4eba\u5de5\u77e5\u80fd\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002","title":"\u30cb\u30e5\u30fc\u30e9\u30eb\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u539f\u7406"},{"location":"nn/#_3","text":"\u4eba\u9593\u306e\u8133\u306f\u3001\u30cb\u30e5\u30fc\u30ed\u30f3(neuron)\u3068\u547c\u3070\u308c\u308b\u795e\u7d4c\u7d30\u80de\u304b\u3089\u69cb\u6210\u3055\u308c\u307e\u3059\u3002 \u30cb\u30e5\u30fc\u30ed\u30f3\u3092\u5358\u7d14\u5316\u3057\u305f\u6570\u7406\u30e2\u30c7\u30eb\u3067\u8003\u3048\u307e\u3059\u3002 \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u91cd\u307f \u3092 w_1, w_2, ..., w_i, .. \u3068\u3059\u308b\u3068\u3001 \u30cb\u30e5\u30fc\u30ed\u30f3\u304b\u3089\u4f1d\u308f\u308b\u4fe1\u53f7\u306e\u7dcf\u91cf \u306f w_1 x_1 + w_2 x_2 + ... + w_i x_i + ... \u3068\u306a\u308a\u307e\u3059\u3002","title":"\u30cb\u30e5\u30fc\u30ed\u30f3"},{"location":"nn/#_4","text":"\u5165\u529b\u306e\u4fe1\u53f7\u91cf\u304c\u3042\u308b\u95be\u5024\uff08\u3057\u304d\u3044\u5024\uff09 \\theta \u3092\u8d85\u3048\u308b\u304b\u3069\u3046\u304b\u3067\u6c7a\u3081\u307e\u3059\u3002 \u767a\u706b (w_1 x_1 + w_2 x_2 + ... + w_i x_i + ... \\ge \\theta) \u767a\u706b\u3057\u306a\u3044 (w_1 x_1 + w_2 x_2 + ... w_i x_i + ... < \\theta)","title":"\u767a\u706b\uff1a\u6b21\u306e\u30cb\u30e5\u30fc\u30ed\u30f3\u306b\u4fe1\u53f7\u3092\u4f1d\u3048\u308b"},{"location":"nn/#_5","text":"\u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306f\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5358\u7d14\u306a\u6570\u7406\u30e2\u30c7\u30eb\u3067\u3059\u3002 y = f(\\mathbf{w}\\cdot\\mathbf{x}+b) \u5165\u529b : \\mathbf{x} = (x_1, x_2, ..., x_n) \u91cd\u307f : \\mathbf{w} = (w_1, w_2, ..., w_n) \u30d0\u30a4\u30a2\u30b9 : b \u6d3b\u6027\u5316\u95a2\u6570 : f \u6d3b\u6027\u5316\u95a2\u6570\u306f\u3001\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u767a\u706b\u3092\u5b9a\u3081\u308b\u95a2\u6570\u3068\u306a\u308a\u307e\u3059\u3002 \u524d\u306e\u8aac\u660e\u3067\u306f\u3001\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u767a\u706b\u30920,1\u3067\u6c7a\u5b9a\u3057\u3066\u3044\u307e\u3057\u305f\u3002 \u305d\u308c\u3092\u95a2\u6570\u3068\u3057\u3066\u8868\u3059\u3068\u3001\u6b21\u306e\u3088\u3046\u306a \u30b9\u30c6\u30c3\u30d7\u95a2\u6570 \u3068\u306a\u308a\u307e\u3059\u3002 \u30b9\u30c6\u30c3\u30d7\u95a2\u6570 f(x) = \\begin{cases} 1 & (x>0) \\\\ 0 & (x\\le0) \\end{cases} \u3057\u304b\u3057\u3001 \u30b9\u30c6\u30c3\u30d7\u95a2\u6570\u306f\u3001\u767a\u706b\u3057\u305d\u3046\u3060\u3051\u3069\u30ae\u30ea\u30ae\u30ea\u767a\u706b\u3057\u306a\u3044\u306a\u3069\u306e\u4e2d\u9593\u7684\u306a\u72b6\u614b\u304c\u8868\u73fe\u3067\u304d\u307e\u305b\u3093\u3002 \u5358\u7d14\u95a2\u6570\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u306f\u3001\u30b9\u30c6\u30c3\u30d7\u95a2\u6570\u306e\u4ee3\u308f\u308a\u306b\u3001 \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u3082\u7528\u3044\u305f \u6a19\u6e96\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570 \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001 0\u304b\u30891\u306e\u9023\u7d9a\u5024\u3092\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u308c\u3067\u30010.49\u306e\u3088\u3046\u306a\u30ae\u30ea\u30ae\u30ea\u767a\u706b\u3057\u306a\u3044\u72b6\u614b\u3082\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 \u6a19\u6e96\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570 \\sigma(x) = \\frac{1}{1+e^{-x}} \u8aa4\u308a\u8a02\u6b63\u5b66\u7fd2\u6cd5 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2\u306f\u3001 \u5165\u529b (x_1, x_2, ..., x_i, ...) \u306b\u5bfe\u3057\u3001\u51fa\u529b y \u3092\u8a08\u7b97\u3057\u307e\u3059\u3002 \u51fa\u529b\u304c\u9593\u9055\u3063\u3066\u3044\u305f\u3089\u3001\u91cd\u307f (w_1, w_2, ..., w_i, ...) \u3092\u8abf\u6574\u3057\u3001 \u6b63\u3057\u3044\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u8fd1\u3065\u3051\u307e\u3059\u3002","title":"\u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3"},{"location":"nn/#_6","text":"\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u7528\u3044\u308b\u3068\u3001\u78ba\u7387\u7684\u5206\u985e\u30e2\u30c7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002 \u767a\u706b\u3059\u308b\u78ba\u7387 p(C = 1 ~|~ \\mathbf{x}) = \\sigma(\\mathbf{w} \\mathbf{x} + b) \u767a\u706b\u3057\u306a\u3044\u78ba\u7387 p(C = 0~|~ \\mathbf{x}) = 1 - p(C = 1 ~|~ \\mathbf{x}) = 1 - \\sigma(\\mathbf{w} \\mathbf{x} + b) \u78ba\u7387\u5909\u6570 C \u306f\u30010\u304b1\u306a\u306e\u3067\u3001 y = \\mathbf{w} \\mathbf{x} + b \u3068\u304a\u304f\u3068\u3001 \u4e0a\u8a18\u306e\u4e8c\u3064\u306e\u5f0f\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u4e00\u3064\u306e\u5f0f\u3067\u307e\u3068\u3081\u3089\u308c\u307e\u3059\u3002 p(C = t | \\mathbf{x}) = y^t(1-y)^{(1-t)} \u5c24\u5ea6\u95a2\u6570(\u3086\u3046\u3069\u304b\u3093\u3059\u3046\uff09 \u306f\u3001\u3042\u308b\u524d\u63d0\u6761\u4ef6\u306b\u5f93\u3063\u3066\u7d50\u679c\u304c\u51fa\u73fe\u3059\u308b\u5834\u5408\u306b\u3001 \u9006\u306b\u89b3\u5bdf\u7d50\u679c\u304b\u3089\u307f\u3066\u524d\u63d0\u6761\u4ef6\u304c\u300c\u4f55\u3005\u3067\u3042\u3063\u305f\u300d\u3068\u63a8\u6e2c\u3059\u308b\u5c24\u3082\u3089\u3057\u3055\uff08\u3082\u3063\u3068\u3082\u3089\u3057\u3055\uff09\u3092\u95a2\u6570\u3068\u3057\u3066\u8868\u3057\u305f\u3082\u306e\u3067\u3059\u3002 \u5c24\u5ea6\u95a2\u6570 : \\mathbf{w} \u3068 b \u3092\u5c24\u5ea6\u63a8\u5b9a\u3059\u308b\u305f\u3081\u306e\u95a2\u6570 L(\\mathbf{w}, b) = \\prod_{n=1}^{N} p(C = t_n|\\mathbf{x}_n) = \\prod_{n=1}^{N} y_n^{t_n}(1 - y_n)^{1-t_n} \u306a\u304a\u3001\u7a81\u7136\u51fa\u3066\u304d\u305f n=1,...,N \u306f\u30c7\u30fc\u30bf\u306e\u4ef6\u6570\u3067\u3059\u3002","title":"\u78ba\u7387\u30e2\u30c7\u30eb\u306e\u5c0e\u5165"},{"location":"nn/#_7","text":"\u30cb\u30e5\u30fc\u30e9\u30eb\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2\u306f\u3001 \u5c24\u5ea6\u95a2\u6570 L(w, b) \u3092\u6700\u5927\u5316\u3059\u308b\u3088\u3046\u306b w \u3068 b \u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 \u6700\u9069\u5316\u554f\u984c(optimization problem) \u95a2\u6570\u304c\u6700\u5927\u30fb\u6700\u5c0f\u3068\u306a\u308b\u72b6\u614b\u3092\u6c42\u3081\u308b\u554f\u984c\u306e\u3053\u3068\u3002 \u95a2\u6570\u306e\u6700\u5927\u5316\u306f\u3001\u7b26\u53f7\u3092\u53cd\u8ee2\u3059\u308b\u3068\u3001\u6700\u5c0f\u5316\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u306e\u3067\u3001 \u4e00\u822c\u306b\u95a2\u6570\u3092\u6700\u9069\u5316\u3059\u308b\u3068\u306f\u3001\u95a2\u6570\u3092\u6700\u5c0f\u5316\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u308b\u3053\u3068\u3067\u3059\u3002 \u6700\u9069\u5316\u554f\u984c\u3068\u306a\u308c\u3070\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u504f\u5fae\u5206\uff08\u52fe\u914d\uff09\u3092\u6c42\u3081\u3001\u52fe\u914d\u304c 0 \u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3057\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u7a4d\u306e\u5f62\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u504f\u5fae\u5206\u306e\u8a08\u7b97\u304c\u7169\u96d1\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u4e8b\u524d\u306e\u6e96\u5099\u3068\u3057\u3066\u3001\u5bfe\u6570\u3092\u3068\u3063\u3066\u3001\u548c\u306e\u5f62\u306b\u5909\u5f62\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u8aa4\u5dee\u95a2\u6570(cross-entropy error function) E(\\mathbf{w}, b) = - \\log{L(\\mathbf{w}, b)} = - \\sum_{n=1}^{N} t_n \\log{y_n} + (1 - t_n)\\log{1-y_n} E(\\mathbf{w}, b) \u3092\u6700\u5c0f\u5316\u3059\u308b\u3053\u3068\u304c\u3082\u3068\u3082\u3068\u306e\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u9069\u5316\u306b\u306a\u308a\u307e\u3059\u3002 \u4e00\u822c\u7684\u306b\u306f\u3001 E \u306e\u3053\u3068\u3092 \u8aa4\u5dee\u95a2\u6570(error function) \u3001\u3082\u3057\u304f\u306f\u3001 \u640d\u5931\u95a2\u6570(loss function) \u3068\u547c\u3073\u307e\u3059\u3002","title":"\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b66\u7fd2"},{"location":"nn/#_8","text":"\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u8aa4\u5dee\u95a2\u6570 E(\\mathbf{w},b) \u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306b\u306f\u3001 \\mathbf{w}, b \u3067\u504f\u5fae\u5206\u3057\u30660\u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c42\u3081\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u89e3\u6790\u7684\u306b\u3053\u306e\u5024\u3092\u6c42\u3081\u308b\u306e\u306f\u56f0\u96e3\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u3053\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9010\u6b21\u7684\u306b\u66f4\u65b0\u3059\u308b\u3053\u3068\u3067\u3001\u6700\u9069\u5316\u3092\u63a2\u7d22\u3059\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u3068\u3089\u308c\u307e\u3059\u3002 \u52fe\u914d\u964d\u4e0b\u6cd5(gradient descent) \\mathbf{w}^{(k+1)} = \\mathbf{w}^{(k)} - \\eta \\frac{\\partial E(\\mathbf{w}, b)}{\\partial w}\u3000 = \\mathbf{w}^{(k)} - \\eta \\sum_{n=1}^{N}(t_n - y_n)\\mathbf{x}_n b^{(k+1)} = b^{(k)} - \\eta \\frac{\\partial E(\\mathbf{w}, b)}{\\partial b} = b^{(k)} - \\eta \\sum_{n=1}^N (y_n - t_n) (\u76f4\u611f\u7684\u306a\u89e3\u91c8)\uff1a \u4e88\u6e2c\u5024\u3068\u5b9f\u969b\u306e\u5024\u3068\u306e\u8aa4\u5dee(y_n - t_n)\u3092\u7528\u3044\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u76ee\u6a19\u306f\u3001\u300c\u4e88\u6e2c\u5024\u3068\u5b9f\u969b\u306e\u5024\u300d\u306e\u5dee\u3092\u306a\u304f\u3059\u3053\u3068\u306a\u306e\u3067\u3001\u76f4\u611f\u306b\u53cd\u3057\u306a\u3044\u89e3\u91c8\u3068\u306a\u308a\u307e\u3059\u3002 \u5b66\u7fd2\u7387(learning_rate): \\eta(>0) \u5b66\u7fd2\u7387\u306f\u3001\u53ce\u675f\u3057\u3084\u3059\u3055\u3092\u8abf\u6574\u3059\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002 \u901a\u5e38\u306f\u3001 0.1 \u3084 0.01 \u306a\u3069\u306e\u9069\u5f53\u306a\u5c0f\u3055\u3044\u5024\u3092\u4e0e\u3048\u307e\u3059\u3002 \u30cb\u30e5\u30fc\u30e9\u30eb\u30fb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u6570\u7406\u3092\u3088\u308a\u6df1\u304f\u307f\u3066\u307f\u305f\u3044\u5834\u5408\u306f\u3001 \u6b21\u306e\u53c2\u8003\u8cc7\u6599\u3082\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u6570\u5b66\u3067\u89e3\u304d\u660e\u304b\u3059\u6df1\u5c64\u5b66\u7fd2\u306e\u539f\u7406","title":"\u52fe\u914d\u964d\u4e0b\u6cd5"},{"location":"nn/#numpy","text":"NumPy\u3092\u4f7f\u3063\u3066\u3001\u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u539f\u7406\u3092\u5b9f\u88c5\u3057\u306a\u304c\u3089\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u6570\u5f0f\u3082\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u306f \u5c11\u3057Python\u3092\u4f7f\u3063\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066\u307f\u308b\u3068\u3001\u7406\u89e3\u304c\u6df1\u307e\u308a\u307e\u3059\u3002 (NumPy\u306e\u7df4\u7fd2\u306b\u3082\u306a\u308a\u307e\u3059\u3057\u3002) \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6e96\u5099 import numpy as np import matplotlib.pyplot as plt","title":"NumPy\u306b\u3088\u308b\u539f\u7406\u306e\u78ba\u8a8d\u2b50\ufe0f\u2b50\ufe0f"},{"location":"nn/#_9","text":"\u307e\u305a\u3001\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u767a\u706b\u3092\u8868\u73fe\u3059\u308b\u6d3b\u6027\u5316\u95a2\u6570\u3068\u3057\u3066\u3001 \u30b9\u30c6\u30c3\u30d7\u95a2\u6570\u3068\u6a19\u6e96\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30b9\u30c6\u30c3\u30d7\u95a2\u6570 f(x) = \\begin{cases} 1 & (x>0) \\\\ 0 & (x\\le0) \\end{cases} \u30b9\u30c6\u30c3\u30d7\u95a2\u6570\u3068\u30b0\u30e9\u30d5\u63cf\u753b def step ( x ): return 1 if x > 0 else 0 step = np . frompyfunc ( step , 1 , 1 ) # \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u95a2\u6570\u3078\u5909\u63db x = np . arange ( - 10 , 10 , 0.1 ) y = step ( x ) plt . plot ( x , y ) \u6a19\u6e96\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570 \\sigma(x) = \\frac{1}{1+e^{-x}} \u6a19\u6e96\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3068\u30b0\u30e9\u30d5\u63cf\u753b def sigmoid ( x ): return 1 / ( 1 + np . exp ( - x )) x = np . arange ( - 10 , 10 , 0.1 ) y = sigmoid ( x ) plt . plot ( x , y )","title":"\u6d3b\u6027\u5316\u95a2\u6570"},{"location":"nn/#_10","text":"\u52fe\u914d\u964d\u4e0b\u6cd5(GD) \u306f\u3001 \u95a2\u6570 f(x) \u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001 f(x) \u3092\u6700\u5c0f\u306b\u3059\u308b\u3088\u3046\u306a x ( {\\mathop{\\rm arg~max}\\limits}_{x}\u3000f(x) \u3068\u3082\u66f8\u304f)\u3092\u6c42\u3081\u308b\u624b\u6cd5\u3067\u3059\u3002 \u6700\u6025\u964d\u4e0b\u6cd5\uff08Gradient descent, steepest descent\uff09\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u539f\u7406 x_{i+1} = x_i - \\eta f'(x_i)\\\\ (x_{i+1}, y_{i+1}) = (x_i, y_i) - \\eta (\\frac{\\partial f(x_i, y_i)}{\\partial x_i}, \\frac{\\partial f(x_i, y_i)}{\\partial y_i}) f'(x_i), \\frac{\\partial f(x_i, y_i)}{\\partial x_i}, \\frac{\\partial f(x_i, y_i)}{\\partial y_i} : \u52fe\u914d \\eta : \u5b66\u7fd2\u7387\uff08\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\uff09 1\u5909\u6570\u306e\u5834\u5408 \u4f8b\u3068\u3057\u3066\u3001\u6b21\u306e\u7c21\u5358\u306a\u653e\u7269\u7dda\u3092\u8003\u3048\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002 f(x) = 3x^4 \u22124x^3 \u221212x^2 +3\\\\ f'(x) = 12x^3 \u2212 12x^2 \u2212 24x \\\\ def f ( x ): return 3 * x ** 4 - 4 * x ** 3 - 12 * x ** 2 + 24 def df ( x ): return 12 * x ** 3 - 12 * x ** 2 - 24 * x def show_grad2 (): x = np . linspace ( - 3 , 4 , 100 ) y = f ( x ) plt . figure ( figsize = ( 6 , 5 )) plt . plot ( x , y ) show_grad2 () eta = 0.001 # \u5b66\u7fd2\u7387 x = np . zeros ( 100 ) x [ 0 ] = 4 # \u521d\u671f\u5024 for i in range ( len ( x ) - 1 ): x [ i + 1 ] = x [ i ] - eta * df ( x [ i ]) # \u52fe\u914d\u964d\u4e0b\u6cd5 show_grad2 () plt . scatter ( x , f ( x ), c = 'red' , alpha = 0.5 ) \u5927\u57df\u6700\u9069\u6027\u3068\u5c40\u6240\u6700\u9069\u6027 \u5c40\u6240\u6700\u9069\u6027\u3068\u306f\u3001\u6700\u9069\u89e3\u306e\u3072\u3068\u3064\u3067\u3042\u308b\u304c\u3001\u5fc5\u305a\u3057\u3082\u6700\u5c0f\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u3002 \uff08\u6700\u5c0f\u3068\u306a\u308b\u6700\u9069\u89e3\u3092\u5927\u57df\u6700\u9069\u89e3\u3068\u547c\u3076\u3002\uff09 \u52fe\u914d\u964d\u4e0b\u6cd5\u306f\u3001\u5927\u57df\u6700\u5c0f\u6027\u306f\u4fdd\u8a3c\u3055\u308c\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001\u4e0a\u306e\u4f8b\u3067\u3082\u521d\u671f\u5024\u3092 x=-3 \u3067\u59cb\u3081\u308b\u3068\u3001\u5c40\u6240\u6700\u9069\u89e3\u306b\u53ce\u675f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u5b66\u7fd2\u7387\u306a\u3069\u3092\u5909\u66f4\u3057\u3066\u3001\u5c71\u3092\u8d85\u3048\u308b\u3088\u3046\u306b\u8abf\u6574\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u8abf\u6574\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570\u304c\u591a\u3044\u306e\u3067\u3001\u591a\u5c11\u3001\u5c40\u6240\u6700\u9069\u89e3\u306b\u306a\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3042\u3063\u3066\u3082\u3001\u8a08\u7b97\u306e\u52b9\u7387\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002 2\u5909\u6570\u306e\u5834\u5408 z = x^2 + y^2 ~~~ \\frac{\\partial z}{\\partial x} = 2x ~~\\frac{\\partial z}{\\partial y} = 2y from mpl_toolkits.mplot3d import Axes3D def f ( x , y ): z = x ** 2 + y ** 2 return z def show_grads (): fig = plt . figure ( figsize = ( 8 , 8 )) ax1 = Axes3D ( fig ) x = np . arange ( - 10 , 11 , 2 ) y = np . arange ( - 10 , 11 , 2 ) X , Y = np . meshgrid ( x , y ) Z = f ( X , Y ) ax1 . set_xlabel ( 'x' ) ax1 . set_ylabel ( 'y' ) ax1 . set_zlabel ( 'z' ) ax1 . plot_wireframe ( X , Y , Z , label = 'f(x, y)' ) return ax1 show_grads () plt . show () x = np . zeros ( 100 ) y = np . zeros ( 100 ) x [ 0 ] = - 10 # \u521d\u671f\u5024 y [ 0 ] = 10 # \u521d\u671f\u5024 def dfdx ( x ): return 2 * x def dfdy ( y ): return 2 * y eta = 0.1 # \u5b66\u7fd2\u7387 for i in range ( len ( x ) - 1 ): x [ i + 1 ] = x [ i ] - eta * dfdx ( x [ i ]) # \u52fe\u914d\u964d\u4e0b\u6cd5 y [ i + 1 ] = y [ i ] - eta * dfdy ( y [ i ]) # \u52fe\u914d\u964d\u4e0b\u6cd5 ax1 = show_grads () ax1 . scatter3D ( x , y , f ( x , y ), c = 'red' , alpha = 0.5 ) plt . show () \u6700\u5148\u7aef\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u306f\u3001\u52fe\u914d\u964d\u4e0b\u6cd5\u306b\u5b8c\u6210\u9805(momentum)\u3092\u8ffd\u52a0\u3055\u305b\u305f\u624b\u6cd5\u3001\u3055\u3089\u306b\u9069\u5fdc\u7684\u306b\u5b66\u7fd2\u7387\u3092\u5909\u66f4\u3059\u308bAdaGrad\u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u52fe\u914d\u964d\u4e0b\u6cd5(GD): \\mathbf{x}_{i+1} = \\mathbf{x}_i - \\eta \\nabla f Momentum: \\mathbf{x}_{i+1} = \\mathbf{x}_i - \\eta \\nabla f+ \\alpha \\Delta \\mathbf{w} AdaGrad: \\mathbf{x}_{i+1} = \\mathbf{x}_i - \\eta \\frac{1}{\\sqrt{h_i}}\\nabla f , h_{i+1} = h_i + (\\nabla f)^2 wat\u6c0f\u306e\u308f\u304b\u308a\u3084\u3059\u3044\u89e3\u8aac \u3088\u308a\u5f15\u7528","title":"\u52fe\u914d\u964d\u4e0b\u6cd5"},{"location":"nn/#_11","text":"\u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u52d5\u4f5c\u539f\u7406\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3057\u3087\u3046\u3002 \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf x_1 x_2 t 0 0 0 0 1 1 1 0 1 1 1 1","title":"\u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u539f\u7406"},{"location":"nn/#xy","text":"x = np . array ([[ 0 , 0 ], [ 0 , 1 ], [ 1 , 0 ], [ 1 , 1 ]]) t = np . array ([ 0 , 1 , 1 , 1 ]) print ( 'x.shape' , x . shape ) print ( 't.shape' , t . shape ) DIM = x . shape [ 1 ] #2 w = np . random . normal ( size = ( DIM ,)) b = 0 print ( 'w =' , w ) print ( 'b =' , b )","title":"\u5165\u529b(x)\u3068\u51fa\u529b(y)"},{"location":"nn/#_12","text":"\u6b21\u306f\u3001\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u30e2\u30c7\u30eb\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 y = \\mathbf{w} \\mathbf{x}^T + b \u4eca\u56de\u306e\u5165\u529b\u306f\u3001\uff14\u56de\u5206\u306e\u5165\u529b\u304c \\mathbf{x} \u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u3092\u30d0\u30c3\u30c1\u51e6\u7406\u3068\u3057\u3066\u3001\u4e00\u56de\u3067\u8a08\u7b97\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u30d0\u30c3\u30c1\u51e6\u7406 \u8907\u6570\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u8a08\u7b97\u3059\u308b\u3053\u3068\u3002 \uff08GPU\u306e\u6027\u80fd\u3092\u5f15\u304d\u51fa\u3059\u3068\u304d\u306b\u5fc5\u9808\u306e\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u3002\uff09 y = np . matmul ( w , x . T ) + b print ( 'y = ' , y ) \u6d3b\u6027\u5316\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u3001[0.0, 1.0]\u306e\u7bc4\u56f2\u306b\u3057\u307e\u3059\u3002 y = sigmoid ( np . matmul ( w , x . T ) + b ) print ( 'y = ' , y )","title":"\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u6570\u7406\u30e2\u30c7\u30eb"},{"location":"nn/#_13","text":"\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u3001\u8aa4\u5dee\u3092\u5c11\u306a\u304f\u3059\u308b\u3088\u3046\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u91cd\u307f\uff09\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001\u5b66\u7fd2\u3057\u307e\u3059\u3002 y \u306f\u3001\u30cb\u30e5\u30fc\u30ed\u30f3\u304b\u3089\u4e88\u60f3\u3055\u308c\u305f\u51fa\u529b\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u6b63\u89e3 t \u3068\u306e\u5dee\u5206\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002 delta = y - t delta \u52fe\u914d\u964d\u4e0b\u6cd5\u30671\u30b9\u30c6\u30c3\u30d7\u3060\u3051\u9032\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \\mathbf{w}^{(k+1)} = = \\mathbf{w}^{(k)} - \\eta \\sum_{n=1}^{N}(t_n - y_n)\\mathbf{x}_n\\\\ b^{(k+1)} == b^{(k)} - \\eta \\sum_{n=1}^N (y_n - t_n) \u7a4d\u306e\u548c\u3092 np.matmul() \u3092\u4f7f\u3063\u3066\u4e00\u5ea6\u306b\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002 eta = 0.1 # \u5b66\u7fd2\u7387 print ( 'BEFORE' ) print ( 'w =' , w ) print ( 'b =' , b ) print ( 'delta =' , delta ) dw = np . matmul ( x . T , delta ) db = delta . sum () w = w - eta * dw b = b - eta * db print ( 'w =' , w ) print ( 'b =' , b ) \u640d\u5931\u95a2\u6570\u306f\u3001\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u8aa4\u5dee\u304b\u3089\u8a08\u7b97\u3057\u307e\u3059\u3002 E(\\mathbf{w}, b) = - \\sum_{n=1}^{N} t_n \\log{y_n} + (1 - t_n)\\log{1-y_n} def compute_loss ( t , y ): return ( - t * np . log ( y ) - ( 1 - t ) * np . log ( 1 - y )) . sum () compute_loss ( t , y )","title":"\u5b66\u7fd2\u30e2\u30c7\u30eb"},{"location":"nn/#epoch","text":"\u4f55\u56de\u304b\u7e70\u308a\u8fd4\u3057\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u8aa4\u5dee\u304c\u5c0f\u3055\u304f\u53ce\u675f\u3057\u3066\u3044\u304d\u307e\u3059\u3002 x = np . array ([[ 0 , 0 ], [ 0 , 1 ], [ 1 , 0 ], [ 1 , 1 ]]) t = np . array ([ 0 , 1 , 1 , 1 ]) np . random . seed ( 0 ) #\u4e71\u6570\u3092\u56fa\u5b9a w = np . random . normal ( size = ( x . shape [ 1 ],)) # \u521d\u671f\u306e\u91cd\u307f b = 0 def forward ( y ): return sigmoid ( np . matmul ( w , x . T ) + b ) eta = 0.2 epoch = 100 yloss = [] for i in range ( epoch ): y = forward ( x ) delta = y - t w = w - eta * np . matmul ( x . T , delta ) b = b - eta * delta . sum () loss = compute_loss ( t , y ) if i % 5 == 1 : print ( f 'y[ { i } ]=' , y , f 'loss[ { i } ]' , loss ) yloss . append ( loss ) # \u30b0\u30e9\u30d5\u63cf\u753b\u7528 print ( f '\u6700\u7d42\u4e88\u6e2c\u7d50\u679c: ' , y , 'loss:' , loss ) print ( '\u6b63\u89e3: ' , t ) print ( 'w =' , w , 'b =' , b ) plt . plot ( range ( epoch ), yloss ) \u30a8\u30dd\u30c3\u30af100\u56de\u306e\u4e88\u6e2c\u7d50\u679c\u3068\u6b63\u89e3\u3092\u6bd4\u3079\u3066\u307f\u308b\u3068\u30010.5\u3092\u5883\u754c\u306b\u3057\u3066\u30010\u30681\u306b\u5206\u985e\u3059\u308c\u3070\u3001\u6b63\u89e3\u3068\u7b49\u3057\u3044\u4e88\u6e2c\u304c\u5f97\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u307e\u3060\u3001loss \u304c\u5927\u304d\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u30a8\u30dd\u30c3\u30af\u3092\u5897\u3084\u3057\u3066\u5b66\u7fd2\u3055\u305b\u308b\u3053\u3068\u3067\u3088\u308a\u660e\u78ba\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002","title":"\u30a8\u30dd\u30c3\u30af(epoch)"},{"location":"nn/#_14","text":"\u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306f\u3001\u539f\u7406\u7684\u306b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3068\u7b49\u4fa1\u3067\u3059\u3002 \uff08\u5b9f\u88c5\u3067\u9811\u5f35\u3063\u3066\u3082\uff09 \u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u306a\u554f\u984c \u3057\u304b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 **\u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u306a\u554f\u984c** \u5e7e\u4f55\u5b66\u306b\u304a\u3044\u3066\u3075\u305f\u3064\u306e\u96c6\u5408\u304c\u4e8c\u6b21\u5143\u5e73\u9762\u4e0a\u306b\u3042\u308b\u3068\u304d\u3001\u305d\u308c\u3089\u306e\u96c6\u5408\u3092\u4e00\u672c\u306e\u76f4\u7dda\u3067\u5206\u96e2\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002 __\u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u306a\u4f8b__ \u4e00\u822c\u5316\u3057\u3066\u3001$n$ \u6b21\u5143\u7a7a\u9593\u4e0a\u306e\u3075\u305f\u3064\u306e\u96c6\u5408\u3092 $n \u2212 1$ \u6b21\u5143\u306e\u8d85\u5e73\u9762\u3067 \u5206\u96e2\u3067\u304d\u308b\u3053\u3068\u3082\u7dda\u5f62\u5206\u96e2\u53ef\u80fd\u3068\u547c\u3073\u307e\u3059\u3002 \u9006\u306b\u3001\u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u554f\u984c\u3092\u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u554f\u984c\u3068\u547c\u3073\u307e\u3059\u3002","title":"\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3068\u6df1\u5c64\u5b66\u7fd2"},{"location":"nn/#_15","text":"\u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u554f\u984c\u306f\u3001\u65e5\u5e38\u7684\u306b\u5b58\u5728\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u8ad6\u7406\u56de\u8def\u306eXOR\u56de\u8def\u3082\u8a2d\u8a08\u5206\u96e2\u4e0d\u53ef\u80fd\u3067\u3059\u3002 x_1 x_2 t 0 0 0 0 1 1 1 0 1 1 1 0 \u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u4f8b \u8d64\u3044\u90e8\u5206\u304c\u5206\u96e2\u3067\u304d\u3066\u3044\u306a\u3044\u3002 Let's try \u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u5b9f\u88c5\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u3001\u7dda\u5f62\u4e0d\u5206\u96e2\u554f\u984c\u3092\u89e3\u3053\u3046\u3068\u3059\u308b\u3068\u3069\u3046\u306a\u308b\u304b\u8abf\u3079\u3066\u307f\u3088\u3046\u3002","title":"\u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u554f\u984c"},{"location":"nn/#_16","text":"\u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u554f\u984c\u3092\u89e3\u304f\u305f\u3081\u306e\u30a2\u30a4\u30c7\u30a3\u30a2\u306f\u3001\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u591a\u5c64\u5316\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \uff13\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u4f8b \u3053\u306e\u3088\u3046\u306b\u591a\u5c64\u5316\u3059\u308b\u3053\u3068\u3067\u3001\u5404\u30cb\u30e5\u30fc\u30ed\u30f3\u306e\u5b66\u7fd2\u7d50\u679c\u304c\u7d44\u307f\u5408\u308f\u3055\u3063\u3066\u3001 \u7dda\u5f62\u5206\u96e2\u4e0d\u53ef\u80fd\u306a\u554f\u984c\u3067\u3082\u8907\u6570\u306e\u5206\u96e2\u7dda\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u5206\u96e2\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002 \u3055\u3066\u3001\u300c\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3082\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01\u300d\u3068\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001 \u3061\u3087\u3063\u3068\uff11\u56de\u306e\u8b1b\u7fa9\u3067\u306f\u591a\u3059\u304e\u308b\u6c17\u304c\u3057\u307e\u3059\u306e\u3067\u91cd\u8981\u306a\u6982\u5ff5\u3060\u3051\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u9006\u8aa4\u5dee\u4f1d\u642c\u6cd5 \u30cb\u30e5\u30fc\u30ed\u30f3\u306f\u3001\u9806\u65b9\u5411\u306b\u767a\u706b\u3055\u305b\u3066\u3044\u304d\u307e\u3059\u304c\u3001\u5b66\u7fd2\u3092\u52b9\u7387\u3088\u304f\u884c\u3046\u305f\u3081\u3001\u8aa4\u5dee\u3092\u9006\u306b\u4f1d\u642c\u3055\u305b\u307e\u3059\u3002","title":"\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3"},{"location":"nn/#_17","text":"\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306f\u3001\uff14\u5c64\u4ee5\u4e0a\u306e\u5c40\u6240\u6700\u9069\u89e3\u3084\u52fe\u914d\u6d88\u5931\u306a\u3069\u306e\u6280\u8853\u7684\u306a\u554f\u984c\u306b\u3088\u3063\u3066\u3001\u5341\u5206\u306b\u5b66\u7fd2\u3055\u305b\u3089\u308c\u305a\u3001\u6027\u80fd\u3082\u82b3\u3057\u304f\u306a\u304f\u30011990\u5e74\u4ee3\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e1\u30a4\u30f3\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u5916\u308c\u3066\u3044\u307e\u3057\u305f\u3002 \u6df1\u5c64\u5b66\u7fd2\u306f\u30012006\u5e74\u306b\u3001\u30b8\u30a7\u30d5\u30ea\u30fc\u30fb\u30d2\u30f3\u30c8\u30f3\u3089\u304c\u30aa\u30fc\u30c8\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u63d0\u6848\u3057\u3001\u591a\u5c64\u3067\u3082\u5341\u5206\u306b\u5b66\u7fd2\u3067\u304d\u308b\u3088\u3046\u306b\u6539\u5584\u3057\u305f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3059\u3002 \u30aa\u30fc\u30c8\u30a8\u30f3\u30b3\u30fc\u30c0 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u7528\u3057\u305f\u6b21\u5143\u5727\u7e2e\u306e\u305f\u3081\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 Nature\u8a8c\u306b\u63b2\u8f09\u3055\u308c\u305fDeep Learning \u306e\u767a\u660e\u8005\u3089\u306e\u8ad6\u6587 https://www.cs.toronto.edu/~hinton/absps/NatureDeepReview.pdf","title":"\u6df1\u5c64\u5b66\u7fd2\u3078"},{"location":"nn/#_18","text":"\u4eca\u56de\u306f\u3001\u5c11\u3005\u96e3\u89e3\u306a\u6570\u5f0f\u304c\u51fa\u3066\u3001\u30b3\u30fc\u30c9\u3082\u300c\u3068\u3063\u6563\u3089\u304b\u3063\u305f\u300d\u611f\u3058\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002 \u3053\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u307e\u3068\u3081\u3066\u304a\u304f\u3068\u3001\u518d\u5229\u7528\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 **\u6f14\u7fd2\uff08SinglePerceptron \u30af\u30e9\u30b9\uff09** Python \u8a00\u8a9e\u306e\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3092\u4f7f\u3063\u3066\u3001 \u5358\u7d14\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306e\u30b3\u30fc\u30c9\u3092 sklearn \u98a8\u306b\u5b66\u7fd2\u3068\u4e88\u6e2c\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30e2\u30c7\u30eb\u751f\u6210\uff1a model = SinglePerceptron(lerning_rate=0.1) \u5b66\u7fd2\uff1a model.fit(X, y) \u4e88\u6e2c\uff1a y_pred = model.predict(X) \u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u306b\u3064\u3044\u3066 \u4eca\u56de\u306e\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u306f\u3001 **\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff08\u8a08\u7b97\u6a5f\u6570\u5b66II)\u306e\u5fa9\u7fd2**\u3067\u3059\u3002 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u7528\u3044\u308b\u3068\u3001\u8907\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3072\u3068\u307e\u3068\u307e\u308a\u306b\u3057\u3066\u3001 \u3088\u308a\u8907\u96d1\u306a\u6df1\u5c64\u5b66\u7fd2\u5411\u3051\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u69cb\u7bc9\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 \u672c\u683c\u7684\u306b\u6df1\u5c64\u5b66\u7fd2\u306b\u9032\u307f\u305f\u3044\u3068\u304d\u306f\u3001\u907f\u3051\u3066\u306f\u901a\u308c\u307e\u305b\u3093\u306e\u3067\u3001 \u30af\u30e9\u30b9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u6982\u5ff5\u3092\u3082\u3046\u4e00\u5ea6\u5fa9\u7fd2\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af"},{"location":"numpy/","text":"\u914d\u5217\uff08NumPy) # \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u790e\u3068\u306a\u308b\u30ea\u30b9\u30c8\u3068NumPy\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002 \u6e96\u5099 # Python\u3067\u62e1\u5f35\u6a5f\u80fd\u3092\u7528\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u3068\u304d\u306f\u3001\u307e\u305a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 Numpy\u3068\u306f # Numpy\u306f\u3001\u79d1\u5b66\u8a08\u7b97\u3084\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u6700\u3082\u3088\u304f\u4f7f\u308f\u308c\u308b\u57fa\u672c\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002 \u591a\u6b21\u5143\u914d\u5217\u3092\u52b9\u7387\u3088\u304f\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Numpy \u30e2\u30b8\u30e5\u30fc\u30eb\u3092 np \u3068\u3044\u3046\u540d\u524d\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002 import numpy as np import numpy.random as random %precision 3 \u30ea\u30b9\u30c8\u3068\u914d\u5217 # \u30ea\u30b9\u30c8\u306f\u3001\u8907\u6570\u306e\u30c7\u30fc\u30bf\u3092\u5217\u3068\u3057\u3066\u6271\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b [ ] \u3067\u56f2\u3093\u3067\u30ea\u30b9\u30c8\u3092\u4f5c\u308a\u307e\u3059\u3002 \u30ea\u30b9\u30c8\u306e\u4f8b data = [1, 2, 3, 4, 5, 6] print(data) NumPy\u914d\u5217\u306f\u3001\u79d1\u5b66\u6280\u8853\u8a08\u7b97\u306e\u305f\u3081\u958b\u767a\u3055\u308c\u305f\u30ea\u30b9\u30c8\u306e\u9ad8\u52b9\u7387\uff06\u9ad8\u901f\u7248\u3067\u3059\u3002 NumPy\u306e\u914d\u5217 : \u30ea\u30b9\u30c8\u306e\u9ad8\u901f\u7248 data = np.array([1, 2, 3, 4, 5, 6]) print(data) \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u914d\u5217\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001 NumPy\u306e\u914d\u5217\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002 \u30ea\u30b9\u30c8/\u914d\u5217\u306e\u57fa\u672c\u64cd\u4f5c # \u30ea\u30b9\u30c8\u3084\u914d\u5217\u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9(\u6dfb\u5b57)\u306b\u3088\u3063\u3066\u5185\u90e8\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Example \u4f8b\u984c\uff08\u914d\u5217\uff09 \u6b21\u306e\u914d\u5217 a \u306b\u5bfe\u3057\u3001\u6b21\u306e\u5024\u3092\u6c42\u3081\u308b\u64cd\u4f5c\u3092\u66f8\u3044\u3066\u307f\u3088\u3046 \u5165\u529b\u4f8b\uff1a a = np.array([1, 2, 3, 4, 5, 6, 7, 8]) a \u306e\u6700\u521d\u306e\u8981\u7d20 a \u306e\u8981\u7d20\u6570\u3092\u5f97\u308b a \u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u548c a \u306e\u5148\u982d\u3092\u53d6\u308a\u9664\u3044\u305f\u914d\u5217 a \u3092\u9006\u9806\u306b\u3057\u305f\u914d\u5217 a \u306e\u7dcf\u548c a \u306e\u5e73\u5747\u5024 \u6700\u521d\u306e\u8981\u7d20 print(a[0]) Warning N \u500b\u6570\u3048\u308b \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0(Python)\u3067\u306f\u3001\u539f\u5247\u3001\u300c 0\u304b\u3089 N-1 \u307e\u3067\u300d\u306e\u3088\u3046\u306b0\u304b\u3089\u6570\u3048\u307e\u3059\u3002 \u8981\u7d20\u6570\u3092\u5f97\u308b len(a) a \u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u548c a[0]+a[len(a)-1] \u6dfb\u5b57\u3092 -n \u306b\u3059\u308b\u3068\u3001\u672b\u5c3e\u304b\u3089\u4f4d\u7f6e\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 a[0]+a[-1] a \u306e\u5148\u982d\u3092\u53d6\u308a\u9664\u3044\u305f\u914d\u5217 a[1:] a \u3092\u9006\u9806\u306b\u3057\u305f\u914d\u5217 a[::-1] a \u306e\u7dcf\u548c a.sum() a \u306e\u5e73\u5747\u5024 a.mean() \u307e\u3068\u3081 # \u6570\u5217(\u6570\u5b66) \u30ea\u30b9\u30c8(Python) \u610f\u5473 \\|a\\| len(a) \u500b\u6570 a_1 a[0] \u5148\u982d\u306e\u5024 a_2 a[1] a_i a[i] i\u756a\u76ee\u306e\u5024 a_{N-1} a[len(a)-2] \u3082\u3057\u304f\u306f a[-2] a_{N} a[len(a)-1] \u3082\u3057\u304f\u306f a[-1] \u672b\u5c3e\u306e\u5024 \u914d\u5217\u306e\u6f14\u7b97 # Numpy\u306e\u914d\u5217\u306f\u3001\u79d1\u5b66\u6280\u8853\u8a08\u7b97\u7528\u306b\u958b\u767a\u3055\u308c\u305f\u305f\u3081\u3001\u30c7\u30fc\u30bf\u306f\u6f14\u7b97\u306f\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 a = np.array([1, 2, 3, 4]) b = np.array([1, 0, 0, 1]) \u914d\u5217\u306e\u548c a + b \u914d\u5217\u306e\u5dee a + b \u914d\u5217\u306e\u30b9\u30ab\u30e9\u30fc\u7a4d a * 2 \u5185\u7a4d a * b \u6b21\u5143\u306e\u5909\u66f4 a.reshape(2,2) \u95a2\u6570\u3068\u30b0\u30e9\u30d5 # \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u790e\u3068\u306a\u308bNumPy\u3068Matplotlib\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002 \u6e96\u5099 # Python\u3067\u62e1\u5f35\u6a5f\u80fd\u3092\u7528\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u3068\u304d\u306f\u3001\u307e\u305a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 Numpy\u3068\u306f # Numpy\u306f\u3001\u79d1\u5b66\u8a08\u7b97\u3084\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u6700\u3082\u3088\u304f\u4f7f\u308f\u308c\u308b\u57fa\u672c\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002 \u591a\u6b21\u5143\u914d\u5217\u3092\u52b9\u7387\u3088\u304f\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Numpy \u30e2\u30b8\u30e5\u30fc\u30eb\u3092 np \u3068\u3044\u3046\u540d\u524d\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002 import numpy as np import numpy.random as random %precision 3 Matplotlib # Matplotlib \u306f\u3001NumPy\u914d\u5217\u306a\u3069\u3092\u63cf\u753b\u3059\u308b\u5b9a\u756a\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002 \u51fa\u7248\u306b\u8010\u3048\u3046\u308b\u9ad8\u54c1\u8cea\u306a\u30b0\u30e9\u30d5\u304c\u4f5c\u753b\u3067\u304d\u307e\u3059\u3002 import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline Colab\u4e0a\u3067\u3001\u30b0\u30e9\u30d5\u3092\u65e5\u672c\u8a9e\u8868\u793a\u3057\u305f\u3044\u3068\u304d\u306f\u3001 \u65e5\u672c\u8a9e\u5316\u3055\u308c\u305fmatplotlib\u3092\u3042\u3089\u304b\u3058\u3081\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u7528\u3044\u307e\u3059\u3002 !pip install japanize_matplotlib import japanize_matplotlib #\u65e5\u672c\u8a9e\u5316 matplotlib sns.set(font=\"IPAexGothic\") #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a \u6700\u521d\u306b\u307e\u3068\u3081\u3066\u3001\u4e00\u5ea6\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002 \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6e96\u5099 import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try: import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError: !pip install japanize_matplotlib import japanize_matplotlib sns.set(font=\"IPAexGothic\") #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a \u6570\u5217\u306e\u751f\u6210 # \u6700\u5f8c\u306b\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3067\u7528\u3044\u308b\u4fbf\u5229\u306a\u6570\u5217\u306e\u751f\u6210\u3092\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u7b49\u5dee\u6570\u5217 (\u3064\u307e\u308a\u3001 range(x) \u306eNumPy\u7248) np.arange(10) # 0\u304b\u308910\u672a\u6e80\u307e\u3067\u306e\u6574\u6570\u5217 np.arange(1, 101, 5) # 1\u304b\u3089100\u307e\u3067\u306e5\u523b\u307f\u306e\u6574\u6570\u5217 \u533a\u9593\u3092\u6307\u5b9a\u3057\u305f\u6570\u5217 \u3053\u3061\u3089\u306f\u3001\u8981\u7d20\u306e\u6570\u3092\u30ba\u30d0\u30ea\u6307\u5b9a\u3057\u307e\u3059\u3002 np.linspace(-10, 10, 20) # \u533a\u9593[-10, 10] \u8981\u7d20\u657020\u306e\u6570\u5217 \u540c\u3058\u5024\u306e\u6570\u5217 20\u500b\u306e0\u304b\u3089\u306a\u308b\u6570\u5217 np.zeros(20) # 0\u304c20\u500b np.ones(15) # 1\u304c15\u500b \u4e71\u6570\u5217 np.random.rand(100) # 0.0\u304b\u30891.0\u307e\u3067\u306e\u4e71\u6570\u5217(100\u500b) np.random.randint(1, 6, 100) #1\u304b\u30896\u307e\u3067\u306e\u4e71\u6570\u5217(100\u500b) \u30b0\u30e9\u30d5\u306e\u63cf\u753b # \u6570\u5217\u306f\u3001\u30b0\u30e9\u30d5\u5316\u3059\u308b\u3068\u3001\u8996\u899a\u7684\u306b\u307f\u3084\u3059\u304f\u3001\u7279\u5fb4\u304c\u7406\u89e3\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001x, y\u306e\u6570\u5217\u3092\u8868\u793a\u3057\u3066\u307f\u3066\u3082\u3001x\u3068y\u306e\u95a2\u4fc2\u6027\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u3002 x = np.linspace(-10, 10, 100) y = np.sin(x) print(x) print(y) Matplotlib \u3067\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3057\u3066\u307f\u308b\u3068\u3001\u8996\u899a\u7684\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 x = np.linspace(-10, 10, 100) y = np.sin(x) plt.plot(x, y) plt.grid(True) Warning \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u95a2\u6570: np.sin() np.sin(x) \u306f\u3001NumPy\u7528\u306e sin(x) \u95a2\u6570\u3067\u3059\u3002\u914d\u5217 x \u306e\u5404\u8981\u7d20\u3054\u3068\u306b sin(x) \u3092\u8a08\u7b97\u3057\u307e\u3059\u3002 \u30b0\u30e9\u30d5\u306e\u66f8\u304d\u65b9 # y = sin(x) \u306e\u4f8b\u304b\u3089\u3001\u30b0\u30e9\u30d5\u306e\u66f8\u304d\u65b9\u3092\u5b66\u3073\u307e\u3057\u3087\u3046 x \u8ef8\u306e\u6570\u5217\u3092\u4f5c\u6210\u3059\u308b y \u8ef8\u306e\u6570\u5217\u3092\u8a08\u7b97\u3059\u308b \u30b0\u30e9\u30d5\u306e\u5927\u304d\u3055\u3001\u30e9\u30d9\u30eb\u306a\u3069\u3092\u8a2d\u5b9a plt.plot(x, y) \u3067\u30b0\u30e9\u30d5\u306b\u30d7\u30ed\u30c3\u30c8 x = np.linspace(-10, 10, 100) y = np.sin(x) plt.figure(figsize=(10, 2)) #\u30b0\u30e9\u30d5\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a plt.plot(x, y, label='sin(x)') plt.legend() #\u30e9\u30d9\u30eb\u306e\u8868\u793a plt.title('y=sin(x)') plt.xlabel('x') plt.ylabel('y') plt.grid(True) #\u30b0\u30ea\u30c3\u30c9 Example Let's try y=cos(x) \u306e\u30b0\u30e9\u30d5\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u3088\u3046 y=sin(x) \u3068 y=cos(x) \u3092\u540c\u3058\u30b0\u30e9\u30d5\u306b\u66f8\u3044\u3066\u307f\u3088\u3046 y=sin(x), y=sin(2x), y=sin(3x), .. \u3068\u540c\u3058\u30b0\u30e9\u30d5\u306b\u66f8\u3044\u3066\u307f\u3088\u3046 \u95a2\u6570\u30b0\u30e9\u30d5\u306e\u63cf\u753b # \u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3082\u30b0\u30e9\u30d5\u3067\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 f(x) = x^2 - 2x + 1 def f(x): return x ** 2 - 2*x + 1 x = np.linspace(-4, 4, 100) # \u533a\u9593[-4, 4]\u306b\u3059\u308b y = f(x) plt.figure(figsize=(5, 3)) #\u30b0\u30e9\u30d5\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a plt.plot(x, y, label='f(x)') plt.legend() #\u30e9\u30d9\u30eb\u306e\u8868\u793a plt.title('$y=x^2-2x+1$') # latex \u306e\u6570\u5f0f plt.xlabel('x') plt.ylabel('y') plt.grid(True) \u5186\u306e\u63cf\u753b (\u5a92\u4ecb\u5909\u6570) # \u5186\u306f\u3001 x^2 + y^2 = 1 \u3067\u3059\u306d\u3002\u3064\u307e\u308a\u3001\u5a92\u4ecb\u5909\u6570 t \u3092\u7528\u3044\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u76f4\u305b\u307e\u3059\u306d\u3002 x = cos(t) y = sin(t) t = np.linspace(-np.pi, np.pi, 100) x = np.cos(t) y = np.sin(t) plt.figure(figsize=(5,5)) plt.plot(x, y) \u6955\u5186\u3082\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 t = np.linspace(-np.pi, np.pi, 100) x = np.cos(t) y = np.sin(t) plt.figure(figsize=(5,5)) plt.plot(x, 0.5 * y) plt.ylim(-1.0, 1.0) Example Let's try \u30ea\u30b5\u30b8\u30e5\u30fc\u56f3\u5f62 \u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\u3002 \u8272\u3005\u306a\u30b0\u30e9\u30d5 # Matplotlib\u306f\u8272\u3005\u306a\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5c11\u3057\u4f8b\u3092\u307f\u306a\u304c\u3089\u66f8\u304d\u65b9\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002 \u6563\u5e03\u56f3 ( plt.scatter(x,y) ) # \u6563\u5e03\u56f3\u306f\u30012\u3064\u306e\u30c7\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u5bfe\u3057\u3066\u3001xy\u5ea7\u6a19\u4e0a\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u30b0\u30e9\u30d5\u3067\u3059\u3002\u6563\u5e03\u56f3\u3092\u66f8\u304f\u3068\u3001\u3075\u305f\u3064\u306e\u30c7\u30fc\u30bf\u306e\u95a2\u9023\u6027\u304c\u898b\u3048\u3066\u304d\u307e\u3059\u3002 \u4e00\u69d8\u4e71\u6570\u5217 X, Y\u306e\u6563\u5e03\u56f3 x = np.random.rand(100) y = np.random.rand(100) plt.figure(figsize=(4,4)) plt.scatter(x, y, marker='x') \u8272\u5206\u3051\u3057\u3066\u8868\u793a\u3059\u308b\u4f8b \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5 \u3067\u3001\u5186\u5468\u7387\u3092\u6c42\u3081\u308b\u3068\u304d\u3001\u534a\u5f84\uff11\u306e\u5186\u306e\u4e2d\u306b\u3042\u308b\u304b\u306a\u3044\u304b\u3067\u8272\u5206\u3051\u3057\u3066\u307f\u307e\u3059\u3002 # \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5 x = np.random.rand(200) y = np.random.rand(200) d = np.hypot(x, y) # \u539f\u70b9\u304b\u3089(x,y)\u306e\u8ddd\u96e2 # \u539f\u70b9\u304b\u3089\u306e\u8ddd\u96e2\u3067\u5206\u3051\u308b x_inside = x[d<1.0] y_inside = y[d<1.0] x_outside = x[d>=1.0] y_outside = y[d>=1.0] plt.figure(figsize=(5,5)) plt.scatter(x_inside,y_inside, c='pink')\u3000# \u30d4\u30f3\u30af\u8272 plt.scatter(x_outside,y_outside, c='cyan') # \u30b7\u30a2\u30f3\u8272 Warning \u914d\u5217\u306e\u30d5\u30a3\u30eb\u30bf \u30d5\u30a3\u30eb\u30bf\u306f\u3001\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3057\u305f\u5024\u3060\u3051\u6b8b\u3059\u64cd\u4f5c\u3067\u3059\u3002\u5c11\u3057\u7279\u6b8a\u3067\u3059\u304c \u914d\u5217[\u6761\u4ef6\u5f0f] \u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002 a = np.array([1,2,3,4,5,6,7,8,9]) a[a % 2 == 0] # \u5076\u6570\u304b\u3069\u3046\u304b \u68d2\u30b0\u30e9\u30d5 plt.bar() # \u68d2\u30b0\u30e9\u30d5\u306f\u3001\u30ab\u30c6\u30b4\u30ea\u30fc\u3054\u3068\u306e\u6570\u5024\u3092\u6bd4\u8f03\u3057\u305f\u3044\u6642\u306b\u4f7f\u3044\u307e\u3059\u3002 x = [1, 2, 3] y = [10, 1, 4] plt.figure(figsize=(5,3)) plt.bar(x, y, align='center', width=0.5) plt.xticks(x, ['A', 'B', 'C']) \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 # \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u3001\u7e26\u8ef8\u306b\u5ea6\u6570\u3001\u6a2a\u8ef8\u306b\u968e\u7d1a\u3092\u3068\u308a\u3001\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u72b6\u6cc1\u3092\u8996\u899a\u7684\u306b\u8a8d\u8b58\u3059\u308b\u305f\u3081\u306b\u5b9a\u756a\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002 \u30b5\u30a4\u30b3\u30ed\u309260\u56de\u3075\u3063\u305f\u3068\u304d\u306e\u5404\u76ee\u306e\u51fa\u73fe x = np.random.randint(1, 7, 60) #1\u4ee5\u4e0a7\u672a\u6e80\u306e60\u500b\u306e\u4e71\u6570 print(x) plt.hist(x, bins=6, rwidth=0.8) plt.axhline(y = 10, color='red', linestyle='--') #\u671f\u5f85\u5024\u306b\u8d64\u70b9\u6226\u3092\u5f15\u304f Warning Let's try: \u5927\u6570\u306e\u6cd5\u5247 \u30b5\u30a4\u30b3\u30ed\u3092\u3075\u308b\u56de\u6570\u3092\u5897\u3084\u3057\u3066\u307f\u3066\u3001\u504f\u308a\u304c\u5e73\u5766\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u307f\u3088\u3046\uff08\u3064\u307e\u308a\u300160\u3092\u5927\u304d\u304f\u3057\u3066\u307f\u3088\u3046\u3002\uff09 Subplot \u8907\u6570\u306e\u56f3\u3092\u8868\u793a\u3059\u308b # Subplot\u306e\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u3001\u8907\u6570\u306e\u56f3\u3092\u307f\u3084\u3059\u3044\u3088\u3046\u306b\u4e00\u679a\u306b\u307e\u3068\u3081\u3066\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # https://matplotlib.org/tutorials/introductory/pyplot.html \u3088\u308a def f(t): return np.exp(-t) * np.cos(2*np.pi*t) t1 = np.arange(0.0, 5.0, 0.1) t2 = np.arange(0.0, 5.0, 0.02) plt.figure(1) plt.subplot(2,1,1) # 1\u679a\u76ee\u306e\u4f4d\u7f6e plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k') plt.subplot(2,1,2) # 2\u679a\u76ee\u306e\u4f4d\u7f6e plt.plot(t2, np.cos(2*np.pi*t2), 'r--') plt.show() Warning subplot \u306e\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u306f \u30b0\u30e9\u30d5\u30921\u679a\u8ffd\u52a0\u3057\u3066\u3001 plt.subplot(3,1,3) \u3067\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\u3002\u3082\u3057\u304f\u306f\u3001 subplot() \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u3066\u3069\u3046\u306a\u308b\u304b\u5909\u308f\u308b\u304b\u8abf\u3079\u3066\u307f\u3088\u3046\u3002 \u3082\u3063\u3068 Matplotlib\u3092\u4f7f\u3044\u3053\u306a\u3059\u306b\u306f\uff1f # Matplotlib\u306f\u3001\u79d1\u5b66\u8ad6\u6587\u8a8c\u306b\u304a\u3044\u3066\u5b9a\u756a\u7684\u306b\u7528\u3044\u3089\u308c\u308b\u30b0\u30e9\u30d5\u4f5c\u6210\u8853\u3067\u3059\u3002 \u6a5f\u80fd\u306f\u8c4a\u5bcc\u3067\u77ed\u671f\u9593\u306b\u30de\u30b9\u30bf\u30fc\u3057\u5c3d\u304f\u305b\u308b\u3082\u306e\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002 \u4eca\u5f8c\u3001Matplotlib \u3092\u4f7f\u3063\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u307f\u308b\u3053\u3068\u304c\u5897\u3048\u307e\u3059\u304c\u3001 \u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u304c\u3042\u3063\u305f\u3089\u3001Web\u3067\u8abf\u3079\u306a\u304c\u3089\u6280\u3092\u5897\u3084\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u305c\u3072\u3001Web\u306e\u60c5\u5831\u3092\u6d3b\u7528\u3057\u3066\u4f7f\u3044\u3053\u306a\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 https://qiita.com/skotaro/items/08dc0b8c5704c94eafb9 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af # Example \u6f14\u7fd2\u554f\u984c\uff08\u30b5\u30a4\u30b3\u30ed\u306e\u76ee\u306e\u548c\uff09 n \u500b\u306e\u30b5\u30a4\u30b3\u30ed\u30921000\u56de\u632f\u3063\u305f\u3068\u304d\u306e \u30b5\u30a4\u30b3\u30ed\u306e\u76ee\u306e\u548c \u3092\u8003\u3048\u308b\u3002\u30b5\u30a4\u30b3\u30ed\u306e\u6570\u3092 1 \u304b\u3089 8 \u306b\u5897\u3084\u3057\u3066\u3044\u304f\u3068\u3001\u30b5\u30a4\u30b3\u30ed\u306e\u76ee\u306e\u548c\u306e\u983b\u5ea6\u5206\u5e03\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u3057\u3066\u63cf\u753b\u305b\u3088\u3002\u307e\u305f\u3001\u30b5\u30a4\u30b3\u30ed\u306e\u6570\u304c\u5897\u3048\u305f\u3068\u304d\u3001\u6700\u7d42\u7684\u306b\u3069\u306e\u3088\u3046\u306a\u5206\u5e03\u306b\u8fd1\u3065\u304f\u304b\u8003\u5bdf\u305b\u3088\u3002 \u4f8b \uff1a(\u53ef\u80fd\u3067\u3042\u308c\u3070\uff11\u679a\u306b\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u914d\u5217\uff08NumPy)"},{"location":"numpy/#numpy","text":"\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u790e\u3068\u306a\u308b\u30ea\u30b9\u30c8\u3068NumPy\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002","title":"\u914d\u5217\uff08NumPy)"},{"location":"numpy/#_1","text":"Python\u3067\u62e1\u5f35\u6a5f\u80fd\u3092\u7528\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u3068\u304d\u306f\u3001\u307e\u305a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002","title":"\u6e96\u5099"},{"location":"numpy/#numpy_1","text":"Numpy\u306f\u3001\u79d1\u5b66\u8a08\u7b97\u3084\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u6700\u3082\u3088\u304f\u4f7f\u308f\u308c\u308b\u57fa\u672c\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002 \u591a\u6b21\u5143\u914d\u5217\u3092\u52b9\u7387\u3088\u304f\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Numpy \u30e2\u30b8\u30e5\u30fc\u30eb\u3092 np \u3068\u3044\u3046\u540d\u524d\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002 import numpy as np import numpy.random as random %precision 3","title":"Numpy\u3068\u306f"},{"location":"numpy/#_2","text":"\u30ea\u30b9\u30c8\u306f\u3001\u8907\u6570\u306e\u30c7\u30fc\u30bf\u3092\u5217\u3068\u3057\u3066\u6271\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b [ ] \u3067\u56f2\u3093\u3067\u30ea\u30b9\u30c8\u3092\u4f5c\u308a\u307e\u3059\u3002 \u30ea\u30b9\u30c8\u306e\u4f8b data = [1, 2, 3, 4, 5, 6] print(data) NumPy\u914d\u5217\u306f\u3001\u79d1\u5b66\u6280\u8853\u8a08\u7b97\u306e\u305f\u3081\u958b\u767a\u3055\u308c\u305f\u30ea\u30b9\u30c8\u306e\u9ad8\u52b9\u7387\uff06\u9ad8\u901f\u7248\u3067\u3059\u3002 NumPy\u306e\u914d\u5217 : \u30ea\u30b9\u30c8\u306e\u9ad8\u901f\u7248 data = np.array([1, 2, 3, 4, 5, 6]) print(data) \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u914d\u5217\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001 NumPy\u306e\u914d\u5217\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002","title":"\u30ea\u30b9\u30c8\u3068\u914d\u5217"},{"location":"numpy/#_3","text":"\u30ea\u30b9\u30c8\u3084\u914d\u5217\u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9(\u6dfb\u5b57)\u306b\u3088\u3063\u3066\u5185\u90e8\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Example \u4f8b\u984c\uff08\u914d\u5217\uff09 \u6b21\u306e\u914d\u5217 a \u306b\u5bfe\u3057\u3001\u6b21\u306e\u5024\u3092\u6c42\u3081\u308b\u64cd\u4f5c\u3092\u66f8\u3044\u3066\u307f\u3088\u3046 \u5165\u529b\u4f8b\uff1a a = np.array([1, 2, 3, 4, 5, 6, 7, 8]) a \u306e\u6700\u521d\u306e\u8981\u7d20 a \u306e\u8981\u7d20\u6570\u3092\u5f97\u308b a \u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u548c a \u306e\u5148\u982d\u3092\u53d6\u308a\u9664\u3044\u305f\u914d\u5217 a \u3092\u9006\u9806\u306b\u3057\u305f\u914d\u5217 a \u306e\u7dcf\u548c a \u306e\u5e73\u5747\u5024 \u6700\u521d\u306e\u8981\u7d20 print(a[0]) Warning N \u500b\u6570\u3048\u308b \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0(Python)\u3067\u306f\u3001\u539f\u5247\u3001\u300c 0\u304b\u3089 N-1 \u307e\u3067\u300d\u306e\u3088\u3046\u306b0\u304b\u3089\u6570\u3048\u307e\u3059\u3002 \u8981\u7d20\u6570\u3092\u5f97\u308b len(a) a \u306e\u5148\u982d\u3068\u672b\u5c3e\u306e\u548c a[0]+a[len(a)-1] \u6dfb\u5b57\u3092 -n \u306b\u3059\u308b\u3068\u3001\u672b\u5c3e\u304b\u3089\u4f4d\u7f6e\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 a[0]+a[-1] a \u306e\u5148\u982d\u3092\u53d6\u308a\u9664\u3044\u305f\u914d\u5217 a[1:] a \u3092\u9006\u9806\u306b\u3057\u305f\u914d\u5217 a[::-1] a \u306e\u7dcf\u548c a.sum() a \u306e\u5e73\u5747\u5024 a.mean()","title":"\u30ea\u30b9\u30c8/\u914d\u5217\u306e\u57fa\u672c\u64cd\u4f5c"},{"location":"numpy/#_4","text":"\u6570\u5217(\u6570\u5b66) \u30ea\u30b9\u30c8(Python) \u610f\u5473 \\|a\\| len(a) \u500b\u6570 a_1 a[0] \u5148\u982d\u306e\u5024 a_2 a[1] a_i a[i] i\u756a\u76ee\u306e\u5024 a_{N-1} a[len(a)-2] \u3082\u3057\u304f\u306f a[-2] a_{N} a[len(a)-1] \u3082\u3057\u304f\u306f a[-1] \u672b\u5c3e\u306e\u5024","title":"\u307e\u3068\u3081"},{"location":"numpy/#_5","text":"Numpy\u306e\u914d\u5217\u306f\u3001\u79d1\u5b66\u6280\u8853\u8a08\u7b97\u7528\u306b\u958b\u767a\u3055\u308c\u305f\u305f\u3081\u3001\u30c7\u30fc\u30bf\u306f\u6f14\u7b97\u306f\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 a = np.array([1, 2, 3, 4]) b = np.array([1, 0, 0, 1]) \u914d\u5217\u306e\u548c a + b \u914d\u5217\u306e\u5dee a + b \u914d\u5217\u306e\u30b9\u30ab\u30e9\u30fc\u7a4d a * 2 \u5185\u7a4d a * b \u6b21\u5143\u306e\u5909\u66f4 a.reshape(2,2)","title":"\u914d\u5217\u306e\u6f14\u7b97"},{"location":"numpy/#_6","text":"\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u306e\u57fa\u790e\u3068\u306a\u308bNumPy\u3068Matplotlib\u306e\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002","title":"\u95a2\u6570\u3068\u30b0\u30e9\u30d5"},{"location":"numpy/#_7","text":"Python\u3067\u62e1\u5f35\u6a5f\u80fd\u3092\u7528\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3059\u308b\u3068\u304d\u306f\u3001\u307e\u305a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002","title":"\u6e96\u5099"},{"location":"numpy/#numpy_2","text":"Numpy\u306f\u3001\u79d1\u5b66\u8a08\u7b97\u3084\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u6700\u3082\u3088\u304f\u4f7f\u308f\u308c\u308b\u57fa\u672c\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002 \u591a\u6b21\u5143\u914d\u5217\u3092\u52b9\u7387\u3088\u304f\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Numpy \u30e2\u30b8\u30e5\u30fc\u30eb\u3092 np \u3068\u3044\u3046\u540d\u524d\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002 import numpy as np import numpy.random as random %precision 3","title":"Numpy\u3068\u306f"},{"location":"numpy/#matplotlib","text":"Matplotlib \u306f\u3001NumPy\u914d\u5217\u306a\u3069\u3092\u63cf\u753b\u3059\u308b\u5b9a\u756a\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002 \u51fa\u7248\u306b\u8010\u3048\u3046\u308b\u9ad8\u54c1\u8cea\u306a\u30b0\u30e9\u30d5\u304c\u4f5c\u753b\u3067\u304d\u307e\u3059\u3002 import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline Colab\u4e0a\u3067\u3001\u30b0\u30e9\u30d5\u3092\u65e5\u672c\u8a9e\u8868\u793a\u3057\u305f\u3044\u3068\u304d\u306f\u3001 \u65e5\u672c\u8a9e\u5316\u3055\u308c\u305fmatplotlib\u3092\u3042\u3089\u304b\u3058\u3081\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u7528\u3044\u307e\u3059\u3002 !pip install japanize_matplotlib import japanize_matplotlib #\u65e5\u672c\u8a9e\u5316 matplotlib sns.set(font=\"IPAexGothic\") #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a \u6700\u521d\u306b\u307e\u3068\u3081\u3066\u3001\u4e00\u5ea6\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002 \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6e96\u5099 import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns try: import japanize_matplotlib #matplotlib\u306e\u65e5\u672c\u8a9e\u5316 except ModuleNotFoundError: !pip install japanize_matplotlib import japanize_matplotlib sns.set(font=\"IPAexGothic\") #\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u8a2d\u5b9a","title":"Matplotlib"},{"location":"numpy/#_8","text":"\u6700\u5f8c\u306b\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3067\u7528\u3044\u308b\u4fbf\u5229\u306a\u6570\u5217\u306e\u751f\u6210\u3092\u7d39\u4ecb\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u7b49\u5dee\u6570\u5217 (\u3064\u307e\u308a\u3001 range(x) \u306eNumPy\u7248) np.arange(10) # 0\u304b\u308910\u672a\u6e80\u307e\u3067\u306e\u6574\u6570\u5217 np.arange(1, 101, 5) # 1\u304b\u3089100\u307e\u3067\u306e5\u523b\u307f\u306e\u6574\u6570\u5217 \u533a\u9593\u3092\u6307\u5b9a\u3057\u305f\u6570\u5217 \u3053\u3061\u3089\u306f\u3001\u8981\u7d20\u306e\u6570\u3092\u30ba\u30d0\u30ea\u6307\u5b9a\u3057\u307e\u3059\u3002 np.linspace(-10, 10, 20) # \u533a\u9593[-10, 10] \u8981\u7d20\u657020\u306e\u6570\u5217 \u540c\u3058\u5024\u306e\u6570\u5217 20\u500b\u306e0\u304b\u3089\u306a\u308b\u6570\u5217 np.zeros(20) # 0\u304c20\u500b np.ones(15) # 1\u304c15\u500b \u4e71\u6570\u5217 np.random.rand(100) # 0.0\u304b\u30891.0\u307e\u3067\u306e\u4e71\u6570\u5217(100\u500b) np.random.randint(1, 6, 100) #1\u304b\u30896\u307e\u3067\u306e\u4e71\u6570\u5217(100\u500b)","title":"\u6570\u5217\u306e\u751f\u6210"},{"location":"numpy/#_9","text":"\u6570\u5217\u306f\u3001\u30b0\u30e9\u30d5\u5316\u3059\u308b\u3068\u3001\u8996\u899a\u7684\u306b\u307f\u3084\u3059\u304f\u3001\u7279\u5fb4\u304c\u7406\u89e3\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001x, y\u306e\u6570\u5217\u3092\u8868\u793a\u3057\u3066\u307f\u3066\u3082\u3001x\u3068y\u306e\u95a2\u4fc2\u6027\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u3002 x = np.linspace(-10, 10, 100) y = np.sin(x) print(x) print(y) Matplotlib \u3067\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3057\u3066\u307f\u308b\u3068\u3001\u8996\u899a\u7684\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002 x = np.linspace(-10, 10, 100) y = np.sin(x) plt.plot(x, y) plt.grid(True) Warning \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u95a2\u6570: np.sin() np.sin(x) \u306f\u3001NumPy\u7528\u306e sin(x) \u95a2\u6570\u3067\u3059\u3002\u914d\u5217 x \u306e\u5404\u8981\u7d20\u3054\u3068\u306b sin(x) \u3092\u8a08\u7b97\u3057\u307e\u3059\u3002","title":"\u30b0\u30e9\u30d5\u306e\u63cf\u753b"},{"location":"numpy/#_10","text":"y = sin(x) \u306e\u4f8b\u304b\u3089\u3001\u30b0\u30e9\u30d5\u306e\u66f8\u304d\u65b9\u3092\u5b66\u3073\u307e\u3057\u3087\u3046 x \u8ef8\u306e\u6570\u5217\u3092\u4f5c\u6210\u3059\u308b y \u8ef8\u306e\u6570\u5217\u3092\u8a08\u7b97\u3059\u308b \u30b0\u30e9\u30d5\u306e\u5927\u304d\u3055\u3001\u30e9\u30d9\u30eb\u306a\u3069\u3092\u8a2d\u5b9a plt.plot(x, y) \u3067\u30b0\u30e9\u30d5\u306b\u30d7\u30ed\u30c3\u30c8 x = np.linspace(-10, 10, 100) y = np.sin(x) plt.figure(figsize=(10, 2)) #\u30b0\u30e9\u30d5\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a plt.plot(x, y, label='sin(x)') plt.legend() #\u30e9\u30d9\u30eb\u306e\u8868\u793a plt.title('y=sin(x)') plt.xlabel('x') plt.ylabel('y') plt.grid(True) #\u30b0\u30ea\u30c3\u30c9 Example Let's try y=cos(x) \u306e\u30b0\u30e9\u30d5\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u3088\u3046 y=sin(x) \u3068 y=cos(x) \u3092\u540c\u3058\u30b0\u30e9\u30d5\u306b\u66f8\u3044\u3066\u307f\u3088\u3046 y=sin(x), y=sin(2x), y=sin(3x), .. \u3068\u540c\u3058\u30b0\u30e9\u30d5\u306b\u66f8\u3044\u3066\u307f\u3088\u3046","title":"\u30b0\u30e9\u30d5\u306e\u66f8\u304d\u65b9"},{"location":"numpy/#_11","text":"\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3082\u30b0\u30e9\u30d5\u3067\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 f(x) = x^2 - 2x + 1 def f(x): return x ** 2 - 2*x + 1 x = np.linspace(-4, 4, 100) # \u533a\u9593[-4, 4]\u306b\u3059\u308b y = f(x) plt.figure(figsize=(5, 3)) #\u30b0\u30e9\u30d5\u306e\u5927\u304d\u3055\u3092\u6307\u5b9a plt.plot(x, y, label='f(x)') plt.legend() #\u30e9\u30d9\u30eb\u306e\u8868\u793a plt.title('$y=x^2-2x+1$') # latex \u306e\u6570\u5f0f plt.xlabel('x') plt.ylabel('y') plt.grid(True)","title":"\u95a2\u6570\u30b0\u30e9\u30d5\u306e\u63cf\u753b"},{"location":"numpy/#_12","text":"\u5186\u306f\u3001 x^2 + y^2 = 1 \u3067\u3059\u306d\u3002\u3064\u307e\u308a\u3001\u5a92\u4ecb\u5909\u6570 t \u3092\u7528\u3044\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u76f4\u305b\u307e\u3059\u306d\u3002 x = cos(t) y = sin(t) t = np.linspace(-np.pi, np.pi, 100) x = np.cos(t) y = np.sin(t) plt.figure(figsize=(5,5)) plt.plot(x, y) \u6955\u5186\u3082\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 t = np.linspace(-np.pi, np.pi, 100) x = np.cos(t) y = np.sin(t) plt.figure(figsize=(5,5)) plt.plot(x, 0.5 * y) plt.ylim(-1.0, 1.0) Example Let's try \u30ea\u30b5\u30b8\u30e5\u30fc\u56f3\u5f62 \u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\u3002","title":"\u5186\u306e\u63cf\u753b (\u5a92\u4ecb\u5909\u6570)"},{"location":"numpy/#_13","text":"Matplotlib\u306f\u8272\u3005\u306a\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5c11\u3057\u4f8b\u3092\u307f\u306a\u304c\u3089\u66f8\u304d\u65b9\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002","title":"\u8272\u3005\u306a\u30b0\u30e9\u30d5"},{"location":"numpy/#pltscatterxy","text":"\u6563\u5e03\u56f3\u306f\u30012\u3064\u306e\u30c7\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u5bfe\u3057\u3066\u3001xy\u5ea7\u6a19\u4e0a\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u30b0\u30e9\u30d5\u3067\u3059\u3002\u6563\u5e03\u56f3\u3092\u66f8\u304f\u3068\u3001\u3075\u305f\u3064\u306e\u30c7\u30fc\u30bf\u306e\u95a2\u9023\u6027\u304c\u898b\u3048\u3066\u304d\u307e\u3059\u3002 \u4e00\u69d8\u4e71\u6570\u5217 X, Y\u306e\u6563\u5e03\u56f3 x = np.random.rand(100) y = np.random.rand(100) plt.figure(figsize=(4,4)) plt.scatter(x, y, marker='x') \u8272\u5206\u3051\u3057\u3066\u8868\u793a\u3059\u308b\u4f8b \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5 \u3067\u3001\u5186\u5468\u7387\u3092\u6c42\u3081\u308b\u3068\u304d\u3001\u534a\u5f84\uff11\u306e\u5186\u306e\u4e2d\u306b\u3042\u308b\u304b\u306a\u3044\u304b\u3067\u8272\u5206\u3051\u3057\u3066\u307f\u307e\u3059\u3002 # \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5 x = np.random.rand(200) y = np.random.rand(200) d = np.hypot(x, y) # \u539f\u70b9\u304b\u3089(x,y)\u306e\u8ddd\u96e2 # \u539f\u70b9\u304b\u3089\u306e\u8ddd\u96e2\u3067\u5206\u3051\u308b x_inside = x[d<1.0] y_inside = y[d<1.0] x_outside = x[d>=1.0] y_outside = y[d>=1.0] plt.figure(figsize=(5,5)) plt.scatter(x_inside,y_inside, c='pink')\u3000# \u30d4\u30f3\u30af\u8272 plt.scatter(x_outside,y_outside, c='cyan') # \u30b7\u30a2\u30f3\u8272 Warning \u914d\u5217\u306e\u30d5\u30a3\u30eb\u30bf \u30d5\u30a3\u30eb\u30bf\u306f\u3001\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3057\u305f\u5024\u3060\u3051\u6b8b\u3059\u64cd\u4f5c\u3067\u3059\u3002\u5c11\u3057\u7279\u6b8a\u3067\u3059\u304c \u914d\u5217[\u6761\u4ef6\u5f0f] \u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002 a = np.array([1,2,3,4,5,6,7,8,9]) a[a % 2 == 0] # \u5076\u6570\u304b\u3069\u3046\u304b","title":"\u6563\u5e03\u56f3 (plt.scatter(x,y))"},{"location":"numpy/#pltbar","text":"\u68d2\u30b0\u30e9\u30d5\u306f\u3001\u30ab\u30c6\u30b4\u30ea\u30fc\u3054\u3068\u306e\u6570\u5024\u3092\u6bd4\u8f03\u3057\u305f\u3044\u6642\u306b\u4f7f\u3044\u307e\u3059\u3002 x = [1, 2, 3] y = [10, 1, 4] plt.figure(figsize=(5,3)) plt.bar(x, y, align='center', width=0.5) plt.xticks(x, ['A', 'B', 'C'])","title":"\u68d2\u30b0\u30e9\u30d5 plt.bar()"},{"location":"numpy/#_14","text":"\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306f\u3001\u7e26\u8ef8\u306b\u5ea6\u6570\u3001\u6a2a\u8ef8\u306b\u968e\u7d1a\u3092\u3068\u308a\u3001\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u72b6\u6cc1\u3092\u8996\u899a\u7684\u306b\u8a8d\u8b58\u3059\u308b\u305f\u3081\u306b\u5b9a\u756a\u306e\u30b0\u30e9\u30d5\u3067\u3059\u3002 \u30b5\u30a4\u30b3\u30ed\u309260\u56de\u3075\u3063\u305f\u3068\u304d\u306e\u5404\u76ee\u306e\u51fa\u73fe x = np.random.randint(1, 7, 60) #1\u4ee5\u4e0a7\u672a\u6e80\u306e60\u500b\u306e\u4e71\u6570 print(x) plt.hist(x, bins=6, rwidth=0.8) plt.axhline(y = 10, color='red', linestyle='--') #\u671f\u5f85\u5024\u306b\u8d64\u70b9\u6226\u3092\u5f15\u304f Warning Let's try: \u5927\u6570\u306e\u6cd5\u5247 \u30b5\u30a4\u30b3\u30ed\u3092\u3075\u308b\u56de\u6570\u3092\u5897\u3084\u3057\u3066\u307f\u3066\u3001\u504f\u308a\u304c\u5e73\u5766\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u307f\u3088\u3046\uff08\u3064\u307e\u308a\u300160\u3092\u5927\u304d\u304f\u3057\u3066\u307f\u3088\u3046\u3002\uff09","title":"\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0"},{"location":"numpy/#subplot","text":"Subplot\u306e\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u3001\u8907\u6570\u306e\u56f3\u3092\u307f\u3084\u3059\u3044\u3088\u3046\u306b\u4e00\u679a\u306b\u307e\u3068\u3081\u3066\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 # https://matplotlib.org/tutorials/introductory/pyplot.html \u3088\u308a def f(t): return np.exp(-t) * np.cos(2*np.pi*t) t1 = np.arange(0.0, 5.0, 0.1) t2 = np.arange(0.0, 5.0, 0.02) plt.figure(1) plt.subplot(2,1,1) # 1\u679a\u76ee\u306e\u4f4d\u7f6e plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k') plt.subplot(2,1,2) # 2\u679a\u76ee\u306e\u4f4d\u7f6e plt.plot(t2, np.cos(2*np.pi*t2), 'r--') plt.show() Warning subplot \u306e\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u306f \u30b0\u30e9\u30d5\u30921\u679a\u8ffd\u52a0\u3057\u3066\u3001 plt.subplot(3,1,3) \u3067\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\u3002\u3082\u3057\u304f\u306f\u3001 subplot() \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u3066\u3069\u3046\u306a\u308b\u304b\u5909\u308f\u308b\u304b\u8abf\u3079\u3066\u307f\u3088\u3046\u3002","title":"Subplot \u8907\u6570\u306e\u56f3\u3092\u8868\u793a\u3059\u308b"},{"location":"numpy/#matplotlib_1","text":"Matplotlib\u306f\u3001\u79d1\u5b66\u8ad6\u6587\u8a8c\u306b\u304a\u3044\u3066\u5b9a\u756a\u7684\u306b\u7528\u3044\u3089\u308c\u308b\u30b0\u30e9\u30d5\u4f5c\u6210\u8853\u3067\u3059\u3002 \u6a5f\u80fd\u306f\u8c4a\u5bcc\u3067\u77ed\u671f\u9593\u306b\u30de\u30b9\u30bf\u30fc\u3057\u5c3d\u304f\u305b\u308b\u3082\u306e\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002 \u4eca\u5f8c\u3001Matplotlib \u3092\u4f7f\u3063\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u307f\u308b\u3053\u3068\u304c\u5897\u3048\u307e\u3059\u304c\u3001 \u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u304c\u3042\u3063\u305f\u3089\u3001Web\u3067\u8abf\u3079\u306a\u304c\u3089\u6280\u3092\u5897\u3084\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u305c\u3072\u3001Web\u306e\u60c5\u5831\u3092\u6d3b\u7528\u3057\u3066\u4f7f\u3044\u3053\u306a\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 https://qiita.com/skotaro/items/08dc0b8c5704c94eafb9","title":"\u3082\u3063\u3068 Matplotlib\u3092\u4f7f\u3044\u3053\u306a\u3059\u306b\u306f\uff1f"},{"location":"numpy/#_15","text":"Example \u6f14\u7fd2\u554f\u984c\uff08\u30b5\u30a4\u30b3\u30ed\u306e\u76ee\u306e\u548c\uff09 n \u500b\u306e\u30b5\u30a4\u30b3\u30ed\u30921000\u56de\u632f\u3063\u305f\u3068\u304d\u306e \u30b5\u30a4\u30b3\u30ed\u306e\u76ee\u306e\u548c \u3092\u8003\u3048\u308b\u3002\u30b5\u30a4\u30b3\u30ed\u306e\u6570\u3092 1 \u304b\u3089 8 \u306b\u5897\u3084\u3057\u3066\u3044\u304f\u3068\u3001\u30b5\u30a4\u30b3\u30ed\u306e\u76ee\u306e\u548c\u306e\u983b\u5ea6\u5206\u5e03\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u3057\u3066\u63cf\u753b\u305b\u3088\u3002\u307e\u305f\u3001\u30b5\u30a4\u30b3\u30ed\u306e\u6570\u304c\u5897\u3048\u305f\u3068\u304d\u3001\u6700\u7d42\u7684\u306b\u3069\u306e\u3088\u3046\u306a\u5206\u5e03\u306b\u8fd1\u3065\u304f\u304b\u8003\u5bdf\u305b\u3088\u3002 \u4f8b \uff1a(\u53ef\u80fd\u3067\u3042\u308c\u3070\uff11\u679a\u306b\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af"},{"location":"old/","text":"Pandas \u3068\u306f # Pandas \u3068\u306f\u3001\u8868\u30c7\u30fc\u30bf\u3092\u6271\u3046Python \u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3001 \u8868\u8a08\u7b97\u30bd\u30d5\u30c8 (Excel)\u3084\u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u64cd\u4f5c\u3092 Python \u304b\u3089\u624b\u8efd\u306b\u884c\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u308c\u307e\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b pandas \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 import pandas as pd Pandas \u306f\u3001\u3068\u3066\u3082\u9ad8\u6a5f\u80fd\u3067\u3059\u3002 \u672c\u8b1b\u7fa9\u3067\u306f\u3001Pandas \u3067\u30c7\u30fc\u30bf\u5206\u6790\u3092\u3059\u308b\u5fc5\u9808\u306e\u6a5f\u80fd\u3060\u3051\u7d39\u4ecb\u3057\u3001\u30cf\u30f3\u30ba\u30aa\u30f3\u6f14\u7fd2\u3067\u4f53\u9a13\u3057\u307e\u3059\u3002 \u6697\u8a18\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u3069\u3046\u3044\u3046\u30c7\u30fc\u30bf\u51e6\u7406\u3084\u64cd\u4f5c\u304c\u3067\u304d\u308b\u304b\u3001\u899a\u3048\u307e\u3057\u3087\u3046\u3002 \u4f7f\u3046\u3068\u304d\u306f\u3001Google \u7b49\u3067\u8abf\u3079\u306a\u304c\u3089\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002 %%file arashi.csv \u540d\u524d,\u51fa\u8eab,\u751f\u5e74,\u8eab\u9577,\u8840\u6db2\u578b \u76f8\u8449\u96c5\u7d00,\u5343\u8449,1982,175,AB \u677e\u672c\u6f64,\u6771\u4eac\u90fd,1983,172,A \u4e8c\u5bae\u548c\u4e5f,\u6771\u4eac\u90fd,1983,168,A \u5927\u91ce\u667a,\u6771\u4eac\u90fd,1980,166,A \u6afb\u4e95\u7fd4,\u6771\u4eac\u90fd,1982,171,A","title":"Old"},{"location":"old/#pandas","text":"Pandas \u3068\u306f\u3001\u8868\u30c7\u30fc\u30bf\u3092\u6271\u3046Python \u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3001 \u8868\u8a08\u7b97\u30bd\u30d5\u30c8 (Excel)\u3084\u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u64cd\u4f5c\u3092 Python \u304b\u3089\u624b\u8efd\u306b\u884c\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u308c\u307e\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b pandas \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 import pandas as pd Pandas \u306f\u3001\u3068\u3066\u3082\u9ad8\u6a5f\u80fd\u3067\u3059\u3002 \u672c\u8b1b\u7fa9\u3067\u306f\u3001Pandas \u3067\u30c7\u30fc\u30bf\u5206\u6790\u3092\u3059\u308b\u5fc5\u9808\u306e\u6a5f\u80fd\u3060\u3051\u7d39\u4ecb\u3057\u3001\u30cf\u30f3\u30ba\u30aa\u30f3\u6f14\u7fd2\u3067\u4f53\u9a13\u3057\u307e\u3059\u3002 \u6697\u8a18\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u3069\u3046\u3044\u3046\u30c7\u30fc\u30bf\u51e6\u7406\u3084\u64cd\u4f5c\u304c\u3067\u304d\u308b\u304b\u3001\u899a\u3048\u307e\u3057\u3087\u3046\u3002 \u4f7f\u3046\u3068\u304d\u306f\u3001Google \u7b49\u3067\u8abf\u3079\u306a\u304c\u3089\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002 %%file arashi.csv \u540d\u524d,\u51fa\u8eab,\u751f\u5e74,\u8eab\u9577,\u8840\u6db2\u578b \u76f8\u8449\u96c5\u7d00,\u5343\u8449,1982,175,AB \u677e\u672c\u6f64,\u6771\u4eac\u90fd,1983,172,A \u4e8c\u5bae\u548c\u4e5f,\u6771\u4eac\u90fd,1983,168,A \u5927\u91ce\u667a,\u6771\u4eac\u90fd,1980,166,A \u6afb\u4e95\u7fd4,\u6771\u4eac\u90fd,1982,171,A","title":"Pandas \u3068\u306f"},{"location":"pandas/","text":"\u524d\u51e6\u7406: Pandas\u3092\u4f7f\u3044\u3053\u306a\u305d\u3046 # \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001 \u30c7\u30fc\u30bf\u5206\u6790\u3092\u59cb\u3081\u308b\u524d\u306b\u3001\u30c7\u30fc\u30bf\u5206\u6790\u304c\u884c\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u52a0\u5de5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u51e6\u7406\u3092 \u524d\u51e6\u7406 \u3068\u547c\u3073\u307e\u3059\u3002 \u4eca\u307e\u3067\u306f\u3001 \u6bd4\u8f03\u7684\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u306e\u5b66\u7fd2\u7528\u306b\u52a0\u5de5\u3055\u308c\u305f\u524d\u51e6\u7406\u6e08\u307f\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001 Pandas\u3092\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3001\u524d\u51e6\u7406\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4f5c\u6210\u3068\u4fdd\u5b58 # Pandas \u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306f\u3001\u8272\u3005\u306a\u65b9\u6cd5\u3067\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4eca\u307e\u3067\u7fd2\u3063\u305f\u65b9\u6cd5\u4e3b\u306a\u65b9\u6cd5 pd.read_csv('file.csv') : CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3080 pd.DataFrame(data) : \u30c7\u30fc\u30bf\u5217\u304b\u3089\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u308b \u307e\u305a\u3001\u7df4\u7fd2\u7528\u306e\u5c0f\u3055\u306a\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7528\u610f\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u306e\u4f5c\u6210 # \u307e\u305a\u3001\u30c7\u30fc\u30bf\u5217\u304b\u3089\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u308b\u65b9\u6cd5\u3092\u307f\u307e\u3057\u3087\u3046\u3002 \u57fa\u672c\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u3001\u30ab\u30e9\u30e0\u540d\u3092\u30ad\u30fc\u3001\u30c7\u30fc\u30bf\u5217\u3092\u5024\u3068\u3057\u305f\u8f9e\u66f8\u3092\u5b9a\u7fa9\u3057\u3001 \u305d\u3053\u304b\u3089 pd.DataFrame() \u3092\u4f7f\u3063\u3066\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u8f9e\u66f8\u304b\u3089\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3078 data = { '\u540d\u524d' : [ '\u76f8\u8449\u96c5\u7d00' , '\u677e\u672c\u6f64' , '\u4e8c\u5bae\u548c\u4e5f' , '\u5927\u91ce\u667a' , '\u6afb\u4e95\u7fd4' ], '\u51fa\u8eab' : [ '\u5343\u8449' , '\u6771\u4eac' , '\u6771\u4eac' , '\u6771\u4eac' , '\u6771\u4eac' ], '\u751f\u5e74' : [ 1982 , 1983 , 1983 , 1980 , 1982 ], '\u8eab\u9577' : [ 175 , 172 , 168 , 166 , 171 ], '\u8840\u6db2\u578b' : [ 'AB' , 'A' , 'A' , 'A' , 'A' ], } df = pd . DataFrame ( data ) \u3082\u3046\u4e00\u3064\u306f\u3001\u30c7\u30fc\u30bf\u5217\u3092\u30bf\u30d7\u30eb\u306b\u3057\u3066\u3001\u30c7\u30fc\u30bf\u5217\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u884c\u306e\u30ea\u30b9\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3078 columns = [ '\u540d\u524d' , '\u51fa\u8eab' , '\u751f\u5e74' , '\u8eab\u9577' , '\u8840\u6db2\u578b' ] data = [ ( '\u76f8\u8449\u96c5\u7d00' , '\u5343\u8449' , 1982 , 175 , 'AB' ), ( '\u677e\u672c\u6f64' , '\u6771\u4eac\u90fd' , 1983 , 172 , 'A' ), ( '\u4e8c\u5bae\u548c\u4e5f' , '\u6771\u4eac\u90fd' , 1983 , 168 , 'A' ), ( '\u5927\u91ce\u667a' , '\u6771\u4eac\u90fd' , 1980 , 166 , 'A' ), ( '\u6afb\u4e95\u7fd4' , '\u6771\u4eac\u90fd' , 1982 , 171 , 'A' ), ] df = pd . DataFrame ( data , columns = columns ) \u3069\u3061\u3089\u306e\u65b9\u6cd5\u3067\u3082\u540c\u3058\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304c\u5f97\u3089\u308c\u307e\u3059\u3002 \u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u78ba\u8a8d df . head () \u30c7\u30fc\u30bf\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u3054\u6307\u6458\u3092\u53d7\u3051\u307e\u3059\u304c.. \u4e00\u90e8\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u6307\u6458\u3092\u3088\u304f\u53d7\u3051\u307e\u3059\u3002 \u3069\u3046\u305e\u3001\u5404\u81ea\u3067\u3054\u81ea\u7531\u306b\u3001\u3054\u4fee\u6b63\u3057\u3066\u7df4\u7fd2\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4fdd\u5b58 # Pandas \u3067\u64cd\u4f5c\u3057\u305f\u8868\u30c7\u30fc\u30bf\u306f\u3001 .to_csv() \u3067CSV\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3067\u304d\u307e\u3059\u3002 CSV\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58 df . to_csv ( 'arashi.csv' , index = False , \u3000 encoding = 'utf_8_sig' ) Excel\u3067\u958b\u3044\u3066\u6587\u5b57\u5316\u3051\u3059\u308b\u3068\u304d\u306f\uff1f Windows \u306f\u3001\u6a19\u6e96\u3067ShiftJIS\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u5148\u982d\u306bBOM\u3068\u547c\u3070\u308c\u308b\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u8b58\u5225\u3059\u308b\u8a18\u53f7\u3092\u5165\u308c\u308b\u3068\u3001 \u6587\u5b57\u5316\u3051\u306a\u304fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u30a8\u30af\u30bb\u30eb\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58 df . to_excel ( 'arashi.xlsx' ) \u57fa\u672c\u64cd\u4f5c # Pandas \u306f\u3001\u8868\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u3088\u304f\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002 Pandas \u7528\u8a9e\u3067\u306f\u3001\u8868\u30c7\u30fc\u30bf\u306e\u3053\u3068\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0(DataFrame)\u3068\u547c\u3073\u307e\u3059\u304c\u3001\u672c\u8cc7\u6599\u3067\u306f\u8868\u30c7\u30fc\u30bf\u3068\u547c\u3073\u307e\u3059\u3002 \u78ba\u8a8d\uff1aPandas\u7528\u8a9e \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 : \u8868\u30c7\u30fc\u30bf\u306e\u3053\u3068 \u30ab\u30e9\u30e0 : \u5217\u65b9\u5411\u306e\u30c7\u30fc\u30bf \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 : \u884c\u65b9\u5411\u306e\u30c7\u30fc\u30bf \u30ab\u30e9\u30e0\u540d\u304b\u3089\u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3059 # Pandas\u306f\u3001\u4eca\u307e\u307e\u3067\u304d\u3066\u304d\u305f\u3068\u304a\u308a\u3001\u30ab\u30e9\u30e0\u3054\u3068\u306e\u30c7\u30fc\u30bf\u51e6\u7406\u304c\u591a\u304f\u306a\u308a\u307e\u3059\u3002 \u307e\u305a\u3001\u30ab\u30e9\u30e0\u540d '\u540d\u524d' \u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u5217\u306e\u53d6\u308a\u51fa\u3057 df [ '\u540d\u524d' ] \u53d6\u308a\u51fa\u3057\u305f\u30c7\u30fc\u30bf\u5217\u306f\u3001Python\u306e\u5217(\u30b7\u30fc\u30b1\u30f3\u30b9\uff09\u3068\u3057\u3066\u3001 for \u6587\u306a\u3069\u3067\u3072\u3068\u3064\u305a\u3064\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 for\u6587\u306b\u3088\u308b\u30c7\u30fc\u30bf\u5217\u306e\u51e6\u7406 for name in df['\u540d\u524d']: print(name) \u76f8\u8449\u96c5\u7d00 \u677e\u672c\u6f64 \u4e8c\u5bae\u548c\u4e5f \u5927\u91ce\u667a \u6afb\u4e95\u7fd4 \u8907\u6570\u306e\u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3057\u3066\u540c\u6642\u306b\u51e6\u7406\u3057\u305f\u3044\u6642\u306f\u3001 zip \u3092\u4f7f\u3044\u307e\u3059\u3002 \u8907\u6570\u306e\u30c7\u30fc\u30bf\u5217\u306e\u53d6\u308a\u51fa\u3057 for name , blood in zip ( df [ '\u540d\u524d' ], df [ '\u8840\u6db2\u578b' ]): print ( name , blood ) \u76f8\u8449\u96c5\u7d00 AB \u677e\u672c\u6f64 A \u4e8c\u5bae\u548c\u4e5f A \u5927\u91ce\u667a A \u6afb\u4e95\u7fd4 A \u5217\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0 # \u65b0\u3057\u3044\u30ab\u30e9\u30e0\u3001\u3064\u307e\u308a\u7e26\u65b9\u5411\u306e\u5217\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u8868\u30c7\u30fc\u30bf\u4e2d\u306b\u306f\u3001\uff15\u4eba\u5206\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308b\u305f\u3081\u3001 \u30ea\u30b9\u30c8\u3068\u3057\u3066\uff15\u4eba\u5206\u306e\u30c7\u30fc\u30bf\u3092\u4ee3\u5165\u3059\u308b\u3068\u3001\u65b0\u3057\u3044\u5c5e\u6027\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4f8b. \u6027\u5225\u3092\u8ffd\u52a0\u3059\u308b df [ '\u6027\u5225' ] = [ '\u7537\u6027' , '\u7537\u6027' , '\u7537\u6027' , '\u7537\u6027' , '\u7537\u6027' ] \u30a8\u30af\u30bb\u30eb\u306e\u3088\u3046\u306b\u30ab\u30e9\u30e0\u306e\u5024\u304b\u3089\u8a08\u7b97\u3057\u3066\u3001\u65b0\u3057\u3044\u30ab\u30e9\u30e0\u3092\u4f5c\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u8a08\u7b97\u7d50\u679c\u306b\u3088\u308b\u65b0\u3057\u3044\u30ab\u30e9\u30e0 df [ '\u5e74\u9f62' ] = 2022 - df [ '\u751f\u5e74' ] df . head () n\u884c\u76ee\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059 # \u8868\u30c7\u30fc\u30bf\u306e\u884c\u3054\u3068\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u3001 .iloc \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u901a\u3057\u3066\u884c\u307e\u3059\u3002 \u6700\u521d\u306e\u884c\u3092\u62bd\u51fa df . iloc [ 0 ] \u540d\u524d \u76f8\u8449\u96c5\u7d00 \u51fa\u8eab \u5343\u8449 \u751f\u5e74 1982 \u8eab\u9577 175 \u8840\u6db2\u578b AB \u6027\u5225 \u7537\u6027 \u5e74\u9f62 40 Name: 0, dtype: object Pandas\u306f\u5f37\u529b\u306a\u30c7\u30fc\u30bf\u64cd\u4f5c\u306e\u6a5f\u80fd\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3042\u307e\u308a\u4f7f\u3046\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\uff11\u884c\u305a\u3064\u53d6\u308a\u51fa\u3057\u3066\u51e6\u7406\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \uff11\u884c\u305a\u3064\u51e6\u7406\u3059\u308b for row in df . iloc : print ( row ) ['\u76f8\u8449\u96c5\u7d00' '\u5343\u8449' 1982 175 'AB' '\u7537\u6027' 40] ['\u677e\u672c\u6f64' '\u6771\u4eac\u90fd' 1983 172 'A' '\u7537\u6027' 39] ['\u4e8c\u5bae\u548c\u4e5f' '\u6771\u4eac\u90fd' 1983 168 'A' '\u7537\u6027' 39] ['\u5927\u91ce\u667a' '\u6771\u4eac\u90fd' 1980 166 'A' '\u7537\u6027' 42] ['\u6afb\u4e95\u7fd4' '\u6771\u4eac\u90fd' 1982 171 'A' '\u7537\u6027' 40] \u30bb\u30eb\u306e\u5024 # \u30ab\u30e9\u30e0\u540d\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3001 \u8868\u30c7\u30fc\u30bf\u3092\u30bb\u30eb\u306e\u5024\u3092\u6307\u5b9a\u3057\u3066\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30bb\u30eb\u306e\u5024 df['\u51fa\u8eab'][0] \u5343\u8449 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u64cd\u4f5c # Pandas \u306e \u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u4ee3\u6570 \u306e\u64cd\u4f5c\u3092\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5b9f\u7fd2\u3092\u5c65\u4fee\u3057\u3066\u3044\u308b\u4eba\u306f\u3001SQL\u3092\u601d\u3044\u51fa\u3057\u306a\u304c\u3089\u8a66\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 SQL\u3063\u3066\u4f55\uff1f \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u30fc\u8a00\u8a9e\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3067\u306f\u5b9a\u756a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u5c04\u5f71(projection) # \u5c04\u5f71\uff08projection\uff09\u306f\u3001\u8868\u30c7\u30fc\u30bf\u304b\u3089\u30ab\u30e9\u30e0\u3092\u9650\u5b9a\u3057\u305f\u8868\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u64cd\u4f5c\u3067\u3059\u3002 SQL\u306e\u4f8b; \u540d\u524d\u3068\u751f\u5e74\u3001\u8840\u6db2\u578b\u306e\u307f\u62bd\u51fa SELECT \u540d\u524d , \u751f\u5e74 , \u8840\u6db2\u578b FROM df Pandas\u3067\u306f\u3001\u62bd\u51fa\u3057\u305f\u3044\u30ab\u30e9\u30e0\u540d\u3092\u30ea\u30b9\u30c8\u306b\u3057\u3066\u6e21\u3057\u307e\u3059\u3002 pandas df[['\u540d\u524d', '\u751f\u5e74', '\u8840\u6db2\u578b']] \u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001 \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u3092\u53d6\u308a\u51fa\u3059\u3068\u304d\u306b\u3088\u304f\u7528\u3044\u307e\u3059\u3002 \u9078\u629e(selection) # \u9078\u629e\u306f\u3001SQL\u3067\u306f\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u5408\u3046\u884c\u3092\u53d6\u308a\u51fa\u3059\u57fa\u672c\u64cd\u4f5c\u3067\u3059\u3002 Pandas\u3067\u306f\u3001 query() \u30e1\u30bd\u30c3\u30c9\u3067SQL\u98a8\u306e\u6761\u4ef6\u3092\u8a18\u8ff0\u3059\u308b\u65b9\u6cd5\u3068 NumPy\u98a8\u306b\u30de\u30b9\u30af\u3057\u3066\u30d5\u30a3\u30eb\u30bf\u3059\u308b\u65b9\u6cd5\u306e\uff12\u7a2e\u985e\u3042\u308a\u307e\u3059\u3002 SQL\u30af\u30a8\u30ea\u30fc SELECT * FROM df WHERE \u8eab\u9577 >= 170 Pandas: query() df . query ( '\u8eab\u9577 >= 170' ) Pandas: NumPy\u98a8\u30d5\u30a3\u30eb\u30bf df [ df [ '\u8eab\u9577' ] >= 170 ] \u3088\u308a\u8907\u96d1\u306a\u6761\u4ef6\u3082\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 SQL SELECT * FROM df WHERE \u8eab\u9577 >= 170 AND \u8840\u6db2\u578b == \"A\" query()\u3092\u4f7f\u3046 df . query ( '\u8eab\u9577 >= 170 and \u8840\u6db2\u578b == \"A\"' ) NumPy\u98a8\u30d5\u30a3\u30eb\u30bf df [( df [ '\u8eab\u9577' ] >= 170 ) & ( df [ '\u8840\u6db2\u578b' ] == \"A\" )] \u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306e\u96c6\u8a08 # groupby() \u306f\u3001\u540c\u3058\u5024\u3092\u6301\u3064\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u3001\u7d71\u8a08\u51e6\u7406\u3092\u884c\u3044\u3068\u304d\u306b\u4f7f\u3044\u307e\u3059\u3002 \u4f8b. \u8840\u6db2\u578b\u3054\u3068\u306b\u5e73\u5747(mean)\u3092\u3068\u308b df.groupby('\u8840\u6db2\u578b').mean() \u57fa\u790e\u7d71\u8a08\u91cf\u3092\u5168\u3066\u307f\u305f\u3044\u3068\u304d df.groupby('\u8840\u6db2\u578b').describe() groupby() \u306f\u3001\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u96c6\u8a08\u3057\u3066\u64cd\u4f5c\u3059\u308b\u3068\u304d\u306b\u3001\u91cd\u5b9d\u3057\u307e\u3059\u3002 \u305d\u308c\u305e\u308c\u306e\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u8868(df)\u3092\u53d6\u308a\u51fa\u3059\u3068\u304d\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u64cd\u4f5c\u3057\u307e\u3059\u3002 \u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u53d6\u308a\u51fa\u3059 for key, df2 in df.groupby('\u8840\u6db2\u578b'): print(key, df2) A \u540d\u524d \u51fa\u8eab \u751f\u5e74 \u8eab\u9577 \u8840\u6db2\u578b \u6027\u5225 \u5e74\u9f62 1 \u677e\u672c\u6f64 \u6771\u4eac\u90fd 1983 172 A \u7537\u6027 39 2 \u4e8c\u5bae\u548c\u4e5f \u6771\u4eac\u90fd 1983 168 A \u7537\u6027 39 3 \u5927\u91ce\u667a \u6771\u4eac\u90fd 1980 166 A \u7537\u6027 42 4 \u6afb\u4e95\u7fd4 \u6771\u4eac\u90fd 1982 171 A \u7537\u6027 40 AB \u540d\u524d \u51fa\u8eab \u751f\u5e74 \u8eab\u9577 \u8840\u6db2\u578b \u6027\u5225 \u5e74\u9f62 0 \u76f8\u8449\u96c5\u7d00 \u5343\u8449 1982 175 AB \u7537\u6027 40 \u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u3068\u30af\u30ed\u30b9\u96c6\u8a08\u2b50\ufe0f # \u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u306f\u3001\u30af\u30ed\u30b9\u96c6\u8a08\u306b\u4f7f\u308f\u308c\u308b\u4fbf\u5229\u30c4\u30fc\u30eb\u3067\u3059\u3002 index : \u7e26\u8ef8\u306b\u5c55\u958b\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a columns : \u6a2a\u8ef8\u306b\u5c55\u958b\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a values : \u96c6\u7d04\u3059\u308b\u5024\u30ab\u30e9\u30e0\u3092\u6307\u5b9a aggfunc : \u96c6\u7d04\u65b9\u6cd5\u3092\u6307\u5b9a \u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u3092\u7528\u3044\u308b\u3068\u3001\u96c6\u8a08\u7d50\u679c\u3092\u8868\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3057\u3066\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u307f\u6307\u5b9a pd.pivot_table(df, index=\"\u8840\u6db2\u578b\") \u8868\u306e\u9023\u7d50 # \u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u304c\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u3066\u3001 \u8907\u6570\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4e00\u3064\u306b\u307e\u3068\u3081\u3066\u30c7\u30fc\u30bf\u5206\u6790\u3059\u308b\u6a5f\u4f1a\u306f\u591a\u304f\u3042\u308a\u307e\u3059\u3002 \u307e\u305a\u3001\u3082\u3046\u3072\u3068\u3064\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7528\u610f\u3057\u307e\u3059\u3002 \u3082\u3046\u4e00\u3064\u3001\u8868\u3092\u7528\u610f df2 = pd . DataFrame ({ '\u540d\u524d' : [ '\u5927\u91ce\u667a' , '\u76f8\u8449\u96c5\u7d00' , '\u4e8c\u5bae\u548c\u4e5f' , '\u677e\u672c\u6f64' , '\u30ab\u30d3\u30b4\u30f3' ], '\u8eab\u9577' : [ 166 , 176 , 168 , 173 , 210 ], '\u4f53\u91cd' : [ 52.0 , 58.0 , 52.0 , 62.0 , 460.0 ], }) df2 . head () \u30ab\u30d3\u30b4\u30f3\uff1f \u7df4\u7fd2\u7528\u306b\u5c11\u3057\u5909\u306a\u30c7\u30fc\u30bf\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002 \u5358\u7d14\u306a\u9023\u7d50 # \u6700\u3082\u7c21\u5358\u65b9\u6cd5\u306f\u3001\u5358\u7d14\u306b\u8868\u3092\u9023\u7d50\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u5358\u7d14\u306b\u7e26\u65b9\u5411\u306b\u9023\u7d50\u3057\u305f\u3044\u3068\u304d\u306f\u3001 pd.concat() \u3092\u4f7f\u3063\u3066\u9023\u7d50\u3057\u307e\u3059\u3002 \u7e26\u65b9\u5411\u306b\u8868\u3092\u9023\u7d50\u3059\u308b pd.concat([df, df2]) \u6a2a\u65b9\u5411\u306b\u9023\u7d50\u3057\u305f\u3044\u3068\u304d\u306f\u3001 axis=1 \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u307e\u3059\u3002 \u6a2a\u65b9\u5411\u306b\u9023\u7d50\u3059\u308b pd.concat([df, df2], axis=1) \u8868\u30c7\u30fc\u30bf\u306e\u7d50\u5408(join) # \u8868\u30c7\u30fc\u30bf\u306e\u7d50\u5408\u306f\u3001\u3075\u305f\u3064\u306e\u8868\u30c7\u30fc\u30bf\u306e\u3042\u308b\u5c5e\u6027\u3092\u30ad\u30fc\u306b\u3057\u3066\u3001 \u30ad\u30fc\u304c\u540c\u3058\u5024\u3067\u3042\u308c\u3070\u4e00\u3064\u306e\u884c\u306b\u307e\u3068\u3081\u308b\u64cd\u4f5c\u3067\u3059\u3002 Pandas\u3067\u306f\u3001 pd.merge() \u3067\u7d50\u5408\u3057\u307e\u3059\u3002 `\u540d\u524d`\u3092\u30ad\u30fc\u306b\u3057\u3066\u9023\u7d50\u3059\u308b pd.merge(df, df2, on='\u540d\u524d') \u3075\u305f\u3064\u306e\u8868\u30c7\u30fc\u30bf\u306f\u7d50\u5408\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u30c7\u30fc\u30bf\u304c\u4e00\u90e8\u6d88\u3048\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002 \u3053\u308c\u306f\u3001Pandas \u3067\u306f\u4f55\u3082\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3001\u4e00\u756a\u6761\u4ef6\u306e\u53b3\u3057\u3044\u5185\u90e8\u7d50\u5408\u304c\u7528\u3044\u3089\u308c\u308b\u305f\u3081\u3067\u3059\u3002 \u7d50\u5408\u306e\u65b9\u6cd5 \u5185\u90e8\u7d50\u5408 inner : \u4e21\u65b9\u306b\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308b\u3068\u304d\u7d50\u5408 \u5916\u90e8\u7d50\u5408 outer : \u3069\u3061\u3089\u304b\u4e00\u65b9\u306b\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308b\u3068\u304d\u7d50\u5408 \u5de6\u5916\u90e8\u7d50\u5408 left : \u5de6\u5074\u306b\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308b\u3068\u304d \u53f3\u5916\u90e8\u7d50\u5408 right : \u53f3\u5074\u306b\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308b\u3068\u304d left \u304c\u826f\u3055\u305d\u3046\u3067\u3059\u304c\u3001 outer \u3067\u7d50\u5408\u3057\u3066\u307f\u307e\u3059\u3002 df, df2\u3092\u5916\u90e8\u7d50\u5408\u3059\u308b df3 = pd.merge(df, df2, on='\u540d\u524d', how='outer') df3.head() \u30c6\u30fc\u30d6\u30eb\u306e\u5909\u66f4(inplace) # \u5c11\u3057\u30c7\u30fc\u30bf\u3092\u6574\u9813\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 === \u307e\u305f\u3001\u30ab\u30e9\u30e0\u540d\u304c\u82f1\u8a9e\u3060\u3063\u305f\u308a\u3001\u65e5\u672c\u3060\u3063\u305f\u308a\u4e0d\u7d71\u4e00\u3067\u3059\u3002\u5c11\u3057\u6574\u9813\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 df, df2\u3092\u5916\u90e8\u7d50\u5408\u3057\u3001df3 df3 = pd.merge(df, df2, on='\u540d\u524d', how='outer') df3.drop(5, axis=0, inplace=True) #index=5\u3092\u6d88\u3059 df3.drop('\u8eab\u9577_y', axis=1, inplace=True) # '\u8eab\u9577_y'\u3092\u6d88\u3059 df3.rename(columns={'\u8eab\u9577_x': ' \u8eab\u9577'}, inplace=True) df.reindex(columns=['\u540d\u524d', '\u51fa\u8eab', '\u5e74\u9f62', '\u8eab\u9577', '\u4f53\u91cd']) df3.head() pandas \u306e\u8868\u64cd\u4f5c\u306f\u66f8\u304d\u63db\u3048\u306a\u3044 pandas \u306e\u8868\u64cd\u4f5c\u306f\u3001\u65b0\u3057\u3044\u8868\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3060\u304b\u3089\u3001\u5225\u306e\u5909\u6570\u540d\u3067\u5225\u306e\u8868\u30c7\u30fc\u30bf\u3068\u3057\u3066\u64cd\u4f5c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u65b0\u3057\u3044\u8868\u3092 df2 \u3068\u3057\u3066\u64cd\u4f5c\u3059\u308b df2 = df . drop ( '\u540d\u524d' , axis = 1 ) \u3060\u304b\u3089\u3001\u540c\u3058\u5909\u6570\u540d\u3067\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 python df = df.drop('\u540d\u524d', axis=1) \u30c7\u30fc\u30bf\u3092\u76f4\u63a5\u3001\u66f8\u304d\u63db\u3048\u305f\u3044\u3068\u304d\u306f\u3001 inplace=True \u3092\u3064\u3051\u307e\u3059\u3002 df.drop('\u540d\u524d', axis=1, inplace=True) \u7df4\u7fd2\u554f\u984c # Pandas \u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u306e\u7df4\u7fd2\u3092\u3057\u307e\u3057\u3087\u3046\u3002 J\u30ea\u30fc\u30ac\u30fc\u3001\u30d7\u30ed\u91ce\u7403\u3001\u5927\u76f8\u64b2 # \u30d7\u30ed\u91ce\u7403\u3001J\u30ea\u30fc\u30ac\u30fc\u3001\u5927\u76f8\u64b2\u306b\u95a2\u3059\u308b\u30c7\u30fc\u30bf\u3092\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3088\u3046\u3002 \u30ab\u30e9\u30e0\u306e\u4f8b \u540d\u524d\u3000\u8077\u696d \u6240\u5c5e \u8eab\u9577 \u4f53\u91cd BMI \u8077\u696d \u306f\u3001 \u30d7\u30ed\u91ce\u7403 \u3001 J\u30ea\u30fc\u30ac\u30fc \u3001 \u76f8\u64b2 \u3068\u3059\u308b BMI \u306f \u8eab\u9577 \u3068 \u4f53\u91cd \u304b\u3089\u8a08\u7b97\u3059\u308b \u8eab\u9577\u306e\u9ad8\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3001 sports.csv \u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b (\u4f59\u529b\u304c\u3042\u3063\u305f\u3089)\u6563\u5e03\u56f3\u306a\u3069\u3092\u8868\u793a\u3057\u3066\u30c7\u30fc\u30bf\u306e\u50be\u5411\u3092\u898b\u3066\u307f\u3088\u3046\u3002 \u30c7\u30fc\u30bf\u306e\u5165\u624b\u5148 \u9234\u6728 \u96c5\u4e5f\u3001\u6e21\u8fba \u5c06\u4eba\u3001\u4e95\u4e0a \u53f2\u6597. \u300c \u6570\u5f0f\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3063\u3066\u3064\u307e\u308a\u3053\u3046\u3044\u3046\u3053\u3068 \u300d\u3088\u308a\u3001\u516c\u958b\u30c7\u30fc\u30bf\u3092\u4f7f\u308f\u305b\u3066\u3082\u3089\u3044\u307e\u3059\u3002 J\u30ea\u30fc\u30ac\u30fc\u306e\u30c7\u30fc\u30bf\u306eURL https://raw.githubusercontent.com/massongit/math-program-book/master/9_data/\u30b5\u30c3\u30ab\u30fc/J\u30ea\u30fc\u30b0\u9078\u624b\u8eab\u9577\u4f53\u91cd.csv \u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\uff08\u629c\u7c8b\uff09 \u30c1\u30fc\u30e0,\u30dd\u30b8\u30b7\u30e7\u30f3,\u80cc\u756a\u53f7,\u540d\u524d,\u751f\u5e74\u6708\u65e5,\u8eab\u9577,\u4f53\u91cd \u5ddd\u5d0e\u30d5\u30ed\u30f3\u30bf\u30fc\u30ec,GK,1,\u30c1\u30e7\u30f3\u3000\u30bd\u30f3\u30ea\u30e7\u30f3,1985/01/04,191,90 \u5ddd\u5d0e\u30d5\u30ed\u30f3\u30bf\u30fc\u30ec,GK,24,\u5b89\u85e4\u3000\u99ff\u4ecb,1990/08/10,185,79 \u30d7\u30ed\u91ce\u7403\u9078\u624b\u306e\u30c7\u30fc\u30bfURL !wget https://raw.githubusercontent.com/massongit/math-program-book/master/9_data/\u30d7\u30ed\u91ce\u7403/\u30d7\u30ed\u91ce\u7403\u9078\u624b\u8eab\u9577\u4f53\u91cd.csv \u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\uff08\u629c\u7c8b\uff09 \u30c1\u30fc\u30e0,\u80cc\u756a\u53f7,\u6c0f\u540d,\u751f\u5e74\u6708\u65e5,\u8eab\u9577,\u4f53\u91cd,\u6295,\u6253 \u5e83\u5cf6,11,\u798f\u4e95\u3000\u512a\u4e5f,1988.02.08,178,85,\u53f3,\u53f3 \u5e83\u5cf6,12,\u4e5d\u91cc\u3000\u4e9c\u84ee,1991.09.01,187,92,\u53f3,\u53f3 \u5927\u76f8\u64b2\u306e\u30c7\u30fc\u30bfURL !wget https://raw.githubusercontent.com/massongit/math-program-book/master/9_data/\u76f8\u64b2/\u529b\u58eb\u8eab\u9577\u4f53\u91cd.csv \u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\uff08\u629c\u7c8b\uff09 \u3057\u3053\u540d,\u8eab\u9577,\u4f53\u91cd \u7389\u9df2 \u4e00\u6717,188.0,174.0 \u65ed\u79c0\u9d6c \u6ec9\u898f,190.0,147.0 J\u30ea\u30fc\u30ac\u30fc\u3001\u30d7\u30ed\u91ce\u7403\u3001\u30a2\u30a4\u30c9\u30eb\u30c7\u30fc\u30bf # \u30d7\u30ed\u91ce\u7403\u3001J\u30ea\u30fc\u30ac\u30fc\u3001\u30a2\u30a4\u30c9\u30eb\u306b\u95a2\u3059\u308b\u30c7\u30fc\u30bf\u3092\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3088\u3046\u3002 \u30ab\u30e9\u30e0\u306e\u4f8b \u540d\u524d\u3000\u8077\u696d \u6240\u5c5e \u751f\u5e74 \u8eab\u9577 \u4f53\u91cd \u5e74\u9f62 BMI \u8077\u696d \u306f\u3001 \u30d7\u30ed\u91ce\u7403 \u3001 J\u30ea\u30fc\u30ac\u30fc \u3001 \u30a2\u30a4\u30c9\u30eb \u3068\u3059\u308b \u5e74\u9f62 \u306f\u3001 \u751f\u5e74 \u304b\u3089\u8a08\u7b97\u3059\u308b\uff08\u3046\u307e\u304f\u3001\u30d7\u30ed\u91ce\u7403\u3068J\u30ea\u30fc\u30ac\u30fc\u306e\u751f\u5e74\u3092\u524d\u51e6\u7406\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09 BMI \u306f \u8eab\u9577 \u3068 \u4f53\u91cd \u304b\u3089\u8a08\u7b97\u3059\u308b (\u4f59\u529b\u304c\u3042\u3063\u305f\u3089)\u6563\u5e03\u56f3\u306a\u3069\u3092\u8868\u793a\u3057\u3066\u30c7\u30fc\u30bf\u306e\u50be\u5411\u3092\u898b\u3066\u307f\u3088\u3046\u3002","title":"\u30c7\u30fc\u30bf\u51e6\u7406"},{"location":"pandas/#pandas","text":"\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001 \u30c7\u30fc\u30bf\u5206\u6790\u3092\u59cb\u3081\u308b\u524d\u306b\u3001\u30c7\u30fc\u30bf\u5206\u6790\u304c\u884c\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u52a0\u5de5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u51e6\u7406\u3092 \u524d\u51e6\u7406 \u3068\u547c\u3073\u307e\u3059\u3002 \u4eca\u307e\u3067\u306f\u3001 \u6bd4\u8f03\u7684\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u306e\u5b66\u7fd2\u7528\u306b\u52a0\u5de5\u3055\u308c\u305f\u524d\u51e6\u7406\u6e08\u307f\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001 Pandas\u3092\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3001\u524d\u51e6\u7406\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u3087\u3046\u3002","title":"\u524d\u51e6\u7406: Pandas\u3092\u4f7f\u3044\u3053\u306a\u305d\u3046"},{"location":"pandas/#_1","text":"Pandas \u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306f\u3001\u8272\u3005\u306a\u65b9\u6cd5\u3067\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4eca\u307e\u3067\u7fd2\u3063\u305f\u65b9\u6cd5\u4e3b\u306a\u65b9\u6cd5 pd.read_csv('file.csv') : CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3080 pd.DataFrame(data) : \u30c7\u30fc\u30bf\u5217\u304b\u3089\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u308b \u307e\u305a\u3001\u7df4\u7fd2\u7528\u306e\u5c0f\u3055\u306a\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7528\u610f\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","title":"\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4f5c\u6210\u3068\u4fdd\u5b58"},{"location":"pandas/#_2","text":"\u307e\u305a\u3001\u30c7\u30fc\u30bf\u5217\u304b\u3089\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u308b\u65b9\u6cd5\u3092\u307f\u307e\u3057\u3087\u3046\u3002 \u57fa\u672c\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u3001\u30ab\u30e9\u30e0\u540d\u3092\u30ad\u30fc\u3001\u30c7\u30fc\u30bf\u5217\u3092\u5024\u3068\u3057\u305f\u8f9e\u66f8\u3092\u5b9a\u7fa9\u3057\u3001 \u305d\u3053\u304b\u3089 pd.DataFrame() \u3092\u4f7f\u3063\u3066\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u8f9e\u66f8\u304b\u3089\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3078 data = { '\u540d\u524d' : [ '\u76f8\u8449\u96c5\u7d00' , '\u677e\u672c\u6f64' , '\u4e8c\u5bae\u548c\u4e5f' , '\u5927\u91ce\u667a' , '\u6afb\u4e95\u7fd4' ], '\u51fa\u8eab' : [ '\u5343\u8449' , '\u6771\u4eac' , '\u6771\u4eac' , '\u6771\u4eac' , '\u6771\u4eac' ], '\u751f\u5e74' : [ 1982 , 1983 , 1983 , 1980 , 1982 ], '\u8eab\u9577' : [ 175 , 172 , 168 , 166 , 171 ], '\u8840\u6db2\u578b' : [ 'AB' , 'A' , 'A' , 'A' , 'A' ], } df = pd . DataFrame ( data ) \u3082\u3046\u4e00\u3064\u306f\u3001\u30c7\u30fc\u30bf\u5217\u3092\u30bf\u30d7\u30eb\u306b\u3057\u3066\u3001\u30c7\u30fc\u30bf\u5217\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308a\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u884c\u306e\u30ea\u30b9\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3078 columns = [ '\u540d\u524d' , '\u51fa\u8eab' , '\u751f\u5e74' , '\u8eab\u9577' , '\u8840\u6db2\u578b' ] data = [ ( '\u76f8\u8449\u96c5\u7d00' , '\u5343\u8449' , 1982 , 175 , 'AB' ), ( '\u677e\u672c\u6f64' , '\u6771\u4eac\u90fd' , 1983 , 172 , 'A' ), ( '\u4e8c\u5bae\u548c\u4e5f' , '\u6771\u4eac\u90fd' , 1983 , 168 , 'A' ), ( '\u5927\u91ce\u667a' , '\u6771\u4eac\u90fd' , 1980 , 166 , 'A' ), ( '\u6afb\u4e95\u7fd4' , '\u6771\u4eac\u90fd' , 1982 , 171 , 'A' ), ] df = pd . DataFrame ( data , columns = columns ) \u3069\u3061\u3089\u306e\u65b9\u6cd5\u3067\u3082\u540c\u3058\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304c\u5f97\u3089\u308c\u307e\u3059\u3002 \u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u78ba\u8a8d df . head () \u30c7\u30fc\u30bf\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u3054\u6307\u6458\u3092\u53d7\u3051\u307e\u3059\u304c.. \u4e00\u90e8\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u6307\u6458\u3092\u3088\u304f\u53d7\u3051\u307e\u3059\u3002 \u3069\u3046\u305e\u3001\u5404\u81ea\u3067\u3054\u81ea\u7531\u306b\u3001\u3054\u4fee\u6b63\u3057\u3066\u7df4\u7fd2\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002","title":"\u30c7\u30fc\u30bf\u306e\u4f5c\u6210"},{"location":"pandas/#_3","text":"Pandas \u3067\u64cd\u4f5c\u3057\u305f\u8868\u30c7\u30fc\u30bf\u306f\u3001 .to_csv() \u3067CSV\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3067\u304d\u307e\u3059\u3002 CSV\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58 df . to_csv ( 'arashi.csv' , index = False , \u3000 encoding = 'utf_8_sig' ) Excel\u3067\u958b\u3044\u3066\u6587\u5b57\u5316\u3051\u3059\u308b\u3068\u304d\u306f\uff1f Windows \u306f\u3001\u6a19\u6e96\u3067ShiftJIS\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u5148\u982d\u306bBOM\u3068\u547c\u3070\u308c\u308b\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u8b58\u5225\u3059\u308b\u8a18\u53f7\u3092\u5165\u308c\u308b\u3068\u3001 \u6587\u5b57\u5316\u3051\u306a\u304fCSV\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u30a8\u30af\u30bb\u30eb\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58 df . to_excel ( 'arashi.xlsx' )","title":"\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4fdd\u5b58"},{"location":"pandas/#_4","text":"Pandas \u306f\u3001\u8868\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u3088\u304f\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002 Pandas \u7528\u8a9e\u3067\u306f\u3001\u8868\u30c7\u30fc\u30bf\u306e\u3053\u3068\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0(DataFrame)\u3068\u547c\u3073\u307e\u3059\u304c\u3001\u672c\u8cc7\u6599\u3067\u306f\u8868\u30c7\u30fc\u30bf\u3068\u547c\u3073\u307e\u3059\u3002 \u78ba\u8a8d\uff1aPandas\u7528\u8a9e \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0 : \u8868\u30c7\u30fc\u30bf\u306e\u3053\u3068 \u30ab\u30e9\u30e0 : \u5217\u65b9\u5411\u306e\u30c7\u30fc\u30bf \u30a4\u30f3\u30c7\u30c3\u30af\u30b9 : \u884c\u65b9\u5411\u306e\u30c7\u30fc\u30bf","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"pandas/#_5","text":"Pandas\u306f\u3001\u4eca\u307e\u307e\u3067\u304d\u3066\u304d\u305f\u3068\u304a\u308a\u3001\u30ab\u30e9\u30e0\u3054\u3068\u306e\u30c7\u30fc\u30bf\u51e6\u7406\u304c\u591a\u304f\u306a\u308a\u307e\u3059\u3002 \u307e\u305a\u3001\u30ab\u30e9\u30e0\u540d '\u540d\u524d' \u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u5217\u306e\u53d6\u308a\u51fa\u3057 df [ '\u540d\u524d' ] \u53d6\u308a\u51fa\u3057\u305f\u30c7\u30fc\u30bf\u5217\u306f\u3001Python\u306e\u5217(\u30b7\u30fc\u30b1\u30f3\u30b9\uff09\u3068\u3057\u3066\u3001 for \u6587\u306a\u3069\u3067\u3072\u3068\u3064\u305a\u3064\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 for\u6587\u306b\u3088\u308b\u30c7\u30fc\u30bf\u5217\u306e\u51e6\u7406 for name in df['\u540d\u524d']: print(name) \u76f8\u8449\u96c5\u7d00 \u677e\u672c\u6f64 \u4e8c\u5bae\u548c\u4e5f \u5927\u91ce\u667a \u6afb\u4e95\u7fd4 \u8907\u6570\u306e\u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3057\u3066\u540c\u6642\u306b\u51e6\u7406\u3057\u305f\u3044\u6642\u306f\u3001 zip \u3092\u4f7f\u3044\u307e\u3059\u3002 \u8907\u6570\u306e\u30c7\u30fc\u30bf\u5217\u306e\u53d6\u308a\u51fa\u3057 for name , blood in zip ( df [ '\u540d\u524d' ], df [ '\u8840\u6db2\u578b' ]): print ( name , blood ) \u76f8\u8449\u96c5\u7d00 AB \u677e\u672c\u6f64 A \u4e8c\u5bae\u548c\u4e5f A \u5927\u91ce\u667a A \u6afb\u4e95\u7fd4 A","title":"\u30ab\u30e9\u30e0\u540d\u304b\u3089\u30c7\u30fc\u30bf\u5217\u3092\u53d6\u308a\u51fa\u3059"},{"location":"pandas/#_6","text":"\u65b0\u3057\u3044\u30ab\u30e9\u30e0\u3001\u3064\u307e\u308a\u7e26\u65b9\u5411\u306e\u5217\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u8868\u30c7\u30fc\u30bf\u4e2d\u306b\u306f\u3001\uff15\u4eba\u5206\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308b\u305f\u3081\u3001 \u30ea\u30b9\u30c8\u3068\u3057\u3066\uff15\u4eba\u5206\u306e\u30c7\u30fc\u30bf\u3092\u4ee3\u5165\u3059\u308b\u3068\u3001\u65b0\u3057\u3044\u5c5e\u6027\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4f8b. \u6027\u5225\u3092\u8ffd\u52a0\u3059\u308b df [ '\u6027\u5225' ] = [ '\u7537\u6027' , '\u7537\u6027' , '\u7537\u6027' , '\u7537\u6027' , '\u7537\u6027' ] \u30a8\u30af\u30bb\u30eb\u306e\u3088\u3046\u306b\u30ab\u30e9\u30e0\u306e\u5024\u304b\u3089\u8a08\u7b97\u3057\u3066\u3001\u65b0\u3057\u3044\u30ab\u30e9\u30e0\u3092\u4f5c\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u8a08\u7b97\u7d50\u679c\u306b\u3088\u308b\u65b0\u3057\u3044\u30ab\u30e9\u30e0 df [ '\u5e74\u9f62' ] = 2022 - df [ '\u751f\u5e74' ] df . head ()","title":"\u5217\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0"},{"location":"pandas/#n","text":"\u8868\u30c7\u30fc\u30bf\u306e\u884c\u3054\u3068\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u3001 .iloc \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u901a\u3057\u3066\u884c\u307e\u3059\u3002 \u6700\u521d\u306e\u884c\u3092\u62bd\u51fa df . iloc [ 0 ] \u540d\u524d \u76f8\u8449\u96c5\u7d00 \u51fa\u8eab \u5343\u8449 \u751f\u5e74 1982 \u8eab\u9577 175 \u8840\u6db2\u578b AB \u6027\u5225 \u7537\u6027 \u5e74\u9f62 40 Name: 0, dtype: object Pandas\u306f\u5f37\u529b\u306a\u30c7\u30fc\u30bf\u64cd\u4f5c\u306e\u6a5f\u80fd\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3042\u307e\u308a\u4f7f\u3046\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001 \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\uff11\u884c\u305a\u3064\u53d6\u308a\u51fa\u3057\u3066\u51e6\u7406\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \uff11\u884c\u305a\u3064\u51e6\u7406\u3059\u308b for row in df . iloc : print ( row ) ['\u76f8\u8449\u96c5\u7d00' '\u5343\u8449' 1982 175 'AB' '\u7537\u6027' 40] ['\u677e\u672c\u6f64' '\u6771\u4eac\u90fd' 1983 172 'A' '\u7537\u6027' 39] ['\u4e8c\u5bae\u548c\u4e5f' '\u6771\u4eac\u90fd' 1983 168 'A' '\u7537\u6027' 39] ['\u5927\u91ce\u667a' '\u6771\u4eac\u90fd' 1980 166 'A' '\u7537\u6027' 42] ['\u6afb\u4e95\u7fd4' '\u6771\u4eac\u90fd' 1982 171 'A' '\u7537\u6027' 40]","title":"n\u884c\u76ee\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059"},{"location":"pandas/#_7","text":"\u30ab\u30e9\u30e0\u540d\u3068\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3001 \u8868\u30c7\u30fc\u30bf\u3092\u30bb\u30eb\u306e\u5024\u3092\u6307\u5b9a\u3057\u3066\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30bb\u30eb\u306e\u5024 df['\u51fa\u8eab'][0] \u5343\u8449","title":"\u30bb\u30eb\u306e\u5024"},{"location":"pandas/#_8","text":"Pandas \u306e \u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u4ee3\u6570 \u306e\u64cd\u4f5c\u3092\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5b9f\u7fd2\u3092\u5c65\u4fee\u3057\u3066\u3044\u308b\u4eba\u306f\u3001SQL\u3092\u601d\u3044\u51fa\u3057\u306a\u304c\u3089\u8a66\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 SQL\u3063\u3066\u4f55\uff1f \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u30fc\u8a00\u8a9e\u3067\u3059\u3002 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3067\u306f\u5b9a\u756a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u64cd\u4f5c"},{"location":"pandas/#projection","text":"\u5c04\u5f71\uff08projection\uff09\u306f\u3001\u8868\u30c7\u30fc\u30bf\u304b\u3089\u30ab\u30e9\u30e0\u3092\u9650\u5b9a\u3057\u305f\u8868\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u64cd\u4f5c\u3067\u3059\u3002 SQL\u306e\u4f8b; \u540d\u524d\u3068\u751f\u5e74\u3001\u8840\u6db2\u578b\u306e\u307f\u62bd\u51fa SELECT \u540d\u524d , \u751f\u5e74 , \u8840\u6db2\u578b FROM df Pandas\u3067\u306f\u3001\u62bd\u51fa\u3057\u305f\u3044\u30ab\u30e9\u30e0\u540d\u3092\u30ea\u30b9\u30c8\u306b\u3057\u3066\u6e21\u3057\u307e\u3059\u3002 pandas df[['\u540d\u524d', '\u751f\u5e74', '\u8840\u6db2\u578b']] \u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u3001 \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u3092\u53d6\u308a\u51fa\u3059\u3068\u304d\u306b\u3088\u304f\u7528\u3044\u307e\u3059\u3002","title":"\u5c04\u5f71(projection)"},{"location":"pandas/#selection","text":"\u9078\u629e\u306f\u3001SQL\u3067\u306f\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u5408\u3046\u884c\u3092\u53d6\u308a\u51fa\u3059\u57fa\u672c\u64cd\u4f5c\u3067\u3059\u3002 Pandas\u3067\u306f\u3001 query() \u30e1\u30bd\u30c3\u30c9\u3067SQL\u98a8\u306e\u6761\u4ef6\u3092\u8a18\u8ff0\u3059\u308b\u65b9\u6cd5\u3068 NumPy\u98a8\u306b\u30de\u30b9\u30af\u3057\u3066\u30d5\u30a3\u30eb\u30bf\u3059\u308b\u65b9\u6cd5\u306e\uff12\u7a2e\u985e\u3042\u308a\u307e\u3059\u3002 SQL\u30af\u30a8\u30ea\u30fc SELECT * FROM df WHERE \u8eab\u9577 >= 170 Pandas: query() df . query ( '\u8eab\u9577 >= 170' ) Pandas: NumPy\u98a8\u30d5\u30a3\u30eb\u30bf df [ df [ '\u8eab\u9577' ] >= 170 ] \u3088\u308a\u8907\u96d1\u306a\u6761\u4ef6\u3082\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 SQL SELECT * FROM df WHERE \u8eab\u9577 >= 170 AND \u8840\u6db2\u578b == \"A\" query()\u3092\u4f7f\u3046 df . query ( '\u8eab\u9577 >= 170 and \u8840\u6db2\u578b == \"A\"' ) NumPy\u98a8\u30d5\u30a3\u30eb\u30bf df [( df [ '\u8eab\u9577' ] >= 170 ) & ( df [ '\u8840\u6db2\u578b' ] == \"A\" )]","title":"\u9078\u629e(selection)"},{"location":"pandas/#_9","text":"groupby() \u306f\u3001\u540c\u3058\u5024\u3092\u6301\u3064\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u3001\u7d71\u8a08\u51e6\u7406\u3092\u884c\u3044\u3068\u304d\u306b\u4f7f\u3044\u307e\u3059\u3002 \u4f8b. \u8840\u6db2\u578b\u3054\u3068\u306b\u5e73\u5747(mean)\u3092\u3068\u308b df.groupby('\u8840\u6db2\u578b').mean() \u57fa\u790e\u7d71\u8a08\u91cf\u3092\u5168\u3066\u307f\u305f\u3044\u3068\u304d df.groupby('\u8840\u6db2\u578b').describe() groupby() \u306f\u3001\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u96c6\u8a08\u3057\u3066\u64cd\u4f5c\u3059\u308b\u3068\u304d\u306b\u3001\u91cd\u5b9d\u3057\u307e\u3059\u3002 \u305d\u308c\u305e\u308c\u306e\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u8868(df)\u3092\u53d6\u308a\u51fa\u3059\u3068\u304d\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u64cd\u4f5c\u3057\u307e\u3059\u3002 \u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u53d6\u308a\u51fa\u3059 for key, df2 in df.groupby('\u8840\u6db2\u578b'): print(key, df2) A \u540d\u524d \u51fa\u8eab \u751f\u5e74 \u8eab\u9577 \u8840\u6db2\u578b \u6027\u5225 \u5e74\u9f62 1 \u677e\u672c\u6f64 \u6771\u4eac\u90fd 1983 172 A \u7537\u6027 39 2 \u4e8c\u5bae\u548c\u4e5f \u6771\u4eac\u90fd 1983 168 A \u7537\u6027 39 3 \u5927\u91ce\u667a \u6771\u4eac\u90fd 1980 166 A \u7537\u6027 42 4 \u6afb\u4e95\u7fd4 \u6771\u4eac\u90fd 1982 171 A \u7537\u6027 40 AB \u540d\u524d \u51fa\u8eab \u751f\u5e74 \u8eab\u9577 \u8840\u6db2\u578b \u6027\u5225 \u5e74\u9f62 0 \u76f8\u8449\u96c5\u7d00 \u5343\u8449 1982 175 AB \u7537\u6027 40","title":"\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306e\u96c6\u8a08"},{"location":"pandas/#_10","text":"\u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u306f\u3001\u30af\u30ed\u30b9\u96c6\u8a08\u306b\u4f7f\u308f\u308c\u308b\u4fbf\u5229\u30c4\u30fc\u30eb\u3067\u3059\u3002 index : \u7e26\u8ef8\u306b\u5c55\u958b\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a columns : \u6a2a\u8ef8\u306b\u5c55\u958b\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a values : \u96c6\u7d04\u3059\u308b\u5024\u30ab\u30e9\u30e0\u3092\u6307\u5b9a aggfunc : \u96c6\u7d04\u65b9\u6cd5\u3092\u6307\u5b9a \u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u3092\u7528\u3044\u308b\u3068\u3001\u96c6\u8a08\u7d50\u679c\u3092\u8868\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3057\u3066\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u307f\u6307\u5b9a pd.pivot_table(df, index=\"\u8840\u6db2\u578b\")","title":"\u30d4\u30dc\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u3068\u30af\u30ed\u30b9\u96c6\u8a08\u2b50\ufe0f"},{"location":"pandas/#_11","text":"\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u304c\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u3066\u3001 \u8907\u6570\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u4e00\u3064\u306b\u307e\u3068\u3081\u3066\u30c7\u30fc\u30bf\u5206\u6790\u3059\u308b\u6a5f\u4f1a\u306f\u591a\u304f\u3042\u308a\u307e\u3059\u3002 \u307e\u305a\u3001\u3082\u3046\u3072\u3068\u3064\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7528\u610f\u3057\u307e\u3059\u3002 \u3082\u3046\u4e00\u3064\u3001\u8868\u3092\u7528\u610f df2 = pd . DataFrame ({ '\u540d\u524d' : [ '\u5927\u91ce\u667a' , '\u76f8\u8449\u96c5\u7d00' , '\u4e8c\u5bae\u548c\u4e5f' , '\u677e\u672c\u6f64' , '\u30ab\u30d3\u30b4\u30f3' ], '\u8eab\u9577' : [ 166 , 176 , 168 , 173 , 210 ], '\u4f53\u91cd' : [ 52.0 , 58.0 , 52.0 , 62.0 , 460.0 ], }) df2 . head () \u30ab\u30d3\u30b4\u30f3\uff1f \u7df4\u7fd2\u7528\u306b\u5c11\u3057\u5909\u306a\u30c7\u30fc\u30bf\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002","title":"\u8868\u306e\u9023\u7d50"},{"location":"pandas/#_12","text":"\u6700\u3082\u7c21\u5358\u65b9\u6cd5\u306f\u3001\u5358\u7d14\u306b\u8868\u3092\u9023\u7d50\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u5358\u7d14\u306b\u7e26\u65b9\u5411\u306b\u9023\u7d50\u3057\u305f\u3044\u3068\u304d\u306f\u3001 pd.concat() \u3092\u4f7f\u3063\u3066\u9023\u7d50\u3057\u307e\u3059\u3002 \u7e26\u65b9\u5411\u306b\u8868\u3092\u9023\u7d50\u3059\u308b pd.concat([df, df2]) \u6a2a\u65b9\u5411\u306b\u9023\u7d50\u3057\u305f\u3044\u3068\u304d\u306f\u3001 axis=1 \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u307e\u3059\u3002 \u6a2a\u65b9\u5411\u306b\u9023\u7d50\u3059\u308b pd.concat([df, df2], axis=1)","title":"\u5358\u7d14\u306a\u9023\u7d50"},{"location":"pandas/#join","text":"\u8868\u30c7\u30fc\u30bf\u306e\u7d50\u5408\u306f\u3001\u3075\u305f\u3064\u306e\u8868\u30c7\u30fc\u30bf\u306e\u3042\u308b\u5c5e\u6027\u3092\u30ad\u30fc\u306b\u3057\u3066\u3001 \u30ad\u30fc\u304c\u540c\u3058\u5024\u3067\u3042\u308c\u3070\u4e00\u3064\u306e\u884c\u306b\u307e\u3068\u3081\u308b\u64cd\u4f5c\u3067\u3059\u3002 Pandas\u3067\u306f\u3001 pd.merge() \u3067\u7d50\u5408\u3057\u307e\u3059\u3002 `\u540d\u524d`\u3092\u30ad\u30fc\u306b\u3057\u3066\u9023\u7d50\u3059\u308b pd.merge(df, df2, on='\u540d\u524d') \u3075\u305f\u3064\u306e\u8868\u30c7\u30fc\u30bf\u306f\u7d50\u5408\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u30c7\u30fc\u30bf\u304c\u4e00\u90e8\u6d88\u3048\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002 \u3053\u308c\u306f\u3001Pandas \u3067\u306f\u4f55\u3082\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3001\u4e00\u756a\u6761\u4ef6\u306e\u53b3\u3057\u3044\u5185\u90e8\u7d50\u5408\u304c\u7528\u3044\u3089\u308c\u308b\u305f\u3081\u3067\u3059\u3002 \u7d50\u5408\u306e\u65b9\u6cd5 \u5185\u90e8\u7d50\u5408 inner : \u4e21\u65b9\u306b\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308b\u3068\u304d\u7d50\u5408 \u5916\u90e8\u7d50\u5408 outer : \u3069\u3061\u3089\u304b\u4e00\u65b9\u306b\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308b\u3068\u304d\u7d50\u5408 \u5de6\u5916\u90e8\u7d50\u5408 left : \u5de6\u5074\u306b\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308b\u3068\u304d \u53f3\u5916\u90e8\u7d50\u5408 right : \u53f3\u5074\u306b\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308b\u3068\u304d left \u304c\u826f\u3055\u305d\u3046\u3067\u3059\u304c\u3001 outer \u3067\u7d50\u5408\u3057\u3066\u307f\u307e\u3059\u3002 df, df2\u3092\u5916\u90e8\u7d50\u5408\u3059\u308b df3 = pd.merge(df, df2, on='\u540d\u524d', how='outer') df3.head()","title":"\u8868\u30c7\u30fc\u30bf\u306e\u7d50\u5408(join)"},{"location":"pandas/#inplace","text":"\u5c11\u3057\u30c7\u30fc\u30bf\u3092\u6574\u9813\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 === \u307e\u305f\u3001\u30ab\u30e9\u30e0\u540d\u304c\u82f1\u8a9e\u3060\u3063\u305f\u308a\u3001\u65e5\u672c\u3060\u3063\u305f\u308a\u4e0d\u7d71\u4e00\u3067\u3059\u3002\u5c11\u3057\u6574\u9813\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 df, df2\u3092\u5916\u90e8\u7d50\u5408\u3057\u3001df3 df3 = pd.merge(df, df2, on='\u540d\u524d', how='outer') df3.drop(5, axis=0, inplace=True) #index=5\u3092\u6d88\u3059 df3.drop('\u8eab\u9577_y', axis=1, inplace=True) # '\u8eab\u9577_y'\u3092\u6d88\u3059 df3.rename(columns={'\u8eab\u9577_x': ' \u8eab\u9577'}, inplace=True) df.reindex(columns=['\u540d\u524d', '\u51fa\u8eab', '\u5e74\u9f62', '\u8eab\u9577', '\u4f53\u91cd']) df3.head() pandas \u306e\u8868\u64cd\u4f5c\u306f\u66f8\u304d\u63db\u3048\u306a\u3044 pandas \u306e\u8868\u64cd\u4f5c\u306f\u3001\u65b0\u3057\u3044\u8868\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3060\u304b\u3089\u3001\u5225\u306e\u5909\u6570\u540d\u3067\u5225\u306e\u8868\u30c7\u30fc\u30bf\u3068\u3057\u3066\u64cd\u4f5c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u65b0\u3057\u3044\u8868\u3092 df2 \u3068\u3057\u3066\u64cd\u4f5c\u3059\u308b df2 = df . drop ( '\u540d\u524d' , axis = 1 ) \u3060\u304b\u3089\u3001\u540c\u3058\u5909\u6570\u540d\u3067\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 python df = df.drop('\u540d\u524d', axis=1) \u30c7\u30fc\u30bf\u3092\u76f4\u63a5\u3001\u66f8\u304d\u63db\u3048\u305f\u3044\u3068\u304d\u306f\u3001 inplace=True \u3092\u3064\u3051\u307e\u3059\u3002 df.drop('\u540d\u524d', axis=1, inplace=True)","title":"\u30c6\u30fc\u30d6\u30eb\u306e\u5909\u66f4(inplace)"},{"location":"pandas/#_13","text":"Pandas \u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u306e\u7df4\u7fd2\u3092\u3057\u307e\u3057\u3087\u3046\u3002","title":"\u7df4\u7fd2\u554f\u984c"},{"location":"pandas/#j","text":"\u30d7\u30ed\u91ce\u7403\u3001J\u30ea\u30fc\u30ac\u30fc\u3001\u5927\u76f8\u64b2\u306b\u95a2\u3059\u308b\u30c7\u30fc\u30bf\u3092\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3088\u3046\u3002 \u30ab\u30e9\u30e0\u306e\u4f8b \u540d\u524d\u3000\u8077\u696d \u6240\u5c5e \u8eab\u9577 \u4f53\u91cd BMI \u8077\u696d \u306f\u3001 \u30d7\u30ed\u91ce\u7403 \u3001 J\u30ea\u30fc\u30ac\u30fc \u3001 \u76f8\u64b2 \u3068\u3059\u308b BMI \u306f \u8eab\u9577 \u3068 \u4f53\u91cd \u304b\u3089\u8a08\u7b97\u3059\u308b \u8eab\u9577\u306e\u9ad8\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3001 sports.csv \u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b (\u4f59\u529b\u304c\u3042\u3063\u305f\u3089)\u6563\u5e03\u56f3\u306a\u3069\u3092\u8868\u793a\u3057\u3066\u30c7\u30fc\u30bf\u306e\u50be\u5411\u3092\u898b\u3066\u307f\u3088\u3046\u3002 \u30c7\u30fc\u30bf\u306e\u5165\u624b\u5148 \u9234\u6728 \u96c5\u4e5f\u3001\u6e21\u8fba \u5c06\u4eba\u3001\u4e95\u4e0a \u53f2\u6597. \u300c \u6570\u5f0f\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u3063\u3066\u3064\u307e\u308a\u3053\u3046\u3044\u3046\u3053\u3068 \u300d\u3088\u308a\u3001\u516c\u958b\u30c7\u30fc\u30bf\u3092\u4f7f\u308f\u305b\u3066\u3082\u3089\u3044\u307e\u3059\u3002 J\u30ea\u30fc\u30ac\u30fc\u306e\u30c7\u30fc\u30bf\u306eURL https://raw.githubusercontent.com/massongit/math-program-book/master/9_data/\u30b5\u30c3\u30ab\u30fc/J\u30ea\u30fc\u30b0\u9078\u624b\u8eab\u9577\u4f53\u91cd.csv \u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\uff08\u629c\u7c8b\uff09 \u30c1\u30fc\u30e0,\u30dd\u30b8\u30b7\u30e7\u30f3,\u80cc\u756a\u53f7,\u540d\u524d,\u751f\u5e74\u6708\u65e5,\u8eab\u9577,\u4f53\u91cd \u5ddd\u5d0e\u30d5\u30ed\u30f3\u30bf\u30fc\u30ec,GK,1,\u30c1\u30e7\u30f3\u3000\u30bd\u30f3\u30ea\u30e7\u30f3,1985/01/04,191,90 \u5ddd\u5d0e\u30d5\u30ed\u30f3\u30bf\u30fc\u30ec,GK,24,\u5b89\u85e4\u3000\u99ff\u4ecb,1990/08/10,185,79 \u30d7\u30ed\u91ce\u7403\u9078\u624b\u306e\u30c7\u30fc\u30bfURL !wget https://raw.githubusercontent.com/massongit/math-program-book/master/9_data/\u30d7\u30ed\u91ce\u7403/\u30d7\u30ed\u91ce\u7403\u9078\u624b\u8eab\u9577\u4f53\u91cd.csv \u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\uff08\u629c\u7c8b\uff09 \u30c1\u30fc\u30e0,\u80cc\u756a\u53f7,\u6c0f\u540d,\u751f\u5e74\u6708\u65e5,\u8eab\u9577,\u4f53\u91cd,\u6295,\u6253 \u5e83\u5cf6,11,\u798f\u4e95\u3000\u512a\u4e5f,1988.02.08,178,85,\u53f3,\u53f3 \u5e83\u5cf6,12,\u4e5d\u91cc\u3000\u4e9c\u84ee,1991.09.01,187,92,\u53f3,\u53f3 \u5927\u76f8\u64b2\u306e\u30c7\u30fc\u30bfURL !wget https://raw.githubusercontent.com/massongit/math-program-book/master/9_data/\u76f8\u64b2/\u529b\u58eb\u8eab\u9577\u4f53\u91cd.csv \u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\uff08\u629c\u7c8b\uff09 \u3057\u3053\u540d,\u8eab\u9577,\u4f53\u91cd \u7389\u9df2 \u4e00\u6717,188.0,174.0 \u65ed\u79c0\u9d6c \u6ec9\u898f,190.0,147.0","title":"J\u30ea\u30fc\u30ac\u30fc\u3001\u30d7\u30ed\u91ce\u7403\u3001\u5927\u76f8\u64b2"},{"location":"pandas/#j_1","text":"\u30d7\u30ed\u91ce\u7403\u3001J\u30ea\u30fc\u30ac\u30fc\u3001\u30a2\u30a4\u30c9\u30eb\u306b\u95a2\u3059\u308b\u30c7\u30fc\u30bf\u3092\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3088\u3046\u3002 \u30ab\u30e9\u30e0\u306e\u4f8b \u540d\u524d\u3000\u8077\u696d \u6240\u5c5e \u751f\u5e74 \u8eab\u9577 \u4f53\u91cd \u5e74\u9f62 BMI \u8077\u696d \u306f\u3001 \u30d7\u30ed\u91ce\u7403 \u3001 J\u30ea\u30fc\u30ac\u30fc \u3001 \u30a2\u30a4\u30c9\u30eb \u3068\u3059\u308b \u5e74\u9f62 \u306f\u3001 \u751f\u5e74 \u304b\u3089\u8a08\u7b97\u3059\u308b\uff08\u3046\u307e\u304f\u3001\u30d7\u30ed\u91ce\u7403\u3068J\u30ea\u30fc\u30ac\u30fc\u306e\u751f\u5e74\u3092\u524d\u51e6\u7406\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09 BMI \u306f \u8eab\u9577 \u3068 \u4f53\u91cd \u304b\u3089\u8a08\u7b97\u3059\u308b (\u4f59\u529b\u304c\u3042\u3063\u305f\u3089)\u6563\u5e03\u56f3\u306a\u3069\u3092\u8868\u793a\u3057\u3066\u30c7\u30fc\u30bf\u306e\u50be\u5411\u3092\u898b\u3066\u307f\u3088\u3046\u3002","title":"J\u30ea\u30fc\u30ac\u30fc\u3001\u30d7\u30ed\u91ce\u7403\u3001\u30a2\u30a4\u30c9\u30eb\u30c7\u30fc\u30bf"},{"location":"student/","text":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\uff11\uff1a \u30c7\u30fc\u30bf\u306e\u50be\u5411\u3092\u3064\u304b\u3082\u3046 # \u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3092\u3057\u3063\u304b\u308a\u5b66\u3076\u305f\u3081\u306e\u5fdc\u7528\u554f\u984c\u3067\u3059\u3002 \u5fdc\u7528\u554f\u984c\u306a\u306e\u3067\u3001\u4eca\u307e\u3067\u306e\u5185\u5bb9\u3092\u632f\u308a\u8fd4\u308b\u3060\u3051\u3067\u306a\u304f\u3001 \u3088\u308a\u6df1\u304f\u77e5\u308b\u305f\u3081\u306bWeb\u3067\u8abf\u3079\u306a\u304c\u3089\u53d6\u308a\u7d44\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u4eca\u56de\u306f\u3001\u30c7\u30fc\u30bf\u5206\u6790\u3001\u30b0\u30e9\u30d5\u63cf\u753b\u3001\u76f8\u95a2\u306a\u3069\u3092\u4f7f\u3044\u306a\u304c\u3089\u3001 \u30c7\u30fc\u30bf\u306e\u50be\u5411\u3092\u3064\u304b\u3093\u3067\u3044\u304d\u307e\u3059\u3002 \u30c7\u30fc\u30bf # \u4eca\u56de\u306f\u3001 \u30dd\u30eb\u30c8\u30ac\u30eb\u306e\u9ad8\u6821\u751f\u306e\u6570\u5b66\u306e\u6210\u7e3e\u30c7\u30fc\u30bf \u3092\u4f7f\u3063\u3066\u3001\u30c7\u30fc\u30bf\u89e3\u6790\u3092\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306eURL https://kuramitsulab.github.io/data/student-mat.csv \u307e\u305a\u3001\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001pandas \u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u8aad\u307f\u8fbc\u3093\u3067\u304f\u3060\u3055\u3044\u3002 Warning \u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u5fd8\u308c\u306a\u3044\u306b\u3057\u307e\u3057\u3087\u3046 \u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3059\u308b # \u65b0\u3057\u3044\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3057\u305f\u3068\u304d\u3001\u6700\u521d\u306b\u884c\u3046\u3053\u3068\u306f \u30c7\u30fc\u30bf\u306e\u5c5e\u6027 \u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u5c5e\u6027\u540d \u8aac\u660e school \u5b66\u6821\u540d sex \u6027\u5225 F : \u5973\u6027, M : \u7537\u6027 age \u5e74\u9f62 address \u5c45\u4f4f\u5730 U : \u90fd\u5e02\u90e8, R : \u5730\u65b9 famsize \u5bb6\u65cf\u30b5\u30a4\u30ba GT3 : \u5144\u5f1f\u3042\u308a, LE3 : \u4e00\u4eba\u66ae\u3089\u3057 Pstatus \u540c\u5c45 T : \u540c\u5c45, A : \u5bee Medu \u6bcd\u89aa\u306e\u5b66\u6b74 Fedu \u7236\u89aa\u306e\u5b66\u6b74 Mjob \u6bcd\u89aa\u306e\u8077\u696d Fjob \u7236\u89aa\u306e\u8077\u696d reason \u5b66\u6821\u3092\u9078\u3093\u3060\u7406\u7531 guardian \u4fdd\u8b77\u8005\u306f\u8ab0\u304b\uff1f traveltime \u901a\u5b66\u6642\u9593 studytime \u9031\u306e\u52c9\u5f37\u6642\u9593 failures \u904e\u53bb\u306e\u843d\u7b2c\u6570 schoolsup \u5968\u5b66\u91d1 famsup \u5bb6\u65cf\u304b\u3089\u306e\u30b5\u30dd\u30fc\u30c8 paid \u587e activities \u90e8\u6d3b\u52d5 nursery \u4fdd\u80b2\u5712 higher \u9ad8\u7b49\u6559\u80b2 internet \u30cd\u30c3\u30c8\u63a5\u7d9a romantic \u604b\u4eba famrel \u5bb6\u65cf\u95a2\u4fc2 freetime \u81ea\u7531\u6642\u9593 goout \u53cb\u4eba\u3068\u904a\u3076\u983b\u5ea6 Dalc \u5e73\u65e5\u306e\u30a2\u30eb\u30b3\u30fc\u30eb\u91cf Walc \u9031\u672b\u306e\u30a2\u30eb\u30b3\u30fc\u30eb\u91cf health \u5065\u5eb7\u72b6\u614b absense \u6b20\u5e2d\u6570 G1 \u4e00\u5b66\u671f\u306e\u6210\u7e3e (\uff10\u301c\uff12\uff10) G2 \u4e8c\u5b66\u671f\u306e\u6210\u7e3e (\uff10\u301c\uff12\uff10) G3 \u6700\u7d42\u6210\u7e3e (\uff10\u301c\uff12\uff10) \u30dd\u30eb\u30c8\u30ac\u30eb\u306e\u9ad8\u6821\u306a\u306e\u3067\u3001\u65e5\u672c\u4eba\u306e\u611f\u899a\u304b\u3089\u3059\u308b\u3068\uff1f\uff1f\uff1f\u306a\u3068\u3053\u308d\u3082\u3042\u308a\u307e\u3059\u304c\u3001 \u4e0a\u8a18\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u3053\u304b\u3089\u306e\u30df\u30c3\u30b7\u30e7\u30f3 \u9ad8\u6821\u751f\u306e\u5404\u5c5e\u6027\u304c\u6570\u5b66\u306e\u6210\u7e3e(G1, G2, G3)\u3001\u7279\u306b\u6700\u7d42\u6210\u7e3e(G3)\u306b\u4e0e\u3048\u308b\u5f71\u97ff\u3092\u8abf\u3079\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002 \uff08\u88dc\u8db3\u8aac\u660e)\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f # \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f\u3001\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u7570\u306a\u308a\u3001\u6570\u5024\u4ee5\u5916\u306e\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 info() \u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u308b\u3068\u3001\u30ab\u30e9\u30e0\u540d\u3068\u30c7\u30fc\u30bf\u5f62\u5f0f\u306e\u4e00\u89a7\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5f62\u5f0f\u306e\u78ba\u8a8d df.info() \u30ab\u30e9\u30e0\u540d\u306b\u7d9a\u3044\u3066\u3001\u30c7\u30fc\u30bf\u306e\u500b\u6570\u3001\u3055\u3089\u306b\u5f62\u5f0f\u304c int64 \u304b object \u306e\u3088\u3046\u306b\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002 int64 : \u6570\u5024\u30c7\u30fc\u30bf object : \u6587\u5b57\u5217\u30c7\u30fc\u30bf \u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u3067\u91cd\u8981\u306a\u306e\u306f\u3001 \u6570\u5024\u30c7\u30fc\u30bf\uff08\u91cf\u7684\u30c7\u30fc\u30bf\uff09 \u3001 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\uff08\u8cea\u7684\u30c7\u30fc\u30bf\uff09 \u3092\u533a\u5225\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u6570\u5024\u30c7\u30fc\u30bf : \u91cf\u304c\u6570\u5024\u306b\u3088\u3063\u3066\u9023\u7d9a\u7684\u306b\u8868\u73fe\u3055\u308c\u308b\u30c7\u30fc\u30bf\u3067\u3042\u308a\u6bd4\u8f03\u53ef\u80fd\u3002\uff08\u4f8b. \u4eba\u6570\u3084\u91d1\u984d\u306a\u3069) \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf : \u30ab\u30c6\u30b4\u30ea\u3084\u30b0\u30eb\u30fc\u30d7\u3092\u8868\u3059\u4e0d\u9023\u7d9a\u306e\u30c7\u30fc\u30bf \u5c11\u3057\u6ce8\u610f\u3057\u305f\u3044\u306e\u306f\u3001\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3067\u3042\u3063\u3066\u3082\u3001\u30ab\u30c6\u30b4\u30ea\u306e\u7a2e\u985e\u304c\u6570\u5024\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3068\u3001 int64 \u5f62\u5f0f\u3068\u306a\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u30ab\u30c6\u30b4\u30ea\u30fc\u30c7\u30fc\u30bf\u3067\u3042\u3063\u3066\u3082\u3001\u6bd4\u8f03\u53ef\u80fd\u306a\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u5fc5\u305a\u3057\u3082\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u3092\u5909\u63db\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u51e6\u7406\u3057\u305f\u3044\u306a\u3089\u3001\u578b\u3092 object \u306b\u5909\u66f4\u3057\u3066\u304a\u304f\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002 \u6570\u5024\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b df['Medu'] = df['Medu'].astype('object') df['Fedu'] = df['Fedu'].astype('object') \u30c7\u30fc\u30bf\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b # \u6d77\u5916\u3067\u4f5c\u3089\u308c\u305f\u30c7\u30fc\u30bf\u306f\u3001\u7279\u306b\u82f1\u8a9e\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u8a18\u8ff0\u3067\u3042\u3063\u3066\u3001\u76f4\u611f\u7684\u306a\u30c7\u30fc\u30bf\u5206\u6790\u306e\u59a8\u3052\u306b\u306a\u308a\u307e\u3059\u3002 \u30ab\u30e9\u30e0\u540d\u3084\u30ab\u30c6\u30b4\u30ea\u30fc\u30c7\u30fc\u30bf\u306f\u3001\u3082\u3046\u5c11\u3057\u76f4\u611f\u7684\u306b\u7406\u89e3\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002 \u30ab\u30e9\u30e0\u540d\u306f\u3001\u5909\u66f4\u5f8c\u306e\u30ab\u30e9\u30e0\u540d\u306e\u4e00\u89a7\u3092\u4f5c\u6210\u3059\u308c\u3070\u3001\u307e\u3068\u3081\u3066\u5dee\u3057\u66ff\u3048\u3089\u308c\u307e\u3059\u3002 \u30ab\u30e9\u30e0\u540d\u306e\u5909\u66f4 columns = [ '\u5b66\u6821\u540d' , '\u6027\u5225' , '\u5e74\u9f62' , '\u4f4f\u6240' , '\u5144\u5f1f\u59c9\u59b9' , '\u4f4f\u5c45' , '\u6bcd\u5b66\u6b74' , '\u7236\u5b66\u6b74' , '\u6bcd\u8077\u696d' , '\u7236\u8077\u696d' , '\u9032\u5b66\u7406\u7531' , '\u4fdd\u8b77\u8005' , '\u901a\u5b66\u6642\u9593' , '\u5b66\u7fd2\u6642\u9593' , '\u843d\u7b2c\u6570' , '\u5968\u5b66\u91d1' , '\u89aa\u3082\u3061' , '\u587e' , '\u90e8\u6d3b' , '\u5e7c\u7a1a\u5712' , '\u5927\u5b66' , '\u30cd\u30c3\u30c8' , '\u604b\u4eba' , '\u5bb6\u65cf' , '\u81ea\u7531\u6642\u9593' , '\u5916\u51fa' , '\u30a2\u30eb\u30b3\u30fc\u30eb' , '\u30d1\u30ea\u30d4' , '\u5065\u5eb7\u72b6\u614b' , '\u6b20\u5e2d\u65e5' , 'G1' , 'G2' , 'G3' ] df . columns = columns #\u5dee\u3057\u66ff\u3048 \u30ab\u30c6\u30b4\u30ea\u30fc\u30c7\u30fc\u30bf\u3082\u65b0\u65e7\u5bfe\u5fdc\u8868\u3092\u8f9e\u66f8\u3067\u4f5c\u308c\u3070\u3001\u307e\u3068\u3081\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u7f6e\u304d\u63db\u3048 df['\u5b66\u6821\u540d'] = df['\u5b66\u6821\u540d'].replace({'GP': 'GP\u9ad8', 'MS': 'MS\u9ad8'}) df['\u6027\u5225'] = df['\u6027\u5225'].map({'M': '\u7537\u6027', 'F': '\u5973\u6027'}) df['\u4f4f\u6240'] = df['\u4f4f\u6240'].map({'R': '\u90ca\u5916', 'U': '\u5e02\u5185'}) df['\u5144\u5f1f\u59c9\u59b9'] = df['\u5144\u5f1f\u59c9\u59b9'].map({'LE3': '\u306a\u3057', 'GT3': '\u3042\u308a'}) df['\u4f4f\u5c45'] = df['\u4f4f\u5c45'].map({'A': '\u4e0b\u5bbf', 'T': '\u540c\u5c45'}) df['\u6bcd\u8077\u696d'] = df['\u6bcd\u8077\u696d'].map( {'at_home': '\u306a\u3057', 'services': '\u30b5\u30fc\u30d3\u30b9', 'teacher': '\u6559\u5e2b', 'health': '\u533b\u7642', 'other': '\u305d\u306e\u4ed6'}) df['\u7236\u8077\u696d'] = df['\u7236\u8077\u696d'].map( {'at_home': '\u306a\u3057', 'services': '\u30b5\u30fc\u30d3\u30b9', 'teacher': '\u6559\u5e2b', 'health': '\u533b\u7642', 'other': '\u305d\u306e\u4ed6'}) df['\u9032\u5b66\u7406\u7531'] = df['\u9032\u5b66\u7406\u7531'].map( {'course': '\u6559\u80b2\u5185\u5bb9', 'home': '\u901a\u3044\u3084\u3059\u3055', 'reputation': '\u8a55\u5224\u306e\u826f\u3055', 'other': '\u305d\u306e\u4ed6'}) df['\u4fdd\u8b77\u8005'] = df['\u4fdd\u8b77\u8005'].map({'mother': '\u6bcd\u89aa', 'father': '\u7236\u89aa', 'other': '\u305d\u306e\u4ed6'}) \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u4e00\u89a7 # \u6570\u5024\u30c7\u30fc\u30bf\u306f\u3001 describe() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u3001\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306f\u3001\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u5c11\u3057\u5de5\u592b\u3059\u308b\u3068\u3001 \u8981\u7d04\u7d71\u8a08\u91cf\u3092\u3064\u304b\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6027\u5225\u306e\u6bd4\u7387\u3092\u307f\u308b df['sex'].value_counts() \u3072\u3068\u3064\u305a\u3064\u3001\u30ab\u30e9\u30e0\u540d\u3092\u8abf\u3079\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001 df.dtypes \u304c object \u3042\u308b\u3082\u306e\u3092\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3068\u307f\u306a\u3057\u3066\u3001 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u30ab\u30e9\u30e0\u540d\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u30ab\u30e9\u30e0\u540d\u4e00\u89a7 list(df.dtypes[df.dtypes == 'object'].index) \u3042\u3068\u306f\u3001for\u6587\u3092\u4f7f\u3063\u3066\u30ab\u30e9\u30e0\u540d\u3092\u9806\u756a\u306b\u51e6\u7406\u3057\u3066\u3044\u304d\u307e\u3059\u3002 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u5024\u306e\u8abf\u3079\u308b for name in df.dtypes[df.dtypes == 'object'].index: print(name) print(df[name].value_counts()) print() \u5b66\u6821\u540d GP\u9ad8 349 MS\u9ad8 46 Name: \u5b66\u6821\u540d, dtype: int64 \u6027\u5225 \u5973\u6027 208 \u7537\u6027 187 Name: \u6027\u5225, dtype: int64 \u4f4f\u6240 \u5e02\u5185 307 \u90ca\u5916 88 Name: \u4f4f\u6240, dtype: int64 Pandas\u529b\u3092\u3042\u3052\u308b\u305f\u3081\u306b\u306f\uff1f Pandas \u306f\u9ad8\u6a5f\u80fd\u3067\u3001Google \u3067\u8abf\u3079\u308b\u3068\u3044\u3063\u3066\u3082\u306a\u304b\u306a\u304b\u6c42\u3081\u3066\u3044\u308b\u6a5f\u80fd\u3092\u63a2\u3059\u3053\u3068\u304c\u96e3\u3057\u3044\u3067\u3059\u3002 \u6700\u521d\u306e\u3046\u3061\u306f\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u30b3\u30fc\u30c9\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u5730\u9053\u306b\u3072\u3068\u3064\u305a\u3064\u52d5\u304d\u3092\u78ba\u8a8d\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 df.dtypes df.dtypes == 'object' df.dtypes[df.dtypes == 'object'] df.dtypes[df.dtypes == 'object'].index \u3053\u3046\u3044\u3046\u5730\u9053\u306a\u52aa\u529b\u304c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5411\u4e0a\u306b\u7e4b\u304c\u308a\u307e\u3059\u3002 \u30b3\u30fc\u30b9\u30ef\u30fc\u30af # \u30dd\u30eb\u30c8\u30ac\u30eb\u306e\u9ad8\u6821\u751f\u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u5206\u6790\u3057\u3001\u6700\u7d42\u6210\u7e3eG3\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u8981\u56e0\u3092\u5831\u544a\u3057\u3088\u3046\u3002 \uff08\u30ec\u30dd\u30fc\u30c8\u306b\u306f\u3001Pandas \u3067\u7528\u3044\u3066\u4f5c\u753b\u3057\u305f\u30b0\u30e9\u30d5\u3092\u30a8\u30d3\u30c7\u30f3\u30b9\uff08\u6839\u62e0\uff09\u3068\u3057\u3066\u542b\u3081\u308b\u3053\u3068\uff09 \u30c7\u30fc\u30bf\u5206\u6790\u306f\u3001\u81ea\u7531\u306a\u8996\u70b9\u304b\u3089\u81ea\u7531\u306b\u5206\u6790\u3057\u3066\u826f\u3044\u3002 \u4f8b\u3048\u3070\u306e\u4f8b \u3069\u306e\u5c5e\u6027\uff08\u30ab\u30e9\u30e0\uff09\u304c\u6700\u7d42\u6210\u7e3e\u306b\u6700\u3082\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u3060\u308d\u3046\u304b\uff1f \u305d\u3082\u305d\u3082\u7537\u5b50\u5b66\u751f\u3068\u5973\u5b50\u5b66\u751f\u3068\u3069\u3061\u3089\u304c\u6210\u7e3e\u304c\u3044\u3044\uff1f \u604b\u4eba\u306e\u6709\u7121\u3068\u6210\u7e3e\u306e\u95a2\u4fc2\u306f\uff1f \u3082\u3057\u81ea\u5206\u306a\u308a\u306b\u65b0\u3057\u3044\u4e8b\u5b9f\uff08\u95a2\u4fc2\u6027\uff09\u3092\u767a\u898b\u3057\u305f\u3068\u304d\u306f\u3001\u305d\u3061\u3089\u3092\u5831\u544a\u3057\u3066\u9802\u3051\u308b\u3068 \u8a55\u4fa1\u306f\u9ad8\u304f\u306a\u308a\u307e\u3059\u3002 \u30b0\u30e9\u30d5\u306e\u4f5c\u753b\u306f\u3001\u8b1b\u7fa9\u3067\u7fd2\u3063\u305f\u3082\u306e\u3060\u3051\u3067\u306a\u304f\u3001Web\u7b49\u3067\u8abf\u3079\u3066\u65b0\u3057\u3044\u30b0\u30e9\u30d5\u306b\u6311\u6226\u3057\u3088\u3046\u3002 Web\u3067\u8abf\u3079\u3066\u66f8\u304f\u306e\u304c\u3001\u30c7\u30fc\u30bf\u5206\u6790\u3092\u4e0a\u9054\u3059\u308b\u30b3\u30c4\u3067\u3059\u3002 \u7bb1\u3072\u3052\u56f3 # \u7bb1\u3072\u3052\u56f3\u306f\u3001\u6700\u5927\u5024\u3001\u6700\u5c0f\u5024\u3001\u4e2d\u592e\u5024\u3001\u56db\u5206\u4f4d\u7bc4\u56f2\u3092\u8996\u899a\u5316\u3057\u3066\u304f\u308c\u308b\u30b0\u30e9\u30d5\u3067\u3059\u3002 \u30d2\u30b2\u306e\u4e0a\u7aef\u304c\u6700\u5927\u5024\u3001\u30d2\u30b2\u306e\u4e0b\u7aef\u304c\u6700\u5c0f\u5024\u3092\u793a\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u304c\u307f\u3048\u3066\u304d\u307e\u3059\u3002 G1,G2,G3\u3068\u4e26\u3079\u305f\u7bb1\u30d2\u30b2\u56f3 \u30b3\u30fc\u30c9 G1,G2,G3\u3068\u4e26\u3079\u308b plt.boxplot([df['G1'], df['G2'], df['G3']]) plt.grid(True) seaborn \u306e boxplot() \u3092\u7528\u3044\u308c\u3070\u3001\u3082\u3046\u5c11\u3057\u3053\u3063\u305f\u51dd\u3063\u305f\u7bb1\u30d2\u30b2\u56f3\u3092\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 \u7236\u89aa\u306e\u8077\u696d\u3054\u3068\u306b \u30b3\u30fc\u30c9 order_by = ['\u306a\u3057', '\u30b5\u30fc\u30d3\u30b9', '\u6559\u5e2b', '\u533b\u7642', '\u305d\u306e\u4ed6'] sns.boxplot(x=df['\u7236\u8077\u696d'], y=df['G3'], order=order_by) plt.title('\u7236\u89aa\u306e\u4ed5\u4e8b\u304c\u5b50\u4f9b\u306e\u6210\u7e3e\u306b\u4e0e\u3048\u308b\u5f71\u97ff') plt.xlabel('\u7236\u89aa\u306e\u4ed5\u4e8b') plt.ylabel('\u6210\u7e3e') plt.show() subplot \u3092\u4f7f\u3046\u3068\u3001\u8907\u6570\u306e\u30b0\u30e9\u30d5\u3092\u4e00\u679a\u306e\u56f3\u306b\u52a0\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u7236\u89aa\u3068\u6bcd\u89aa\u3092\u6bd4\u8f03\u3059\u308b \u30b3\u30fc\u30c9 subplot \u3092\u4f7f\u3063\u305f\u51dd\u3063\u305f\u30b0\u30e9\u30d5 plt.figure(figsize= (15,5)) plt.subplot(1, 2, 1) order_by=['\u306a\u3057', '\u30b5\u30fc\u30d3\u30b9', '\u6559\u5e2b', '\u533b\u7642', '\u305d\u306e\u4ed6'] sns.boxplot(x=df['\u7236\u8077\u696d'], y=df['G3'], order=order_by) plt.xticks(rotation=90) plt.title('\u7236\u89aa\u306e\u8077\u696d\u3068\u6210\u7e3e') plt.subplot(1, 2, 2) sns.boxplot(x=df['\u6bcd\u8077\u696d'], y=df['G3'], order=order_by) plt.xticks(rotation=90) plt.title('\u6bcd\u89aa\u306e\u8077\u696d\u3068\u6210\u7e3e') plt.show() \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 # \u304a\u306a\u3058\u307f\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3082Seaborn\u3092\u4f7f\u3046\u3068\u591a\u5f69\u306b\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 \u30d1\u30ec\u30c3\u30c8\u306b\u3088\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 \u30b3\u30fc\u30c9 countplot sns.set_theme(style=\"whitegrid\", font=\"IPAexGothic\") sns.countplot(x=df['G3'], palette='gray_r') plt.xlabel('G3') plt.ylabel('Count') plt.show() hue \u3092\u8ffd\u52a0\u3059\u308b\u3068\u3001\u30ab\u30c6\u30b4\u30ea\u30fc\u3054\u3068\u306b\u8272\u5206\u3051\u3055\u308c\u305f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u5f97\u3089\u308c\u307e\u3059\u3002 \u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3055\u308c\u305f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 \u30b3\u30fc\u30c9 \u6027\u5225\u3054\u3068\u306b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 sns.set(font=\"IPAexGothic\") # \u6587\u5b57\u5316\u3051\u3057\u305f\u3089 sns.countplot(x='G3',hue='\u6027\u5225', data=df) plt.title('\u6027\u5225\u3054\u3068\u306e\u6210\u7e3e\u5206\u5e03') plt.xlabel('G3') plt.ylabel('Count') plt.show() \u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u6cd5\u3092\u4f7f\u3046\u3068\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u6ed1\u3089\u304b\u306a\u66f2\u7dda\u306b\u4fdd\u7ba1\u3057\u3066\u304f\u308c\u307e\u3059\u3002 \u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u6cd5\u306b\u3088\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 \u30b3\u30fc\u30c9 \u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u6cd5\u306b\u3088\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 sns.kdeplot(df.groupby('\u6027\u5225').get_group('\u7537\u6027')['G3'], shade = True, label = '\u7537\u5b50\u5b66\u751f') sns.kdeplot(df.groupby('\u6027\u5225').get_group('\u5973\u6027')['G3'], shade = True, label = '\u5973\u5b50\u5b66\u751f') plt.xlabel('G3') plt.ylabel('% data distribution') plt.show() \uff13\u3064\u4ee5\u4e0a\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u6563\u5e03\u56f3\u3092\u4e00\u5ea6\u306b\u898b\u308b # Seaborn\u306e pairplot \u3092\u7528\u3044\u308b\u3068\u3001\uff13\u3064\u4ee5\u4e0a\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u6563\u5e03\u56f3\u3092\u4e00\u5ea6\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 \u5168\u90e8\u306e\u30da\u30a2\u30d7\u30ed\u30c3\u30c8 \u30b3\u30fc\u30c9 sns.pairplot(df, hue='\u6027\u5225') \u78ba\u8a8d\u3057\u305f\u3044\u9805\u76ee\u306b\u7d5e\u3063\u305f\u65b9\u304c\u898b\u3084\u3059\u3044\u30b0\u30e9\u30d5\u306b\u306a\u308a\u307e\u3059\u3002 \uff14\u9805\u76ee\u306b\u7d5e\u3063\u305f\u30da\u30a2\u30d7\u30ed\u30c3\u30c8 \u30b3\u30fc\u30c9 sns.pairplot(df[['\u6b20\u5e2d\u65e5', '\u30a2\u30eb\u30b3\u30fc\u30eb', '\u5e74\u9f62', 'G3']]) \u76f8\u95a2\u884c\u5217\u3068\u30d2\u30fc\u30c8\u30de\u30c3\u30d7 # \u76f8\u95a2\u884c\u5217\u306f\u3001\u3059\u3079\u3066\u306e\u6570\u5024\u30c7\u30fc\u30bf\u9593\u3067\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u3057\u305f\u884c\u5217\u3067\u3059\u3002 \u76f8\u95a2\u884c\u5217\u3092\u6c42\u3081\u308b df.corr() \u3054\u591a\u5206\u306b\u6f0f\u308c\u305a\u3001\u53ef\u8996\u5316\u3057\u3066\u304a\u304f\u3068\u30c7\u30fc\u30bf\u89e3\u6790\u304c\u884c\u3084\u3059\u3044\u3067\u3059\u3002 \u30d2\u30fc\u30c8\u30de\u30c3\u30d7 \u30b3\u30fc\u30c9 \u76f8\u95a2\u884c\u5217\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7 plt.figure(figsize=(10,10)) corr = df.corr() sns.heatmap(corr, annot=True) \u30ab\u30c6\u30b4\u30ea\u30fc\u30c7\u30fc\u30bf\u3092\u8996\u899a\u5316\u3059\u308b # \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u5206\u985e\u304c\u3069\u306e\u3088\u3046\u306b\u6563\u3089\u3070\u3063\u3066\u3044\u308b\u304b\u4e00\u89a7\u3092\u4f5c\u308a\u307e\u3059\u3002 plt.figure(figsize = (15,15)) for i,item in enumerate(['school', 'sex', 'famsize', 'Pstatus', 'Mjob', 'Fjob', 'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic']): plt.subplot(4,4,i+1) sns.countplot(data=df, x=item) plt.title(item) plt.show()","title":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\uff11"},{"location":"student/#1","text":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u3084\u6a5f\u68b0\u5b66\u7fd2\u3092\u3057\u3063\u304b\u308a\u5b66\u3076\u305f\u3081\u306e\u5fdc\u7528\u554f\u984c\u3067\u3059\u3002 \u5fdc\u7528\u554f\u984c\u306a\u306e\u3067\u3001\u4eca\u307e\u3067\u306e\u5185\u5bb9\u3092\u632f\u308a\u8fd4\u308b\u3060\u3051\u3067\u306a\u304f\u3001 \u3088\u308a\u6df1\u304f\u77e5\u308b\u305f\u3081\u306bWeb\u3067\u8abf\u3079\u306a\u304c\u3089\u53d6\u308a\u7d44\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u4eca\u56de\u306f\u3001\u30c7\u30fc\u30bf\u5206\u6790\u3001\u30b0\u30e9\u30d5\u63cf\u753b\u3001\u76f8\u95a2\u306a\u3069\u3092\u4f7f\u3044\u306a\u304c\u3089\u3001 \u30c7\u30fc\u30bf\u306e\u50be\u5411\u3092\u3064\u304b\u3093\u3067\u3044\u304d\u307e\u3059\u3002","title":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\uff11\uff1a \u30c7\u30fc\u30bf\u306e\u50be\u5411\u3092\u3064\u304b\u3082\u3046"},{"location":"student/#_1","text":"\u4eca\u56de\u306f\u3001 \u30dd\u30eb\u30c8\u30ac\u30eb\u306e\u9ad8\u6821\u751f\u306e\u6570\u5b66\u306e\u6210\u7e3e\u30c7\u30fc\u30bf \u3092\u4f7f\u3063\u3066\u3001\u30c7\u30fc\u30bf\u89e3\u6790\u3092\u3057\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u306eURL https://kuramitsulab.github.io/data/student-mat.csv \u307e\u305a\u3001\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001pandas \u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u8aad\u307f\u8fbc\u3093\u3067\u304f\u3060\u3055\u3044\u3002 Warning \u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u5fd8\u308c\u306a\u3044\u306b\u3057\u307e\u3057\u3087\u3046","title":"\u30c7\u30fc\u30bf"},{"location":"student/#_2","text":"\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3057\u305f\u3068\u304d\u3001\u6700\u521d\u306b\u884c\u3046\u3053\u3068\u306f \u30c7\u30fc\u30bf\u306e\u5c5e\u6027 \u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u5c5e\u6027\u540d \u8aac\u660e school \u5b66\u6821\u540d sex \u6027\u5225 F : \u5973\u6027, M : \u7537\u6027 age \u5e74\u9f62 address \u5c45\u4f4f\u5730 U : \u90fd\u5e02\u90e8, R : \u5730\u65b9 famsize \u5bb6\u65cf\u30b5\u30a4\u30ba GT3 : \u5144\u5f1f\u3042\u308a, LE3 : \u4e00\u4eba\u66ae\u3089\u3057 Pstatus \u540c\u5c45 T : \u540c\u5c45, A : \u5bee Medu \u6bcd\u89aa\u306e\u5b66\u6b74 Fedu \u7236\u89aa\u306e\u5b66\u6b74 Mjob \u6bcd\u89aa\u306e\u8077\u696d Fjob \u7236\u89aa\u306e\u8077\u696d reason \u5b66\u6821\u3092\u9078\u3093\u3060\u7406\u7531 guardian \u4fdd\u8b77\u8005\u306f\u8ab0\u304b\uff1f traveltime \u901a\u5b66\u6642\u9593 studytime \u9031\u306e\u52c9\u5f37\u6642\u9593 failures \u904e\u53bb\u306e\u843d\u7b2c\u6570 schoolsup \u5968\u5b66\u91d1 famsup \u5bb6\u65cf\u304b\u3089\u306e\u30b5\u30dd\u30fc\u30c8 paid \u587e activities \u90e8\u6d3b\u52d5 nursery \u4fdd\u80b2\u5712 higher \u9ad8\u7b49\u6559\u80b2 internet \u30cd\u30c3\u30c8\u63a5\u7d9a romantic \u604b\u4eba famrel \u5bb6\u65cf\u95a2\u4fc2 freetime \u81ea\u7531\u6642\u9593 goout \u53cb\u4eba\u3068\u904a\u3076\u983b\u5ea6 Dalc \u5e73\u65e5\u306e\u30a2\u30eb\u30b3\u30fc\u30eb\u91cf Walc \u9031\u672b\u306e\u30a2\u30eb\u30b3\u30fc\u30eb\u91cf health \u5065\u5eb7\u72b6\u614b absense \u6b20\u5e2d\u6570 G1 \u4e00\u5b66\u671f\u306e\u6210\u7e3e (\uff10\u301c\uff12\uff10) G2 \u4e8c\u5b66\u671f\u306e\u6210\u7e3e (\uff10\u301c\uff12\uff10) G3 \u6700\u7d42\u6210\u7e3e (\uff10\u301c\uff12\uff10) \u30dd\u30eb\u30c8\u30ac\u30eb\u306e\u9ad8\u6821\u306a\u306e\u3067\u3001\u65e5\u672c\u4eba\u306e\u611f\u899a\u304b\u3089\u3059\u308b\u3068\uff1f\uff1f\uff1f\u306a\u3068\u3053\u308d\u3082\u3042\u308a\u307e\u3059\u304c\u3001 \u4e0a\u8a18\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u3053\u304b\u3089\u306e\u30df\u30c3\u30b7\u30e7\u30f3 \u9ad8\u6821\u751f\u306e\u5404\u5c5e\u6027\u304c\u6570\u5b66\u306e\u6210\u7e3e(G1, G2, G3)\u3001\u7279\u306b\u6700\u7d42\u6210\u7e3e(G3)\u306b\u4e0e\u3048\u308b\u5f71\u97ff\u3092\u8abf\u3079\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002","title":"\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3059\u308b"},{"location":"student/#_3","text":"\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f\u3001\u30dc\u30b9\u30c8\u30f3\u4f4f\u5b85\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u7570\u306a\u308a\u3001\u6570\u5024\u4ee5\u5916\u306e\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 info() \u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u308b\u3068\u3001\u30ab\u30e9\u30e0\u540d\u3068\u30c7\u30fc\u30bf\u5f62\u5f0f\u306e\u4e00\u89a7\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002 \u30c7\u30fc\u30bf\u5f62\u5f0f\u306e\u78ba\u8a8d df.info() \u30ab\u30e9\u30e0\u540d\u306b\u7d9a\u3044\u3066\u3001\u30c7\u30fc\u30bf\u306e\u500b\u6570\u3001\u3055\u3089\u306b\u5f62\u5f0f\u304c int64 \u304b object \u306e\u3088\u3046\u306b\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002 int64 : \u6570\u5024\u30c7\u30fc\u30bf object : \u6587\u5b57\u5217\u30c7\u30fc\u30bf \u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u3067\u91cd\u8981\u306a\u306e\u306f\u3001 \u6570\u5024\u30c7\u30fc\u30bf\uff08\u91cf\u7684\u30c7\u30fc\u30bf\uff09 \u3001 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\uff08\u8cea\u7684\u30c7\u30fc\u30bf\uff09 \u3092\u533a\u5225\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u6570\u5024\u30c7\u30fc\u30bf : \u91cf\u304c\u6570\u5024\u306b\u3088\u3063\u3066\u9023\u7d9a\u7684\u306b\u8868\u73fe\u3055\u308c\u308b\u30c7\u30fc\u30bf\u3067\u3042\u308a\u6bd4\u8f03\u53ef\u80fd\u3002\uff08\u4f8b. \u4eba\u6570\u3084\u91d1\u984d\u306a\u3069) \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf : \u30ab\u30c6\u30b4\u30ea\u3084\u30b0\u30eb\u30fc\u30d7\u3092\u8868\u3059\u4e0d\u9023\u7d9a\u306e\u30c7\u30fc\u30bf \u5c11\u3057\u6ce8\u610f\u3057\u305f\u3044\u306e\u306f\u3001\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3067\u3042\u3063\u3066\u3082\u3001\u30ab\u30c6\u30b4\u30ea\u306e\u7a2e\u985e\u304c\u6570\u5024\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3068\u3001 int64 \u5f62\u5f0f\u3068\u306a\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u30ab\u30c6\u30b4\u30ea\u30fc\u30c7\u30fc\u30bf\u3067\u3042\u3063\u3066\u3082\u3001\u6bd4\u8f03\u53ef\u80fd\u306a\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u5fc5\u305a\u3057\u3082\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u3092\u5909\u63db\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3068\u3057\u3066\u51e6\u7406\u3057\u305f\u3044\u306a\u3089\u3001\u578b\u3092 object \u306b\u5909\u66f4\u3057\u3066\u304a\u304f\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002 \u6570\u5024\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b df['Medu'] = df['Medu'].astype('object') df['Fedu'] = df['Fedu'].astype('object')","title":"\uff08\u88dc\u8db3\u8aac\u660e)\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f"},{"location":"student/#_4","text":"\u6d77\u5916\u3067\u4f5c\u3089\u308c\u305f\u30c7\u30fc\u30bf\u306f\u3001\u7279\u306b\u82f1\u8a9e\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u8a18\u8ff0\u3067\u3042\u3063\u3066\u3001\u76f4\u611f\u7684\u306a\u30c7\u30fc\u30bf\u5206\u6790\u306e\u59a8\u3052\u306b\u306a\u308a\u307e\u3059\u3002 \u30ab\u30e9\u30e0\u540d\u3084\u30ab\u30c6\u30b4\u30ea\u30fc\u30c7\u30fc\u30bf\u306f\u3001\u3082\u3046\u5c11\u3057\u76f4\u611f\u7684\u306b\u7406\u89e3\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002 \u30ab\u30e9\u30e0\u540d\u306f\u3001\u5909\u66f4\u5f8c\u306e\u30ab\u30e9\u30e0\u540d\u306e\u4e00\u89a7\u3092\u4f5c\u6210\u3059\u308c\u3070\u3001\u307e\u3068\u3081\u3066\u5dee\u3057\u66ff\u3048\u3089\u308c\u307e\u3059\u3002 \u30ab\u30e9\u30e0\u540d\u306e\u5909\u66f4 columns = [ '\u5b66\u6821\u540d' , '\u6027\u5225' , '\u5e74\u9f62' , '\u4f4f\u6240' , '\u5144\u5f1f\u59c9\u59b9' , '\u4f4f\u5c45' , '\u6bcd\u5b66\u6b74' , '\u7236\u5b66\u6b74' , '\u6bcd\u8077\u696d' , '\u7236\u8077\u696d' , '\u9032\u5b66\u7406\u7531' , '\u4fdd\u8b77\u8005' , '\u901a\u5b66\u6642\u9593' , '\u5b66\u7fd2\u6642\u9593' , '\u843d\u7b2c\u6570' , '\u5968\u5b66\u91d1' , '\u89aa\u3082\u3061' , '\u587e' , '\u90e8\u6d3b' , '\u5e7c\u7a1a\u5712' , '\u5927\u5b66' , '\u30cd\u30c3\u30c8' , '\u604b\u4eba' , '\u5bb6\u65cf' , '\u81ea\u7531\u6642\u9593' , '\u5916\u51fa' , '\u30a2\u30eb\u30b3\u30fc\u30eb' , '\u30d1\u30ea\u30d4' , '\u5065\u5eb7\u72b6\u614b' , '\u6b20\u5e2d\u65e5' , 'G1' , 'G2' , 'G3' ] df . columns = columns #\u5dee\u3057\u66ff\u3048 \u30ab\u30c6\u30b4\u30ea\u30fc\u30c7\u30fc\u30bf\u3082\u65b0\u65e7\u5bfe\u5fdc\u8868\u3092\u8f9e\u66f8\u3067\u4f5c\u308c\u3070\u3001\u307e\u3068\u3081\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u7f6e\u304d\u63db\u3048 df['\u5b66\u6821\u540d'] = df['\u5b66\u6821\u540d'].replace({'GP': 'GP\u9ad8', 'MS': 'MS\u9ad8'}) df['\u6027\u5225'] = df['\u6027\u5225'].map({'M': '\u7537\u6027', 'F': '\u5973\u6027'}) df['\u4f4f\u6240'] = df['\u4f4f\u6240'].map({'R': '\u90ca\u5916', 'U': '\u5e02\u5185'}) df['\u5144\u5f1f\u59c9\u59b9'] = df['\u5144\u5f1f\u59c9\u59b9'].map({'LE3': '\u306a\u3057', 'GT3': '\u3042\u308a'}) df['\u4f4f\u5c45'] = df['\u4f4f\u5c45'].map({'A': '\u4e0b\u5bbf', 'T': '\u540c\u5c45'}) df['\u6bcd\u8077\u696d'] = df['\u6bcd\u8077\u696d'].map( {'at_home': '\u306a\u3057', 'services': '\u30b5\u30fc\u30d3\u30b9', 'teacher': '\u6559\u5e2b', 'health': '\u533b\u7642', 'other': '\u305d\u306e\u4ed6'}) df['\u7236\u8077\u696d'] = df['\u7236\u8077\u696d'].map( {'at_home': '\u306a\u3057', 'services': '\u30b5\u30fc\u30d3\u30b9', 'teacher': '\u6559\u5e2b', 'health': '\u533b\u7642', 'other': '\u305d\u306e\u4ed6'}) df['\u9032\u5b66\u7406\u7531'] = df['\u9032\u5b66\u7406\u7531'].map( {'course': '\u6559\u80b2\u5185\u5bb9', 'home': '\u901a\u3044\u3084\u3059\u3055', 'reputation': '\u8a55\u5224\u306e\u826f\u3055', 'other': '\u305d\u306e\u4ed6'}) df['\u4fdd\u8b77\u8005'] = df['\u4fdd\u8b77\u8005'].map({'mother': '\u6bcd\u89aa', 'father': '\u7236\u89aa', 'other': '\u305d\u306e\u4ed6'})","title":"\u30c7\u30fc\u30bf\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b"},{"location":"student/#_5","text":"\u6570\u5024\u30c7\u30fc\u30bf\u306f\u3001 describe() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u3001\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306f\u3001\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u5c11\u3057\u5de5\u592b\u3059\u308b\u3068\u3001 \u8981\u7d04\u7d71\u8a08\u91cf\u3092\u3064\u304b\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6027\u5225\u306e\u6bd4\u7387\u3092\u307f\u308b df['sex'].value_counts() \u3072\u3068\u3064\u305a\u3064\u3001\u30ab\u30e9\u30e0\u540d\u3092\u8abf\u3079\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001 df.dtypes \u304c object \u3042\u308b\u3082\u306e\u3092\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3068\u307f\u306a\u3057\u3066\u3001 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u30ab\u30e9\u30e0\u540d\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u30ab\u30e9\u30e0\u540d\u4e00\u89a7 list(df.dtypes[df.dtypes == 'object'].index) \u3042\u3068\u306f\u3001for\u6587\u3092\u4f7f\u3063\u3066\u30ab\u30e9\u30e0\u540d\u3092\u9806\u756a\u306b\u51e6\u7406\u3057\u3066\u3044\u304d\u307e\u3059\u3002 \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u5024\u306e\u8abf\u3079\u308b for name in df.dtypes[df.dtypes == 'object'].index: print(name) print(df[name].value_counts()) print() \u5b66\u6821\u540d GP\u9ad8 349 MS\u9ad8 46 Name: \u5b66\u6821\u540d, dtype: int64 \u6027\u5225 \u5973\u6027 208 \u7537\u6027 187 Name: \u6027\u5225, dtype: int64 \u4f4f\u6240 \u5e02\u5185 307 \u90ca\u5916 88 Name: \u4f4f\u6240, dtype: int64 Pandas\u529b\u3092\u3042\u3052\u308b\u305f\u3081\u306b\u306f\uff1f Pandas \u306f\u9ad8\u6a5f\u80fd\u3067\u3001Google \u3067\u8abf\u3079\u308b\u3068\u3044\u3063\u3066\u3082\u306a\u304b\u306a\u304b\u6c42\u3081\u3066\u3044\u308b\u6a5f\u80fd\u3092\u63a2\u3059\u3053\u3068\u304c\u96e3\u3057\u3044\u3067\u3059\u3002 \u6700\u521d\u306e\u3046\u3061\u306f\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u30b3\u30fc\u30c9\u304c\u51fa\u3066\u304d\u305f\u3089\u3001\u5730\u9053\u306b\u3072\u3068\u3064\u305a\u3064\u52d5\u304d\u3092\u78ba\u8a8d\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 df.dtypes df.dtypes == 'object' df.dtypes[df.dtypes == 'object'] df.dtypes[df.dtypes == 'object'].index \u3053\u3046\u3044\u3046\u5730\u9053\u306a\u52aa\u529b\u304c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5411\u4e0a\u306b\u7e4b\u304c\u308a\u307e\u3059\u3002","title":"\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u4e00\u89a7"},{"location":"student/#_6","text":"\u30dd\u30eb\u30c8\u30ac\u30eb\u306e\u9ad8\u6821\u751f\u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u5206\u6790\u3057\u3001\u6700\u7d42\u6210\u7e3eG3\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u8981\u56e0\u3092\u5831\u544a\u3057\u3088\u3046\u3002 \uff08\u30ec\u30dd\u30fc\u30c8\u306b\u306f\u3001Pandas \u3067\u7528\u3044\u3066\u4f5c\u753b\u3057\u305f\u30b0\u30e9\u30d5\u3092\u30a8\u30d3\u30c7\u30f3\u30b9\uff08\u6839\u62e0\uff09\u3068\u3057\u3066\u542b\u3081\u308b\u3053\u3068\uff09 \u30c7\u30fc\u30bf\u5206\u6790\u306f\u3001\u81ea\u7531\u306a\u8996\u70b9\u304b\u3089\u81ea\u7531\u306b\u5206\u6790\u3057\u3066\u826f\u3044\u3002 \u4f8b\u3048\u3070\u306e\u4f8b \u3069\u306e\u5c5e\u6027\uff08\u30ab\u30e9\u30e0\uff09\u304c\u6700\u7d42\u6210\u7e3e\u306b\u6700\u3082\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u3060\u308d\u3046\u304b\uff1f \u305d\u3082\u305d\u3082\u7537\u5b50\u5b66\u751f\u3068\u5973\u5b50\u5b66\u751f\u3068\u3069\u3061\u3089\u304c\u6210\u7e3e\u304c\u3044\u3044\uff1f \u604b\u4eba\u306e\u6709\u7121\u3068\u6210\u7e3e\u306e\u95a2\u4fc2\u306f\uff1f \u3082\u3057\u81ea\u5206\u306a\u308a\u306b\u65b0\u3057\u3044\u4e8b\u5b9f\uff08\u95a2\u4fc2\u6027\uff09\u3092\u767a\u898b\u3057\u305f\u3068\u304d\u306f\u3001\u305d\u3061\u3089\u3092\u5831\u544a\u3057\u3066\u9802\u3051\u308b\u3068 \u8a55\u4fa1\u306f\u9ad8\u304f\u306a\u308a\u307e\u3059\u3002 \u30b0\u30e9\u30d5\u306e\u4f5c\u753b\u306f\u3001\u8b1b\u7fa9\u3067\u7fd2\u3063\u305f\u3082\u306e\u3060\u3051\u3067\u306a\u304f\u3001Web\u7b49\u3067\u8abf\u3079\u3066\u65b0\u3057\u3044\u30b0\u30e9\u30d5\u306b\u6311\u6226\u3057\u3088\u3046\u3002 Web\u3067\u8abf\u3079\u3066\u66f8\u304f\u306e\u304c\u3001\u30c7\u30fc\u30bf\u5206\u6790\u3092\u4e0a\u9054\u3059\u308b\u30b3\u30c4\u3067\u3059\u3002","title":"\u30b3\u30fc\u30b9\u30ef\u30fc\u30af"},{"location":"student/#_7","text":"\u7bb1\u3072\u3052\u56f3\u306f\u3001\u6700\u5927\u5024\u3001\u6700\u5c0f\u5024\u3001\u4e2d\u592e\u5024\u3001\u56db\u5206\u4f4d\u7bc4\u56f2\u3092\u8996\u899a\u5316\u3057\u3066\u304f\u308c\u308b\u30b0\u30e9\u30d5\u3067\u3059\u3002 \u30d2\u30b2\u306e\u4e0a\u7aef\u304c\u6700\u5927\u5024\u3001\u30d2\u30b2\u306e\u4e0b\u7aef\u304c\u6700\u5c0f\u5024\u3092\u793a\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u304c\u307f\u3048\u3066\u304d\u307e\u3059\u3002 G1,G2,G3\u3068\u4e26\u3079\u305f\u7bb1\u30d2\u30b2\u56f3 \u30b3\u30fc\u30c9 G1,G2,G3\u3068\u4e26\u3079\u308b plt.boxplot([df['G1'], df['G2'], df['G3']]) plt.grid(True) seaborn \u306e boxplot() \u3092\u7528\u3044\u308c\u3070\u3001\u3082\u3046\u5c11\u3057\u3053\u3063\u305f\u51dd\u3063\u305f\u7bb1\u30d2\u30b2\u56f3\u3092\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 \u7236\u89aa\u306e\u8077\u696d\u3054\u3068\u306b \u30b3\u30fc\u30c9 order_by = ['\u306a\u3057', '\u30b5\u30fc\u30d3\u30b9', '\u6559\u5e2b', '\u533b\u7642', '\u305d\u306e\u4ed6'] sns.boxplot(x=df['\u7236\u8077\u696d'], y=df['G3'], order=order_by) plt.title('\u7236\u89aa\u306e\u4ed5\u4e8b\u304c\u5b50\u4f9b\u306e\u6210\u7e3e\u306b\u4e0e\u3048\u308b\u5f71\u97ff') plt.xlabel('\u7236\u89aa\u306e\u4ed5\u4e8b') plt.ylabel('\u6210\u7e3e') plt.show() subplot \u3092\u4f7f\u3046\u3068\u3001\u8907\u6570\u306e\u30b0\u30e9\u30d5\u3092\u4e00\u679a\u306e\u56f3\u306b\u52a0\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u7236\u89aa\u3068\u6bcd\u89aa\u3092\u6bd4\u8f03\u3059\u308b \u30b3\u30fc\u30c9 subplot \u3092\u4f7f\u3063\u305f\u51dd\u3063\u305f\u30b0\u30e9\u30d5 plt.figure(figsize= (15,5)) plt.subplot(1, 2, 1) order_by=['\u306a\u3057', '\u30b5\u30fc\u30d3\u30b9', '\u6559\u5e2b', '\u533b\u7642', '\u305d\u306e\u4ed6'] sns.boxplot(x=df['\u7236\u8077\u696d'], y=df['G3'], order=order_by) plt.xticks(rotation=90) plt.title('\u7236\u89aa\u306e\u8077\u696d\u3068\u6210\u7e3e') plt.subplot(1, 2, 2) sns.boxplot(x=df['\u6bcd\u8077\u696d'], y=df['G3'], order=order_by) plt.xticks(rotation=90) plt.title('\u6bcd\u89aa\u306e\u8077\u696d\u3068\u6210\u7e3e') plt.show()","title":"\u7bb1\u3072\u3052\u56f3"},{"location":"student/#_8","text":"\u304a\u306a\u3058\u307f\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3082Seaborn\u3092\u4f7f\u3046\u3068\u591a\u5f69\u306b\u63cf\u753b\u3067\u304d\u307e\u3059\u3002 \u30d1\u30ec\u30c3\u30c8\u306b\u3088\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 \u30b3\u30fc\u30c9 countplot sns.set_theme(style=\"whitegrid\", font=\"IPAexGothic\") sns.countplot(x=df['G3'], palette='gray_r') plt.xlabel('G3') plt.ylabel('Count') plt.show() hue \u3092\u8ffd\u52a0\u3059\u308b\u3068\u3001\u30ab\u30c6\u30b4\u30ea\u30fc\u3054\u3068\u306b\u8272\u5206\u3051\u3055\u308c\u305f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u5f97\u3089\u308c\u307e\u3059\u3002 \u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3055\u308c\u305f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 \u30b3\u30fc\u30c9 \u6027\u5225\u3054\u3068\u306b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 sns.set(font=\"IPAexGothic\") # \u6587\u5b57\u5316\u3051\u3057\u305f\u3089 sns.countplot(x='G3',hue='\u6027\u5225', data=df) plt.title('\u6027\u5225\u3054\u3068\u306e\u6210\u7e3e\u5206\u5e03') plt.xlabel('G3') plt.ylabel('Count') plt.show() \u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u6cd5\u3092\u4f7f\u3046\u3068\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u6ed1\u3089\u304b\u306a\u66f2\u7dda\u306b\u4fdd\u7ba1\u3057\u3066\u304f\u308c\u307e\u3059\u3002 \u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u6cd5\u306b\u3088\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 \u30b3\u30fc\u30c9 \u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u6cd5\u306b\u3088\u308b\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0 sns.kdeplot(df.groupby('\u6027\u5225').get_group('\u7537\u6027')['G3'], shade = True, label = '\u7537\u5b50\u5b66\u751f') sns.kdeplot(df.groupby('\u6027\u5225').get_group('\u5973\u6027')['G3'], shade = True, label = '\u5973\u5b50\u5b66\u751f') plt.xlabel('G3') plt.ylabel('% data distribution') plt.show()","title":"\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0"},{"location":"student/#3","text":"Seaborn\u306e pairplot \u3092\u7528\u3044\u308b\u3068\u3001\uff13\u3064\u4ee5\u4e0a\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u6563\u5e03\u56f3\u3092\u4e00\u5ea6\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 \u5168\u90e8\u306e\u30da\u30a2\u30d7\u30ed\u30c3\u30c8 \u30b3\u30fc\u30c9 sns.pairplot(df, hue='\u6027\u5225') \u78ba\u8a8d\u3057\u305f\u3044\u9805\u76ee\u306b\u7d5e\u3063\u305f\u65b9\u304c\u898b\u3084\u3059\u3044\u30b0\u30e9\u30d5\u306b\u306a\u308a\u307e\u3059\u3002 \uff14\u9805\u76ee\u306b\u7d5e\u3063\u305f\u30da\u30a2\u30d7\u30ed\u30c3\u30c8 \u30b3\u30fc\u30c9 sns.pairplot(df[['\u6b20\u5e2d\u65e5', '\u30a2\u30eb\u30b3\u30fc\u30eb', '\u5e74\u9f62', 'G3']])","title":"\uff13\u3064\u4ee5\u4e0a\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u6563\u5e03\u56f3\u3092\u4e00\u5ea6\u306b\u898b\u308b"},{"location":"student/#_9","text":"\u76f8\u95a2\u884c\u5217\u306f\u3001\u3059\u3079\u3066\u306e\u6570\u5024\u30c7\u30fc\u30bf\u9593\u3067\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u3057\u305f\u884c\u5217\u3067\u3059\u3002 \u76f8\u95a2\u884c\u5217\u3092\u6c42\u3081\u308b df.corr() \u3054\u591a\u5206\u306b\u6f0f\u308c\u305a\u3001\u53ef\u8996\u5316\u3057\u3066\u304a\u304f\u3068\u30c7\u30fc\u30bf\u89e3\u6790\u304c\u884c\u3084\u3059\u3044\u3067\u3059\u3002 \u30d2\u30fc\u30c8\u30de\u30c3\u30d7 \u30b3\u30fc\u30c9 \u76f8\u95a2\u884c\u5217\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7 plt.figure(figsize=(10,10)) corr = df.corr() sns.heatmap(corr, annot=True)","title":"\u76f8\u95a2\u884c\u5217\u3068\u30d2\u30fc\u30c8\u30de\u30c3\u30d7"},{"location":"student/#_10","text":"\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u5206\u985e\u304c\u3069\u306e\u3088\u3046\u306b\u6563\u3089\u3070\u3063\u3066\u3044\u308b\u304b\u4e00\u89a7\u3092\u4f5c\u308a\u307e\u3059\u3002 plt.figure(figsize = (15,15)) for i,item in enumerate(['school', 'sex', 'famsize', 'Pstatus', 'Mjob', 'Fjob', 'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery', 'higher', 'internet', 'romantic']): plt.subplot(4,4,i+1) sns.countplot(data=df, x=item) plt.title(item) plt.show()","title":"\u30ab\u30c6\u30b4\u30ea\u30fc\u30c7\u30fc\u30bf\u3092\u8996\u899a\u5316\u3059\u308b"}]}